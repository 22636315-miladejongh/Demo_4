
Demo_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e39c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a0  0800e540  0800e540  0001e540  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8e0  0800e8e0  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  0800e8e0  0800e8e0  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e8e0  0800e8e0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8e0  0800e8e0  0001e8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e8e4  0800e8e4  0001e8e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e8e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001608  20000090  0800e978  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001698  0800e978  00021698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170b2  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000296b  00000000  00000000  00037172  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001168  00000000  00000000  00039ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  0003ac48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d55  00000000  00000000  0003bc98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011d9f  00000000  00000000  0005e9ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d6504  00000000  00000000  0007078c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146c90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a8  00000000  00000000  00146d0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e524 	.word	0x0800e524

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800e524 	.word	0x0800e524

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2uiz>:
 8000b8c:	004a      	lsls	r2, r1, #1
 8000b8e:	d211      	bcs.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b94:	d211      	bcs.n	8000bba <__aeabi_d2uiz+0x2e>
 8000b96:	d50d      	bpl.n	8000bb4 <__aeabi_d2uiz+0x28>
 8000b98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba0:	d40e      	bmi.n	8000bc0 <__aeabi_d2uiz+0x34>
 8000ba2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000baa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bbe:	d102      	bne.n	8000bc6 <__aeabi_d2uiz+0x3a>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	4770      	bx	lr
 8000bc6:	f04f 0000 	mov.w	r0, #0
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_d2f>:
 8000bcc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd4:	bf24      	itt	cs
 8000bd6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bda:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bde:	d90d      	bls.n	8000bfc <__aeabi_d2f+0x30>
 8000be0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bf0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf4:	bf08      	it	eq
 8000bf6:	f020 0001 	biceq.w	r0, r0, #1
 8000bfa:	4770      	bx	lr
 8000bfc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c00:	d121      	bne.n	8000c46 <__aeabi_d2f+0x7a>
 8000c02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c06:	bfbc      	itt	lt
 8000c08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c0c:	4770      	bxlt	lr
 8000c0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c16:	f1c2 0218 	rsb	r2, r2, #24
 8000c1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c22:	fa20 f002 	lsr.w	r0, r0, r2
 8000c26:	bf18      	it	ne
 8000c28:	f040 0001 	orrne.w	r0, r0, #1
 8000c2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c38:	ea40 000c 	orr.w	r0, r0, ip
 8000c3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c44:	e7cc      	b.n	8000be0 <__aeabi_d2f+0x14>
 8000c46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c4a:	d107      	bne.n	8000c5c <__aeabi_d2f+0x90>
 8000c4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c50:	bf1e      	ittt	ne
 8000c52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c5a:	4770      	bxne	lr
 8000c5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop

08000c6c <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000c6c:	b5b0      	push	{r4, r5, r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000c7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000c7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000c82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000c86:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c8a:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000c8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000c8e:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f80e 	bl	8000cc2 <Lcd_init>

	return lcd;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	461d      	mov	r5, r3
 8000caa:	f107 0410 	add.w	r4, r7, #16
 8000cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000cb6:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bdb0      	pop	{r4, r5, r7, pc}

08000cc2 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]

			lcd_write_command(lcd, 0x33);
 8000cca:	2133      	movs	r1, #51	; 0x33
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 f875 	bl	8000dbc <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000cd2:	2132      	movs	r1, #50	; 0x32
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f000 f871 	bl	8000dbc <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000cda:	2128      	movs	r1, #40	; 0x28
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 f86d 	bl	8000dbc <lcd_write_command>




	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 f869 	bl	8000dbc <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D|OPT_B|OPT_C);		// Lcd-on, cursor-off, no-blink
 8000cea:	210f      	movs	r1, #15
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f865 	bl	8000dbc <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 f861 	bl	8000dbc <lcd_write_command>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	683a      	ldr	r2, [r7, #0]
 8000d14:	4906      	ldr	r1, [pc, #24]	; (8000d30 <Lcd_int+0x2c>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00b ffea 	bl	800ccf0 <siprintf>

	Lcd_string(lcd, buffer);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f000 f806 	bl	8000d34 <Lcd_string>
}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	0800e540 	.word	0x0800e540

08000d34 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e00a      	b.n	8000d5a <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4413      	add	r3, r2
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f862 	bl	8000e18 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	3301      	adds	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	7bfc      	ldrb	r4, [r7, #15]
 8000d5c:	6838      	ldr	r0, [r7, #0]
 8000d5e:	f7ff fa3f 	bl	80001e0 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	429c      	cmp	r4, r3
 8000d66:	d3ed      	bcc.n	8000d44 <Lcd_string+0x10>
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd90      	pop	{r4, r7, pc}

08000d70 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <Lcd_cursor+0x30>)
 8000d84:	5cd2      	ldrb	r2, [r2, r3]
 8000d86:	78bb      	ldrb	r3, [r7, #2]
 8000d88:	4413      	add	r3, r2
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	3b80      	subs	r3, #128	; 0x80
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f812 	bl	8000dbc <lcd_write_command>
	#endif
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	0800e698 	.word	0x0800e698

08000da4 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8000dac:	2101      	movs	r1, #1
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 f804 	bl	8000dbc <lcd_write_command>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6898      	ldr	r0, [r3, #8]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	899b      	ldrh	r3, [r3, #12]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f007 feb2 	bl	8008b3c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	7d9b      	ldrb	r3, [r3, #22]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d111      	bne.n	8000e04 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000de0:	78fb      	ldrb	r3, [r7, #3]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	2204      	movs	r2, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f842 	bl	8000e74 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	2204      	movs	r2, #4
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 f839 	bl	8000e74 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000e02:	e005      	b.n	8000e10 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2208      	movs	r2, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 f832 	bl	8000e74 <lcd_write>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	460b      	mov	r3, r1
 8000e22:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6898      	ldr	r0, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	899b      	ldrh	r3, [r3, #12]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f007 fe84 	bl	8008b3c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	7d9b      	ldrb	r3, [r3, #22]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d111      	bne.n	8000e60 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	091b      	lsrs	r3, r3, #4
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2204      	movs	r2, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 f814 	bl	8000e74 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2204      	movs	r2, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f80b 	bl	8000e74 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000e5e:	e005      	b.n	8000e6c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	2208      	movs	r2, #8
 8000e64:	4619      	mov	r1, r3
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 f804 	bl	8000e74 <lcd_write>
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
 8000e80:	4613      	mov	r3, r2
 8000e82:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e019      	b.n	8000ebe <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	4413      	add	r3, r2
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4413      	add	r3, r2
 8000ea0:	8819      	ldrh	r1, [r3, #0]
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	7bfb      	ldrb	r3, [r7, #15]
 8000ea6:	fa42 f303 	asr.w	r3, r2, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	f007 fe42 	bl	8008b3c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	7bfa      	ldrb	r2, [r7, #15]
 8000ec0:	78bb      	ldrb	r3, [r7, #2]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d3e1      	bcc.n	8000e8a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6918      	ldr	r0, [r3, #16]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	8a9b      	ldrh	r3, [r3, #20]
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f007 fe33 	bl	8008b3c <HAL_GPIO_WritePin>
	DELAY(1);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f005 f98a 	bl	80061f0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6918      	ldr	r0, [r3, #16]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	8a9b      	ldrh	r3, [r3, #20]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f007 fe28 	bl	8008b3c <HAL_GPIO_WritePin>
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_UART_RxCpltCallback>:
//uint8_t start = 0;

uint8_t count_pulse = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]

	if(Rxdata[0] != 10){
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b0a      	cmp	r3, #10
 8000f02:	d00d      	beq.n	8000f20 <HAL_UART_RxCpltCallback+0x2c>

		Txdata[idx] = Rxdata[0];
 8000f04:	4b16      	ldr	r3, [pc, #88]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f0c:	7819      	ldrb	r1, [r3, #0]
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_UART_RxCpltCallback+0x70>)
 8000f10:	5499      	strb	r1, [r3, r2]
		idx++;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e013      	b.n	8000f48 <HAL_UART_RxCpltCallback+0x54>

	}
	else if (Rxdata[0] == 10){
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b0a      	cmp	r3, #10
 8000f26:	d10f      	bne.n	8000f48 <HAL_UART_RxCpltCallback+0x54>
		Txdata[idx] = Rxdata[0];
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f30:	7819      	ldrb	r1, [r3, #0]
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_UART_RxCpltCallback+0x70>)
 8000f34:	5499      	strb	r1, [r3, r2]
		idx = 0;
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_UART_RxCpltCallback+0x6c>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
		flag = 1;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_UART_RxCpltCallback+0x74>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
		move = 1;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_UART_RxCpltCallback+0x78>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	701a      	strb	r2, [r3, #0]

	}

	HAL_UART_Receive_IT(&huart2,Rxdata, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	4904      	ldr	r1, [pc, #16]	; (8000f5c <HAL_UART_RxCpltCallback+0x68>)
 8000f4c:	4808      	ldr	r0, [pc, #32]	; (8000f70 <HAL_UART_RxCpltCallback+0x7c>)
 8000f4e:	f00a fd15 	bl	800b97c <HAL_UART_Receive_IT>

}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000330 	.word	0x20000330
 8000f60:	200000ac 	.word	0x200000ac
 8000f64:	20000334 	.word	0x20000334
 8000f68:	200001c4 	.word	0x200001c4
 8000f6c:	2000032d 	.word	0x2000032d
 8000f70:	200015fc 	.word	0x200015fc
 8000f74:	00000000 	.word	0x00000000

08000f78 <Pulse>:

uint16_t DefDutyCycle[100];
uint16_t DefAmpPulse[100];
uint16_t DefOffsetPulse[100];

void Pulse(float DutyC, float PulseAmp, float PulseOff) {
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f82:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f86:	ed87 1a01 	vstr	s2, [r7, #4]

	for(count_pulse = 0; count_pulse < DutyC; count_pulse++) {
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <Pulse+0x100>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	e027      	b.n	8000fe2 <Pulse+0x6a>

		Pulse_array[count_pulse] = (PulseAmp + PulseOff)*(4096)/3.3; //scale
 8000f92:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f9e:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800107c <Pulse+0x104>
 8000fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa6:	ee17 0a90 	vmov	r0, s15
 8000faa:	f7ff fad5 	bl	8000558 <__aeabi_f2d>
 8000fae:	a330      	add	r3, pc, #192	; (adr r3, 8001070 <Pulse+0xf8>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff fc52 	bl	800085c <__aeabi_ddiv>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	460c      	mov	r4, r1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4622      	mov	r2, r4
 8000fc0:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <Pulse+0x100>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461c      	mov	r4, r3
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	4611      	mov	r1, r2
 8000fca:	f7ff fddf 	bl	8000b8c <__aeabi_d2uiz>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <Pulse+0x108>)
 8000fd2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(count_pulse = 0; count_pulse < DutyC; count_pulse++) {
 8000fd6:	4b28      	ldr	r3, [pc, #160]	; (8001078 <Pulse+0x100>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <Pulse+0x100>)
 8000fe0:	701a      	strb	r2, [r3, #0]
 8000fe2:	4b25      	ldr	r3, [pc, #148]	; (8001078 <Pulse+0x100>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	ee07 3a90 	vmov	s15, r3
 8000fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	dcca      	bgt.n	8000f92 <Pulse+0x1a>
	}

	for(count_pulse = DutyC; count_pulse< 100; count_pulse++) {
 8000ffc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001000:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001004:	edc7 7a00 	vstr	s15, [r7]
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <Pulse+0x100>)
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e023      	b.n	800105a <Pulse+0xe2>

		Pulse_array[count_pulse] = (PulseOff)*(4096)/3.3;
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800107c <Pulse+0x104>
 800101a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101e:	ee17 0a90 	vmov	r0, s15
 8001022:	f7ff fa99 	bl	8000558 <__aeabi_f2d>
 8001026:	a312      	add	r3, pc, #72	; (adr r3, 8001070 <Pulse+0xf8>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fc16 	bl	800085c <__aeabi_ddiv>
 8001030:	4603      	mov	r3, r0
 8001032:	460c      	mov	r4, r1
 8001034:	4619      	mov	r1, r3
 8001036:	4622      	mov	r2, r4
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <Pulse+0x100>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461c      	mov	r4, r3
 800103e:	4608      	mov	r0, r1
 8001040:	4611      	mov	r1, r2
 8001042:	f7ff fda3 	bl	8000b8c <__aeabi_d2uiz>
 8001046:	4602      	mov	r2, r0
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <Pulse+0x108>)
 800104a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	for(count_pulse = DutyC; count_pulse< 100; count_pulse++) {
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <Pulse+0x100>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <Pulse+0x100>)
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <Pulse+0x100>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b63      	cmp	r3, #99	; 0x63
 8001060:	d9d7      	bls.n	8001012 <Pulse+0x9a>
	}
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bd90      	pop	{r4, r7, pc}
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	66666666 	.word	0x66666666
 8001074:	400a6666 	.word	0x400a6666
 8001078:	200000d1 	.word	0x200000d1
 800107c:	45800000 	.word	0x45800000
 8001080:	20000348 	.word	0x20000348
 8001084:	00000000 	.word	0x00000000

08001088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001088:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800108c:	f6ad 1dd8 	subw	sp, sp, #2520	; 0x9d8
 8001090:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001092:	f005 f847 	bl	8006124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001096:	f004 f947 	bl	8005328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109a:	f004 fb8d 	bl	80057b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800109e:	f004 fb6d 	bl	800577c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010a2:	f004 fb3b 	bl	800571c <MX_USART2_UART_Init>
  MX_ADC3_Init();
 80010a6:	f004 f9a7 	bl	80053f8 <MX_ADC3_Init>
  MX_TIM1_Init();
 80010aa:	f004 fa3f 	bl	800552c <MX_TIM1_Init>
  MX_TIM2_Init();
 80010ae:	f004 fae9 	bl	8005684 <MX_TIM2_Init>
  MX_DAC1_Init();
 80010b2:	f004 fa11 	bl	80054d8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */


	HAL_UART_Transmit(&huart2, StudentNUM, 13, 20);
 80010b6:	2314      	movs	r3, #20
 80010b8:	220d      	movs	r2, #13
 80010ba:	49c7      	ldr	r1, [pc, #796]	; (80013d8 <main+0x350>)
 80010bc:	48c7      	ldr	r0, [pc, #796]	; (80013dc <main+0x354>)
 80010be:	f00a fbc9 	bl	800b854 <HAL_UART_Transmit>
	//HAL_TIM_Base_Start(&htim2);
	HAL_UART_Receive_IT(&huart2, Rxdata, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	49c6      	ldr	r1, [pc, #792]	; (80013e0 <main+0x358>)
 80010c6:	48c5      	ldr	r0, [pc, #788]	; (80013dc <main+0x354>)
 80010c8:	f00a fc58 	bl	800b97c <HAL_UART_Receive_IT>

	tLast_m = HAL_GetTick();
 80010cc:	f005 f884 	bl	80061d8 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4bc4      	ldr	r3, [pc, #784]	; (80013e4 <main+0x35c>)
 80010d4:	601a      	str	r2, [r3, #0]
	tLast_l = HAL_GetTick();
 80010d6:	f005 f87f 	bl	80061d8 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	4bc2      	ldr	r3, [pc, #776]	; (80013e8 <main+0x360>)
 80010de:	601a      	str	r2, [r3, #0]
	tLast_r = HAL_GetTick();
 80010e0:	f005 f87a 	bl	80061d8 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	4bc1      	ldr	r3, [pc, #772]	; (80013ec <main+0x364>)
 80010e8:	601a      	str	r2, [r3, #0]
	tLast_u = HAL_GetTick();
 80010ea:	f005 f875 	bl	80061d8 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	4bbf      	ldr	r3, [pc, #764]	; (80013f0 <main+0x368>)
 80010f2:	601a      	str	r2, [r3, #0]
	tLast_d = HAL_GetTick();
 80010f4:	f005 f870 	bl	80061d8 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4bbe      	ldr	r3, [pc, #760]	; (80013f4 <main+0x36c>)
 80010fc:	601a      	str	r2, [r3, #0]

	uint16_t DC_value[100];
	uint16_t AC_value[1000];
	uint8_t DC_measure = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
	uint8_t DCidx;
	uint16_t AC_measure = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
	uint16_t ACidx;
	uint32_t DC_CS = 0;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
	uint32_t AC_CS = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
	volatile uint8_t parameter_a;
	volatile uint8_t parameter_o;
	volatile uint8_t parameter_f;
	volatile uint8_t parameter_d;
	volatile uint8_t parameter_c;
	volatile uint8_t signal_d = 1;
 8001116:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
	volatile uint8_t signal_s = 0;
 800111e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
	volatile uint8_t signal_p = 0;
 8001126:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
	uint8_t count = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 39af 	strb.w	r3, [r7, #2479]	; 0x9af
	uint16_t f1 = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	f8a7 39ac 	strh.w	r3, [r7, #2476]	; 0x9ac
	uint16_t f2 = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	f8a7 397e 	strh.w	r3, [r7, #2430]	; 0x97e
	HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8001140:	2100      	movs	r1, #0
 8001142:	48ad      	ldr	r0, [pc, #692]	; (80013f8 <main+0x370>)
 8001144:	f009 f9c2 	bl	800a4cc <HAL_TIM_OC_Start_IT>
	display_msg = 1;
 8001148:	4bac      	ldr	r3, [pc, #688]	; (80013fc <main+0x374>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
//	int row = 0;
//	int col = 0;
	uint8_t offset_output_value[4];
	offset_output_value[0] = 1;
 800114e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001152:	2201      	movs	r2, #1
 8001154:	701a      	strb	r2, [r3, #0]
	offset_output_value[1] = 2;
 8001156:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800115a:	2202      	movs	r2, #2
 800115c:	705a      	strb	r2, [r3, #1]
	offset_output_value[2] = 0;
 800115e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001162:	2200      	movs	r2, #0
 8001164:	709a      	strb	r2, [r3, #2]
	offset_output_value[3] = 0;
 8001166:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800116a:	2200      	movs	r2, #0
 800116c:	70da      	strb	r2, [r3, #3]
	uint8_t amplitude_output_value[4];
	amplitude_output_value[0] = 1;
 800116e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
	amplitude_output_value[1] = 0;
 8001176:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800117a:	2200      	movs	r2, #0
 800117c:	705a      	strb	r2, [r3, #1]
	amplitude_output_value[2] = 0;
 800117e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001182:	2200      	movs	r2, #0
 8001184:	709a      	strb	r2, [r3, #2]
	amplitude_output_value[3] = 0;
 8001186:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800118a:	2200      	movs	r2, #0
 800118c:	70da      	strb	r2, [r3, #3]
	uint8_t frequency_output_value[4];
	frequency_output_value[0] = 1;
 800118e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
	frequency_output_value[1] = 0;
 8001196:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800119a:	2200      	movs	r2, #0
 800119c:	705a      	strb	r2, [r3, #1]
	frequency_output_value[2] = 0;
 800119e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011a2:	2200      	movs	r2, #0
 80011a4:	709a      	strb	r2, [r3, #2]
	frequency_output_value[3] = 0;
 80011a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011aa:	2200      	movs	r2, #0
 80011ac:	70da      	strb	r2, [r3, #3]
	uint8_t DC_offset_output_value[4];
	DC_offset_output_value[0] = 1;
 80011ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
	DC_offset_output_value[1] = 2;
 80011b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ba:	2202      	movs	r2, #2
 80011bc:	705a      	strb	r2, [r3, #1]
	DC_offset_output_value[2] = 0;
 80011be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c2:	2200      	movs	r2, #0
 80011c4:	709a      	strb	r2, [r3, #2]
	DC_offset_output_value[3] = 0;
 80011c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ca:	2200      	movs	r2, #0
 80011cc:	70da      	strb	r2, [r3, #3]
	//defaults
	float DAC_amplitude_output = 1000;
 80011ce:	4b8c      	ldr	r3, [pc, #560]	; (8001400 <main+0x378>)
 80011d0:	f607 12a8 	addw	r2, r7, #2472	; 0x9a8
 80011d4:	6013      	str	r3, [r2, #0]
	int DAC_amplitude_output_lcd = 1000;
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
	float DAC_offset_output = 1200;
 80011de:	4b89      	ldr	r3, [pc, #548]	; (8001404 <main+0x37c>)
 80011e0:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 80011e4:	6013      	str	r3, [r2, #0]
	int DAC_offset_output_lcd = 1200;
 80011e6:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80011ea:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
	uint16_t DAC_frequency_output = 1000;
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	f8a7 399a 	strh.w	r3, [r7, #2458]	; 0x99a
	uint16_t DAC_frequency_output_lcd = 1000;
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	f8a7 3998 	strh.w	r3, [r7, #2456]	; 0x998
	float DAC_DC_offset = 1200;
 80011fe:	4b81      	ldr	r3, [pc, #516]	; (8001404 <main+0x37c>)
 8001200:	f607 1294 	addw	r2, r7, #2452	; 0x994
 8001204:	6013      	str	r3, [r2, #0]
	int DAC_DC_Offset_lcd = 1200;
 8001206:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800120a:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990

	float DAC_DC_val;
	//TIM2 -> EGR = ((TIM2->EGR)|0b01);
	TIM2 -> ARR = (72e6/(1000*DAC_frequency_output)) - 1;
 800120e:	f8b7 399a 	ldrh.w	r3, [r7, #2458]	; 0x99a
 8001212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001216:	fb02 f303 	mul.w	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f98a 	bl	8000534 <__aeabi_i2d>
 8001220:	4603      	mov	r3, r0
 8001222:	460c      	mov	r4, r1
 8001224:	461a      	mov	r2, r3
 8001226:	4623      	mov	r3, r4
 8001228:	a169      	add	r1, pc, #420	; (adr r1, 80013d0 <main+0x348>)
 800122a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800122e:	f7ff fb15 	bl	800085c <__aeabi_ddiv>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	4618      	mov	r0, r3
 8001238:	4621      	mov	r1, r4
 800123a:	f04f 0200 	mov.w	r2, #0
 800123e:	4b72      	ldr	r3, [pc, #456]	; (8001408 <main+0x380>)
 8001240:	f7ff f82a 	bl	8000298 <__aeabi_dsub>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001250:	4610      	mov	r0, r2
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff fc9a 	bl	8000b8c <__aeabi_d2uiz>
 8001258:	4603      	mov	r3, r0
 800125a:	62e3      	str	r3, [r4, #44]	; 0x2c
	//	uint8_t sg = 0;
	//uint8_t mm_block = 0;


	/////
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 800125c:	2200      	movs	r2, #0
 800125e:	2104      	movs	r1, #4
 8001260:	486a      	ldr	r0, [pc, #424]	; (800140c <main+0x384>)
 8001262:	f007 fc6b 	bl	8008b3c <HAL_GPIO_WritePin>
	// Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
	Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOC, GPIOC };
 8001266:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800126a:	4a69      	ldr	r2, [pc, #420]	; (8001410 <main+0x388>)
 800126c:	461c      	mov	r4, r3
 800126e:	4613      	mov	r3, r2
 8001270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001272:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
	Lcd_PinType pins[] = {GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_6, GPIO_PIN_8};
 8001276:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800127a:	4a66      	ldr	r2, [pc, #408]	; (8001414 <main+0x38c>)
 800127c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001280:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	// Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
	lcd = Lcd_create(ports, pins, GPIOC, GPIO_PIN_4, GPIOB, GPIO_PIN_11, LCD_4_BIT_MODE);
 8001284:	f107 0418 	add.w	r4, r7, #24
 8001288:	4638      	mov	r0, r7
 800128a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800128e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001292:	2300      	movs	r3, #0
 8001294:	9303      	str	r3, [sp, #12]
 8001296:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	4b5b      	ldr	r3, [pc, #364]	; (800140c <main+0x384>)
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	2310      	movs	r3, #16
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	4b5c      	ldr	r3, [pc, #368]	; (8001418 <main+0x390>)
 80012a6:	f7ff fce1 	bl	8000c6c <Lcd_create>
 80012aa:	463b      	mov	r3, r7
 80012ac:	461d      	mov	r5, r3
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012b6:	e884 0003 	stmia.w	r4, {r0, r1}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		buttonbounce();
 80012ba:	f004 fb5b 	bl	8005974 <buttonbounce>
		//			HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
		//			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		//		}

		//default
		if(rows == 0 && cols == 1)
 80012be:	4b57      	ldr	r3, [pc, #348]	; (800141c <main+0x394>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d145      	bne.n	8001352 <main+0x2ca>
 80012c6:	4b56      	ldr	r3, [pc, #344]	; (8001420 <main+0x398>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d141      	bne.n	8001352 <main+0x2ca>
		{
			//press = 1;
			if (buttonState_d && press)
 80012ce:	4b55      	ldr	r3, [pc, #340]	; (8001424 <main+0x39c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d006      	beq.n	80012e4 <main+0x25c>
 80012d6:	4b54      	ldr	r3, [pc, #336]	; (8001428 <main+0x3a0>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <main+0x25c>
			{
				press = 0;
 80012de:	4b52      	ldr	r3, [pc, #328]	; (8001428 <main+0x3a0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 80012e4:	4b51      	ldr	r3, [pc, #324]	; (800142c <main+0x3a4>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d006      	beq.n	80012fa <main+0x272>
 80012ec:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <main+0x3a0>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <main+0x272>
			{
				press = 0;
 80012f4:	4b4c      	ldr	r3, [pc, #304]	; (8001428 <main+0x3a0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 80012fa:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <main+0x3a8>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d011      	beq.n	8001326 <main+0x29e>
 8001302:	4b49      	ldr	r3, [pc, #292]	; (8001428 <main+0x3a0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00d      	beq.n	8001326 <main+0x29e>
			{
				Lcd_clear(&lcd);
 800130a:	f107 0318 	add.w	r3, r7, #24
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fd48 	bl	8000da4 <Lcd_clear>
				rows = 0;
 8001314:	4b41      	ldr	r3, [pc, #260]	; (800141c <main+0x394>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]
				cols = 0;
 800131a:	4b41      	ldr	r3, [pc, #260]	; (8001420 <main+0x398>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001320:	4b41      	ldr	r3, [pc, #260]	; (8001428 <main+0x3a0>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001326:	4b43      	ldr	r3, [pc, #268]	; (8001434 <main+0x3ac>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <main+0x2b4>
 800132e:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <main+0x3a0>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <main+0x2b4>
			{
				press = 0;
 8001336:	4b3c      	ldr	r3, [pc, #240]	; (8001428 <main+0x3a0>)
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 800133c:	4b3e      	ldr	r3, [pc, #248]	; (8001438 <main+0x3b0>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d006      	beq.n	8001352 <main+0x2ca>
 8001344:	4b38      	ldr	r3, [pc, #224]	; (8001428 <main+0x3a0>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <main+0x2ca>
			{
				press = 0;
 800134c:	4b36      	ldr	r3, [pc, #216]	; (8001428 <main+0x3a0>)
 800134e:	2200      	movs	r2, #0
 8001350:	701a      	strb	r2, [r3, #0]
			//press = 0;
		}
		//default

		//startmsg
		if(rows == 0 && cols == 0)
 8001352:	4b32      	ldr	r3, [pc, #200]	; (800141c <main+0x394>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 8089 	bne.w	800146e <main+0x3e6>
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <main+0x398>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	f040 8084 	bne.w	800146e <main+0x3e6>
		{
			//press = 1;
			if (buttonState_d && press)
 8001366:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <main+0x39c>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d011      	beq.n	8001392 <main+0x30a>
 800136e:	4b2e      	ldr	r3, [pc, #184]	; (8001428 <main+0x3a0>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00d      	beq.n	8001392 <main+0x30a>
			{
				Lcd_clear(&lcd);
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fd12 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <main+0x394>)
 8001382:	2201      	movs	r2, #1
 8001384:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001386:	4b26      	ldr	r3, [pc, #152]	; (8001420 <main+0x398>)
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
				press = 0;
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <main+0x3a0>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <main+0x3a4>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <main+0x320>
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <main+0x3a0>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <main+0x320>
			{
				press = 0;
 80013a2:	4b21      	ldr	r3, [pc, #132]	; (8001428 <main+0x3a0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <main+0x3a8>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d048      	beq.n	8001442 <main+0x3ba>
 80013b0:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <main+0x3a0>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d044      	beq.n	8001442 <main+0x3ba>
			{
				Lcd_clear(&lcd);
 80013b8:	f107 0318 	add.w	r3, r7, #24
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fcf1 	bl	8000da4 <Lcd_clear>
				rows = 0;
 80013c2:	4b16      	ldr	r3, [pc, #88]	; (800141c <main+0x394>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
				cols = 1;
 80013c8:	4b15      	ldr	r3, [pc, #84]	; (8001420 <main+0x398>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e035      	b.n	800143c <main+0x3b4>
 80013d0:	00000000 	.word	0x00000000
 80013d4:	41912a88 	.word	0x41912a88
 80013d8:	20000000 	.word	0x20000000
 80013dc:	200015fc 	.word	0x200015fc
 80013e0:	20000330 	.word	0x20000330
 80013e4:	200000b0 	.word	0x200000b0
 80013e8:	200000b4 	.word	0x200000b4
 80013ec:	200000b8 	.word	0x200000b8
 80013f0:	200000bc 	.word	0x200000bc
 80013f4:	200000c0 	.word	0x200000c0
 80013f8:	200004e4 	.word	0x200004e4
 80013fc:	20001682 	.word	0x20001682
 8001400:	447a0000 	.word	0x447a0000
 8001404:	44960000 	.word	0x44960000
 8001408:	3ff00000 	.word	0x3ff00000
 800140c:	48000400 	.word	0x48000400
 8001410:	0800e680 	.word	0x0800e680
 8001414:	0800e690 	.word	0x0800e690
 8001418:	48000800 	.word	0x48000800
 800141c:	200000ce 	.word	0x200000ce
 8001420:	200000cd 	.word	0x200000cd
 8001424:	200000c8 	.word	0x200000c8
 8001428:	20000010 	.word	0x20000010
 800142c:	200000c7 	.word	0x200000c7
 8001430:	200000c4 	.word	0x200000c4
 8001434:	200000c5 	.word	0x200000c5
 8001438:	200000c6 	.word	0x200000c6
				press = 0;
 800143c:	4ba8      	ldr	r3, [pc, #672]	; (80016e0 <main+0x658>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001442:	4ba8      	ldr	r3, [pc, #672]	; (80016e4 <main+0x65c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <main+0x3d0>
 800144a:	4ba5      	ldr	r3, [pc, #660]	; (80016e0 <main+0x658>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <main+0x3d0>
			{
				press = 0;
 8001452:	4ba3      	ldr	r3, [pc, #652]	; (80016e0 <main+0x658>)
 8001454:	2200      	movs	r2, #0
 8001456:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001458:	4ba3      	ldr	r3, [pc, #652]	; (80016e8 <main+0x660>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d006      	beq.n	800146e <main+0x3e6>
 8001460:	4b9f      	ldr	r3, [pc, #636]	; (80016e0 <main+0x658>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <main+0x3e6>
			{
				press = 0;
 8001468:	4b9d      	ldr	r3, [pc, #628]	; (80016e0 <main+0x658>)
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
		}
		//startmsg


		//measmode
		if (rows == 1 && cols == 0)
 800146e:	4b9f      	ldr	r3, [pc, #636]	; (80016ec <main+0x664>)
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d161      	bne.n	800153a <main+0x4b2>
 8001476:	4b9e      	ldr	r3, [pc, #632]	; (80016f0 <main+0x668>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d15d      	bne.n	800153a <main+0x4b2>
		{
			if (buttonState_d && press)
 800147e:	4b9d      	ldr	r3, [pc, #628]	; (80016f4 <main+0x66c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d017      	beq.n	80014b6 <main+0x42e>
 8001486:	4b96      	ldr	r3, [pc, #600]	; (80016e0 <main+0x658>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d013      	beq.n	80014b6 <main+0x42e>
			{
				Lcd_clear(&lcd);
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fc86 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001498:	4b94      	ldr	r3, [pc, #592]	; (80016ec <main+0x664>)
 800149a:	2202      	movs	r2, #2
 800149c:	701a      	strb	r2, [r3, #0]
				cols = 0;
 800149e:	4b94      	ldr	r3, [pc, #592]	; (80016f0 <main+0x668>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
				press = 0;
 80014a4:	4b8e      	ldr	r3, [pc, #568]	; (80016e0 <main+0x658>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
				DC_measure = 1;
 80014aa:	2301      	movs	r3, #1
 80014ac:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
				AC_measure = 0;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
				//				timer_interrupt = 1;
				//				measurment_mode = 1;
			}
			if (buttonState_u && press)
 80014b6:	4b90      	ldr	r3, [pc, #576]	; (80016f8 <main+0x670>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d011      	beq.n	80014e2 <main+0x45a>
 80014be:	4b88      	ldr	r3, [pc, #544]	; (80016e0 <main+0x658>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00d      	beq.n	80014e2 <main+0x45a>
			{
				Lcd_clear(&lcd);
 80014c6:	f107 0318 	add.w	r3, r7, #24
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fc6a 	bl	8000da4 <Lcd_clear>
				rows = 0;
 80014d0:	4b86      	ldr	r3, [pc, #536]	; (80016ec <main+0x664>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80014d6:	4b86      	ldr	r3, [pc, #536]	; (80016f0 <main+0x668>)
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]
				press = 0;
 80014dc:	4b80      	ldr	r3, [pc, #512]	; (80016e0 <main+0x658>)
 80014de:	2200      	movs	r2, #0
 80014e0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 80014e2:	4b86      	ldr	r3, [pc, #536]	; (80016fc <main+0x674>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d006      	beq.n	80014f8 <main+0x470>
 80014ea:	4b7d      	ldr	r3, [pc, #500]	; (80016e0 <main+0x658>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d002      	beq.n	80014f8 <main+0x470>
			{
				press = 0;
 80014f2:	4b7b      	ldr	r3, [pc, #492]	; (80016e0 <main+0x658>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 80014f8:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <main+0x65c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <main+0x486>
 8001500:	4b77      	ldr	r3, [pc, #476]	; (80016e0 <main+0x658>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d002      	beq.n	800150e <main+0x486>
			{
				press = 0;
 8001508:	4b75      	ldr	r3, [pc, #468]	; (80016e0 <main+0x658>)
 800150a:	2200      	movs	r2, #0
 800150c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 800150e:	4b76      	ldr	r3, [pc, #472]	; (80016e8 <main+0x660>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d011      	beq.n	800153a <main+0x4b2>
 8001516:	4b72      	ldr	r3, [pc, #456]	; (80016e0 <main+0x658>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00d      	beq.n	800153a <main+0x4b2>
			{
				Lcd_clear(&lcd);
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fc3e 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001528:	4b70      	ldr	r3, [pc, #448]	; (80016ec <main+0x664>)
 800152a:	2201      	movs	r2, #1
 800152c:	701a      	strb	r2, [r3, #0]
				cols = 1;
 800152e:	4b70      	ldr	r3, [pc, #448]	; (80016f0 <main+0x668>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001534:	4b6a      	ldr	r3, [pc, #424]	; (80016e0 <main+0x658>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
			}
		}
		//measmode

		//sigmode
		if (rows == 1 && cols == 1)
 800153a:	4b6c      	ldr	r3, [pc, #432]	; (80016ec <main+0x664>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d15b      	bne.n	80015fa <main+0x572>
 8001542:	4b6b      	ldr	r3, [pc, #428]	; (80016f0 <main+0x668>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d157      	bne.n	80015fa <main+0x572>
		{
			if (buttonState_d && press)
 800154a:	4b6a      	ldr	r3, [pc, #424]	; (80016f4 <main+0x66c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d011      	beq.n	8001576 <main+0x4ee>
 8001552:	4b63      	ldr	r3, [pc, #396]	; (80016e0 <main+0x658>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00d      	beq.n	8001576 <main+0x4ee>
			{
				Lcd_clear(&lcd);
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fc20 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001564:	4b61      	ldr	r3, [pc, #388]	; (80016ec <main+0x664>)
 8001566:	2202      	movs	r2, #2
 8001568:	701a      	strb	r2, [r3, #0]
				cols = 4;
 800156a:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <main+0x668>)
 800156c:	2204      	movs	r2, #4
 800156e:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001570:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <main+0x658>)
 8001572:	2200      	movs	r2, #0
 8001574:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001576:	4b60      	ldr	r3, [pc, #384]	; (80016f8 <main+0x670>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d011      	beq.n	80015a2 <main+0x51a>
 800157e:	4b58      	ldr	r3, [pc, #352]	; (80016e0 <main+0x658>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d00d      	beq.n	80015a2 <main+0x51a>
			{
				Lcd_clear(&lcd);
 8001586:	f107 0318 	add.w	r3, r7, #24
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fc0a 	bl	8000da4 <Lcd_clear>
				rows = 0;
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <main+0x664>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001596:	4b56      	ldr	r3, [pc, #344]	; (80016f0 <main+0x668>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
				press = 0;
 800159c:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <main+0x658>)
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 80015a2:	4b56      	ldr	r3, [pc, #344]	; (80016fc <main+0x674>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <main+0x530>
 80015aa:	4b4d      	ldr	r3, [pc, #308]	; (80016e0 <main+0x658>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <main+0x530>
			{
				press = 0;
 80015b2:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <main+0x658>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 80015b8:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <main+0x65c>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d011      	beq.n	80015e4 <main+0x55c>
 80015c0:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <main+0x658>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00d      	beq.n	80015e4 <main+0x55c>
			{
				Lcd_clear(&lcd);
 80015c8:	f107 0318 	add.w	r3, r7, #24
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fbe9 	bl	8000da4 <Lcd_clear>
				rows = 1;
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <main+0x664>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80015d8:	4b45      	ldr	r3, [pc, #276]	; (80016f0 <main+0x668>)
 80015da:	2200      	movs	r2, #0
 80015dc:	701a      	strb	r2, [r3, #0]
				press = 0;
 80015de:	4b40      	ldr	r3, [pc, #256]	; (80016e0 <main+0x658>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 80015e4:	4b40      	ldr	r3, [pc, #256]	; (80016e8 <main+0x660>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d006      	beq.n	80015fa <main+0x572>
 80015ec:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <main+0x658>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d002      	beq.n	80015fa <main+0x572>
			{
				press = 0;
 80015f4:	4b3a      	ldr	r3, [pc, #232]	; (80016e0 <main+0x658>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	701a      	strb	r2, [r3, #0]
			}
		}
		//sigmode

		//DCvoltage
		if (rows == 2 && cols == 0)
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <main+0x664>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d156      	bne.n	80016b0 <main+0x628>
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <main+0x668>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d152      	bne.n	80016b0 <main+0x628>
		{
			if (buttonState_d && press)
 800160a:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <main+0x66c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d006      	beq.n	8001620 <main+0x598>
 8001612:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <main+0x658>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <main+0x598>
			{
				press = 0;
 800161a:	4b31      	ldr	r3, [pc, #196]	; (80016e0 <main+0x658>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001620:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <main+0x670>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d011      	beq.n	800164c <main+0x5c4>
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <main+0x658>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00d      	beq.n	800164c <main+0x5c4>
			{
				Lcd_clear(&lcd);
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fbb5 	bl	8000da4 <Lcd_clear>
				rows = 1;
 800163a:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <main+0x664>)
 800163c:	2201      	movs	r2, #1
 800163e:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <main+0x668>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <main+0x658>)
 8001648:	2200      	movs	r2, #0
 800164a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 800164c:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <main+0x674>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00c      	beq.n	800166e <main+0x5e6>
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <main+0x658>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <main+0x5e6>
			{
				DC_measure = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
				setcurrent = 0;
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <main+0x678>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001668:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <main+0x658>)
 800166a:	2200      	movs	r2, #0
 800166c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 800166e:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <main+0x65c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <main+0x5fc>
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <main+0x658>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <main+0x5fc>
			{
				press = 0;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <main+0x658>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <main+0x660>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d011      	beq.n	80016b0 <main+0x628>
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <main+0x658>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00d      	beq.n	80016b0 <main+0x628>
			{
				Lcd_clear(&lcd);
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fb83 	bl	8000da4 <Lcd_clear>
				rows = 2;
 800169e:	4b13      	ldr	r3, [pc, #76]	; (80016ec <main+0x664>)
 80016a0:	2202      	movs	r2, #2
 80016a2:	701a      	strb	r2, [r3, #0]
				cols = 1;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <main+0x668>)
 80016a6:	2201      	movs	r2, #1
 80016a8:	701a      	strb	r2, [r3, #0]
				press = 0;
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <main+0x658>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
			}
		}
		//DCVoltage

		//DCcurrent
		if (rows == 2 && cols == 1)
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <main+0x664>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	f040 8084 	bne.w	80017c2 <main+0x73a>
 80016ba:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <main+0x668>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d17f      	bne.n	80017c2 <main+0x73a>
		{
			if (buttonState_d && press)
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <main+0x66c>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <main+0x650>
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <main+0x658>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <main+0x650>
			{
				press = 0;
 80016d2:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <main+0x658>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <main+0x670>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	e011      	b.n	8001704 <main+0x67c>
 80016e0:	20000010 	.word	0x20000010
 80016e4:	200000c5 	.word	0x200000c5
 80016e8:	200000c6 	.word	0x200000c6
 80016ec:	200000ce 	.word	0x200000ce
 80016f0:	200000cd 	.word	0x200000cd
 80016f4:	200000c8 	.word	0x200000c8
 80016f8:	200000c7 	.word	0x200000c7
 80016fc:	200000c4 	.word	0x200000c4
 8001700:	20000531 	.word	0x20000531
 8001704:	d011      	beq.n	800172a <main+0x6a2>
 8001706:	4baf      	ldr	r3, [pc, #700]	; (80019c4 <main+0x93c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00d      	beq.n	800172a <main+0x6a2>
			{
				Lcd_clear(&lcd);
 800170e:	f107 0318 	add.w	r3, r7, #24
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb46 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001718:	4bab      	ldr	r3, [pc, #684]	; (80019c8 <main+0x940>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
				cols = 0;
 800171e:	4bab      	ldr	r3, [pc, #684]	; (80019cc <main+0x944>)
 8001720:	2200      	movs	r2, #0
 8001722:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001724:	4ba7      	ldr	r3, [pc, #668]	; (80019c4 <main+0x93c>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 800172a:	4ba9      	ldr	r3, [pc, #676]	; (80019d0 <main+0x948>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00f      	beq.n	8001752 <main+0x6ca>
 8001732:	4ba4      	ldr	r3, [pc, #656]	; (80019c4 <main+0x93c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <main+0x6ca>
			{
				setcurrent = 1;
 800173a:	4ba6      	ldr	r3, [pc, #664]	; (80019d4 <main+0x94c>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
				DC_measure = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
				AC_measure = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
				press = 0;
 800174c:	4b9d      	ldr	r3, [pc, #628]	; (80019c4 <main+0x93c>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001752:	4ba1      	ldr	r3, [pc, #644]	; (80019d8 <main+0x950>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d011      	beq.n	800177e <main+0x6f6>
 800175a:	4b9a      	ldr	r3, [pc, #616]	; (80019c4 <main+0x93c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <main+0x6f6>
			{
				Lcd_clear(&lcd);
 8001762:	f107 0318 	add.w	r3, r7, #24
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fb1c 	bl	8000da4 <Lcd_clear>
				rows = 2;
 800176c:	4b96      	ldr	r3, [pc, #600]	; (80019c8 <main+0x940>)
 800176e:	2202      	movs	r2, #2
 8001770:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001772:	4b96      	ldr	r3, [pc, #600]	; (80019cc <main+0x944>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001778:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <main+0x93c>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 800177e:	4b97      	ldr	r3, [pc, #604]	; (80019dc <main+0x954>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d01d      	beq.n	80017c2 <main+0x73a>
 8001786:	4b8f      	ldr	r3, [pc, #572]	; (80019c4 <main+0x93c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d019      	beq.n	80017c2 <main+0x73a>
			{
				DC_measure = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
				AC_measure = 1;
 8001794:	2301      	movs	r3, #1
 8001796:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
				timer_interrupt = 1;
 800179a:	4b91      	ldr	r3, [pc, #580]	; (80019e0 <main+0x958>)
 800179c:	2201      	movs	r2, #1
 800179e:	701a      	strb	r2, [r3, #0]
				measurment_mode = 1;
 80017a0:	4b90      	ldr	r3, [pc, #576]	; (80019e4 <main+0x95c>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
				Lcd_clear(&lcd);
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fafa 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80017b0:	4b85      	ldr	r3, [pc, #532]	; (80019c8 <main+0x940>)
 80017b2:	2202      	movs	r2, #2
 80017b4:	701a      	strb	r2, [r3, #0]
				cols = 2;
 80017b6:	4b85      	ldr	r3, [pc, #532]	; (80019cc <main+0x944>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	701a      	strb	r2, [r3, #0]
				press = 0;
 80017bc:	4b81      	ldr	r3, [pc, #516]	; (80019c4 <main+0x93c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
			}
		}
		//DCcurrent

		//ACvoltage
		if (rows == 2 && cols == 2)
 80017c2:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <main+0x940>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d161      	bne.n	800188e <main+0x806>
 80017ca:	4b80      	ldr	r3, [pc, #512]	; (80019cc <main+0x944>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d15d      	bne.n	800188e <main+0x806>
		{
			if (buttonState_d && press)
 80017d2:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <main+0x960>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d006      	beq.n	80017e8 <main+0x760>
 80017da:	4b7a      	ldr	r3, [pc, #488]	; (80019c4 <main+0x93c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <main+0x760>
			{
				press = 0;
 80017e2:	4b78      	ldr	r3, [pc, #480]	; (80019c4 <main+0x93c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 80017e8:	4b80      	ldr	r3, [pc, #512]	; (80019ec <main+0x964>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d011      	beq.n	8001814 <main+0x78c>
 80017f0:	4b74      	ldr	r3, [pc, #464]	; (80019c4 <main+0x93c>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00d      	beq.n	8001814 <main+0x78c>
			{
				Lcd_clear(&lcd);
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fad1 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001802:	4b71      	ldr	r3, [pc, #452]	; (80019c8 <main+0x940>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001808:	4b70      	ldr	r3, [pc, #448]	; (80019cc <main+0x944>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
				press = 0;
 800180e:	4b6d      	ldr	r3, [pc, #436]	; (80019c4 <main+0x93c>)
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8001814:	4b6e      	ldr	r3, [pc, #440]	; (80019d0 <main+0x948>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d00c      	beq.n	8001836 <main+0x7ae>
 800181c:	4b69      	ldr	r3, [pc, #420]	; (80019c4 <main+0x93c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d008      	beq.n	8001836 <main+0x7ae>
			{
				AC_measure = 1;
 8001824:	2301      	movs	r3, #1
 8001826:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
				setcurrent = 0;
 800182a:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <main+0x94c>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001830:	4b64      	ldr	r3, [pc, #400]	; (80019c4 <main+0x93c>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001836:	4b68      	ldr	r3, [pc, #416]	; (80019d8 <main+0x950>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d011      	beq.n	8001862 <main+0x7da>
 800183e:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <main+0x93c>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00d      	beq.n	8001862 <main+0x7da>
			{
				Lcd_clear(&lcd);
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff faaa 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001850:	4b5d      	ldr	r3, [pc, #372]	; (80019c8 <main+0x940>)
 8001852:	2202      	movs	r2, #2
 8001854:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001856:	4b5d      	ldr	r3, [pc, #372]	; (80019cc <main+0x944>)
 8001858:	2201      	movs	r2, #1
 800185a:	701a      	strb	r2, [r3, #0]
				press = 0;
 800185c:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <main+0x93c>)
 800185e:	2200      	movs	r2, #0
 8001860:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001862:	4b5e      	ldr	r3, [pc, #376]	; (80019dc <main+0x954>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d011      	beq.n	800188e <main+0x806>
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <main+0x93c>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00d      	beq.n	800188e <main+0x806>
			{
				Lcd_clear(&lcd);
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff fa94 	bl	8000da4 <Lcd_clear>
				rows = 2;
 800187c:	4b52      	ldr	r3, [pc, #328]	; (80019c8 <main+0x940>)
 800187e:	2202      	movs	r2, #2
 8001880:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8001882:	4b52      	ldr	r3, [pc, #328]	; (80019cc <main+0x944>)
 8001884:	2203      	movs	r2, #3
 8001886:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001888:	4b4e      	ldr	r3, [pc, #312]	; (80019c4 <main+0x93c>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
			}
		}
		//ACvoltage

		//ACcurrent
		if (rows == 2 && cols == 3)
 800188e:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <main+0x940>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d159      	bne.n	800194a <main+0x8c2>
 8001896:	4b4d      	ldr	r3, [pc, #308]	; (80019cc <main+0x944>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b03      	cmp	r3, #3
 800189c:	d155      	bne.n	800194a <main+0x8c2>
		{
			if (buttonState_d && press)
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <main+0x960>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <main+0x82c>
 80018a6:	4b47      	ldr	r3, [pc, #284]	; (80019c4 <main+0x93c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <main+0x82c>
			{
				press = 0;
 80018ae:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <main+0x93c>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 80018b4:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <main+0x964>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d011      	beq.n	80018e0 <main+0x858>
 80018bc:	4b41      	ldr	r3, [pc, #260]	; (80019c4 <main+0x93c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d00d      	beq.n	80018e0 <main+0x858>
			{
				Lcd_clear(&lcd);
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fa6b 	bl	8000da4 <Lcd_clear>
				rows = 1;
 80018ce:	4b3e      	ldr	r3, [pc, #248]	; (80019c8 <main+0x940>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80018d4:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <main+0x944>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
				press = 0;
 80018da:	4b3a      	ldr	r3, [pc, #232]	; (80019c4 <main+0x93c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <main+0x948>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00f      	beq.n	8001908 <main+0x880>
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <main+0x93c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d00b      	beq.n	8001908 <main+0x880>
			{
				setcurrent = 1;
 80018f0:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <main+0x94c>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	701a      	strb	r2, [r3, #0]
				AC_measure = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
				DC_measure = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
				press = 0;
 8001902:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <main+0x93c>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001908:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <main+0x950>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d011      	beq.n	8001934 <main+0x8ac>
 8001910:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <main+0x93c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00d      	beq.n	8001934 <main+0x8ac>
			{
				Lcd_clear(&lcd);
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff fa41 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001922:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <main+0x940>)
 8001924:	2202      	movs	r2, #2
 8001926:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8001928:	4b28      	ldr	r3, [pc, #160]	; (80019cc <main+0x944>)
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
				press = 0;
 800192e:	4b25      	ldr	r3, [pc, #148]	; (80019c4 <main+0x93c>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <main+0x954>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <main+0x8c2>
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <main+0x93c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <main+0x8c2>
			{
				press = 0;
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <main+0x93c>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
			}
		}
		//ACcurrent

		//Type
		if (rows == 2 && cols == 4)
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <main+0x940>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b02      	cmp	r3, #2
 8001950:	d173      	bne.n	8001a3a <main+0x9b2>
 8001952:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <main+0x944>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b04      	cmp	r3, #4
 8001958:	d16f      	bne.n	8001a3a <main+0x9b2>
		{
			if (buttonState_d && press)
 800195a:	4b23      	ldr	r3, [pc, #140]	; (80019e8 <main+0x960>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d011      	beq.n	8001986 <main+0x8fe>
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <main+0x93c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00d      	beq.n	8001986 <main+0x8fe>
			{
				Lcd_clear(&lcd);
 800196a:	f107 0318 	add.w	r3, r7, #24
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fa18 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <main+0x940>)
 8001976:	2203      	movs	r2, #3
 8001978:	701a      	strb	r2, [r3, #0]
				cols = 0;
 800197a:	4b14      	ldr	r3, [pc, #80]	; (80019cc <main+0x944>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <main+0x93c>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <main+0x964>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d011      	beq.n	80019b2 <main+0x92a>
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <main+0x93c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00d      	beq.n	80019b2 <main+0x92a>
			{
				Lcd_clear(&lcd);
 8001996:	f107 0318 	add.w	r3, r7, #24
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fa02 	bl	8000da4 <Lcd_clear>
				rows = 1;
 80019a0:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <main+0x940>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	701a      	strb	r2, [r3, #0]
				cols = 0;
 80019a6:	4b09      	ldr	r3, [pc, #36]	; (80019cc <main+0x944>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
				press = 0;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <main+0x93c>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 80019b2:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <main+0x948>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01e      	beq.n	80019f8 <main+0x970>
 80019ba:	4b02      	ldr	r3, [pc, #8]	; (80019c4 <main+0x93c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	e016      	b.n	80019f0 <main+0x968>
 80019c2:	bf00      	nop
 80019c4:	20000010 	.word	0x20000010
 80019c8:	200000ce 	.word	0x200000ce
 80019cc:	200000cd 	.word	0x200000cd
 80019d0:	200000c4 	.word	0x200000c4
 80019d4:	20000531 	.word	0x20000531
 80019d8:	200000c5 	.word	0x200000c5
 80019dc:	200000c6 	.word	0x200000c6
 80019e0:	2000168c 	.word	0x2000168c
 80019e4:	2000000f 	.word	0x2000000f
 80019e8:	200000c8 	.word	0x200000c8
 80019ec:	200000c7 	.word	0x200000c7
 80019f0:	d002      	beq.n	80019f8 <main+0x970>
			{
				press = 0;
 80019f2:	4bac      	ldr	r3, [pc, #688]	; (8001ca4 <main+0xc1c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 80019f8:	4bab      	ldr	r3, [pc, #684]	; (8001ca8 <main+0xc20>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <main+0x986>
 8001a00:	4ba8      	ldr	r3, [pc, #672]	; (8001ca4 <main+0xc1c>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <main+0x986>
			{
				press = 0;
 8001a08:	4ba6      	ldr	r3, [pc, #664]	; (8001ca4 <main+0xc1c>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001a0e:	4ba7      	ldr	r3, [pc, #668]	; (8001cac <main+0xc24>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d011      	beq.n	8001a3a <main+0x9b2>
 8001a16:	4ba3      	ldr	r3, [pc, #652]	; (8001ca4 <main+0xc1c>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00d      	beq.n	8001a3a <main+0x9b2>
			{
				Lcd_clear(&lcd);
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f9be 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001a28:	4ba1      	ldr	r3, [pc, #644]	; (8001cb0 <main+0xc28>)
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	701a      	strb	r2, [r3, #0]
				cols = 5;
 8001a2e:	4ba1      	ldr	r3, [pc, #644]	; (8001cb4 <main+0xc2c>)
 8001a30:	2205      	movs	r2, #5
 8001a32:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001a34:	4b9b      	ldr	r3, [pc, #620]	; (8001ca4 <main+0xc1c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
			}
		}
		//Type

		//Parameter
		if (rows == 2 && cols == 5)
 8001a3a:	4b9d      	ldr	r3, [pc, #628]	; (8001cb0 <main+0xc28>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d166      	bne.n	8001b10 <main+0xa88>
 8001a42:	4b9c      	ldr	r3, [pc, #624]	; (8001cb4 <main+0xc2c>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d162      	bne.n	8001b10 <main+0xa88>
		{
			if (buttonState_d && press)
 8001a4a:	4b9b      	ldr	r3, [pc, #620]	; (8001cb8 <main+0xc30>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d011      	beq.n	8001a76 <main+0x9ee>
 8001a52:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <main+0xc1c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00d      	beq.n	8001a76 <main+0x9ee>
			{
				Lcd_clear(&lcd);
 8001a5a:	f107 0318 	add.w	r3, r7, #24
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f9a0 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001a64:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <main+0xc28>)
 8001a66:	2203      	movs	r2, #3
 8001a68:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8001a6a:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <main+0xc2c>)
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	701a      	strb	r2, [r3, #0]
				//				}
				press = 0;
 8001a70:	4b8c      	ldr	r3, [pc, #560]	; (8001ca4 <main+0xc1c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001a76:	4b91      	ldr	r3, [pc, #580]	; (8001cbc <main+0xc34>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d011      	beq.n	8001aa2 <main+0xa1a>
 8001a7e:	4b89      	ldr	r3, [pc, #548]	; (8001ca4 <main+0xc1c>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00d      	beq.n	8001aa2 <main+0xa1a>
			{
				Lcd_clear(&lcd);
 8001a86:	f107 0318 	add.w	r3, r7, #24
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f98a 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001a90:	4b87      	ldr	r3, [pc, #540]	; (8001cb0 <main+0xc28>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001a96:	4b87      	ldr	r3, [pc, #540]	; (8001cb4 <main+0xc2c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001a9c:	4b81      	ldr	r3, [pc, #516]	; (8001ca4 <main+0xc1c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8001aa2:	4b87      	ldr	r3, [pc, #540]	; (8001cc0 <main+0xc38>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <main+0xa30>
 8001aaa:	4b7e      	ldr	r3, [pc, #504]	; (8001ca4 <main+0xc1c>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <main+0xa30>
			{
				press = 0;
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	; (8001ca4 <main+0xc1c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001ab8:	4b7b      	ldr	r3, [pc, #492]	; (8001ca8 <main+0xc20>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d011      	beq.n	8001ae4 <main+0xa5c>
 8001ac0:	4b78      	ldr	r3, [pc, #480]	; (8001ca4 <main+0xc1c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00d      	beq.n	8001ae4 <main+0xa5c>
			{
				Lcd_clear(&lcd);
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff f969 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001ad2:	4b77      	ldr	r3, [pc, #476]	; (8001cb0 <main+0xc28>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001ad8:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <main+0xc2c>)
 8001ada:	2204      	movs	r2, #4
 8001adc:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001ade:	4b71      	ldr	r3, [pc, #452]	; (8001ca4 <main+0xc1c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001ae4:	4b71      	ldr	r3, [pc, #452]	; (8001cac <main+0xc24>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d011      	beq.n	8001b10 <main+0xa88>
 8001aec:	4b6d      	ldr	r3, [pc, #436]	; (8001ca4 <main+0xc1c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00d      	beq.n	8001b10 <main+0xa88>
			{
				Lcd_clear(&lcd);
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f953 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001afe:	4b6c      	ldr	r3, [pc, #432]	; (8001cb0 <main+0xc28>)
 8001b00:	2202      	movs	r2, #2
 8001b02:	701a      	strb	r2, [r3, #0]
				cols = 6;
 8001b04:	4b6b      	ldr	r3, [pc, #428]	; (8001cb4 <main+0xc2c>)
 8001b06:	2206      	movs	r2, #6
 8001b08:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001b0a:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <main+0xc1c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
			}
		}
		//Parameter

		//Output
		if (rows == 2 && cols == 6)
 8001b10:	4b67      	ldr	r3, [pc, #412]	; (8001cb0 <main+0xc28>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d15b      	bne.n	8001bd0 <main+0xb48>
 8001b18:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <main+0xc2c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b06      	cmp	r3, #6
 8001b1e:	d157      	bne.n	8001bd0 <main+0xb48>
		{
			if (buttonState_d && press)
 8001b20:	4b65      	ldr	r3, [pc, #404]	; (8001cb8 <main+0xc30>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d011      	beq.n	8001b4c <main+0xac4>
 8001b28:	4b5e      	ldr	r3, [pc, #376]	; (8001ca4 <main+0xc1c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00d      	beq.n	8001b4c <main+0xac4>
			{
				Lcd_clear(&lcd);
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff f935 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <main+0xc28>)
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	701a      	strb	r2, [r3, #0]
				cols = 7;
 8001b40:	4b5c      	ldr	r3, [pc, #368]	; (8001cb4 <main+0xc2c>)
 8001b42:	2207      	movs	r2, #7
 8001b44:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001b46:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <main+0xc1c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001b4c:	4b5b      	ldr	r3, [pc, #364]	; (8001cbc <main+0xc34>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d011      	beq.n	8001b78 <main+0xaf0>
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <main+0xc1c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00d      	beq.n	8001b78 <main+0xaf0>
			{
				Lcd_clear(&lcd);
 8001b5c:	f107 0318 	add.w	r3, r7, #24
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff f91f 	bl	8000da4 <Lcd_clear>
				rows = 1;
 8001b66:	4b52      	ldr	r3, [pc, #328]	; (8001cb0 <main+0xc28>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001b6c:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <main+0xc2c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001b72:	4b4c      	ldr	r3, [pc, #304]	; (8001ca4 <main+0xc1c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8001b78:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <main+0xc38>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <main+0xb06>
 8001b80:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <main+0xc1c>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <main+0xb06>
			{
				press = 0;
 8001b88:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <main+0xc1c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <main+0xc20>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d011      	beq.n	8001bba <main+0xb32>
 8001b96:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <main+0xc1c>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00d      	beq.n	8001bba <main+0xb32>
			{
				Lcd_clear(&lcd);
 8001b9e:	f107 0318 	add.w	r3, r7, #24
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f8fe 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001ba8:	4b41      	ldr	r3, [pc, #260]	; (8001cb0 <main+0xc28>)
 8001baa:	2202      	movs	r2, #2
 8001bac:	701a      	strb	r2, [r3, #0]
				cols = 5;
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <main+0xc2c>)
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <main+0xc1c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001bba:	4b3c      	ldr	r3, [pc, #240]	; (8001cac <main+0xc24>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <main+0xb48>
 8001bc2:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <main+0xc1c>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <main+0xb48>
			{
				press = 0;
 8001bca:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <main+0xc1c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
			}
		}
		//Output

		//Type DC
		if (rows == 3 && cols == 0)
 8001bd0:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <main+0xc28>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d15f      	bne.n	8001c98 <main+0xc10>
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <main+0xc2c>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d15b      	bne.n	8001c98 <main+0xc10>
		{
			if (buttonState_d && press)
 8001be0:	4b35      	ldr	r3, [pc, #212]	; (8001cb8 <main+0xc30>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <main+0xb6e>
 8001be8:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <main+0xc1c>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d002      	beq.n	8001bf6 <main+0xb6e>
			{
				press = 0;
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	; (8001ca4 <main+0xc1c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <main+0xc34>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d011      	beq.n	8001c22 <main+0xb9a>
 8001bfe:	4b29      	ldr	r3, [pc, #164]	; (8001ca4 <main+0xc1c>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <main+0xb9a>
			{
				Lcd_clear(&lcd);
 8001c06:	f107 0318 	add.w	r3, r7, #24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff f8ca 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001c10:	4b27      	ldr	r3, [pc, #156]	; (8001cb0 <main+0xc28>)
 8001c12:	2202      	movs	r2, #2
 8001c14:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <main+0xc2c>)
 8001c18:	2204      	movs	r2, #4
 8001c1a:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001c1c:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <main+0xc1c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8001c22:	4b27      	ldr	r3, [pc, #156]	; (8001cc0 <main+0xc38>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <main+0xbce>
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <main+0xc1c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d011      	beq.n	8001c56 <main+0xbce>
			{
				DC_set = 1;
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <main+0xc3c>)
 8001c34:	2201      	movs	r2, #1
 8001c36:	701a      	strb	r2, [r3, #0]
				signal_d = 1;
 8001c38:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
				signal_s = 0;
 8001c40:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 8001c48:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <main+0xc1c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <main+0xc20>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d006      	beq.n	8001c6c <main+0xbe4>
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <main+0xc1c>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <main+0xbe4>
			{
				press = 0;
 8001c66:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <main+0xc1c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001c6c:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <main+0xc24>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d011      	beq.n	8001c98 <main+0xc10>
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <main+0xc1c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00d      	beq.n	8001c98 <main+0xc10>
			{
				Lcd_clear(&lcd);
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff f88f 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <main+0xc28>)
 8001c88:	2203      	movs	r2, #3
 8001c8a:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <main+0xc2c>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <main+0xc1c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
			}
		}
		//Type DC

		//Type sinus
		if (rows == 3 && cols == 1)
 8001c98:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <main+0xc28>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d17e      	bne.n	8001d9e <main+0xd16>
 8001ca0:	e012      	b.n	8001cc8 <main+0xc40>
 8001ca2:	bf00      	nop
 8001ca4:	20000010 	.word	0x20000010
 8001ca8:	200000c5 	.word	0x200000c5
 8001cac:	200000c6 	.word	0x200000c6
 8001cb0:	200000ce 	.word	0x200000ce
 8001cb4:	200000cd 	.word	0x200000cd
 8001cb8:	200000c8 	.word	0x200000c8
 8001cbc:	200000c7 	.word	0x200000c7
 8001cc0:	200000c4 	.word	0x200000c4
 8001cc4:	200000cf 	.word	0x200000cf
 8001cc8:	4bad      	ldr	r3, [pc, #692]	; (8001f80 <main+0xef8>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d166      	bne.n	8001d9e <main+0xd16>
		{
			if (buttonState_d && press)
 8001cd0:	4bac      	ldr	r3, [pc, #688]	; (8001f84 <main+0xefc>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <main+0xc5e>
 8001cd8:	4bab      	ldr	r3, [pc, #684]	; (8001f88 <main+0xf00>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d002      	beq.n	8001ce6 <main+0xc5e>
			{
				press = 0;
 8001ce0:	4ba9      	ldr	r3, [pc, #676]	; (8001f88 <main+0xf00>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001ce6:	4ba9      	ldr	r3, [pc, #676]	; (8001f8c <main+0xf04>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d011      	beq.n	8001d12 <main+0xc8a>
 8001cee:	4ba6      	ldr	r3, [pc, #664]	; (8001f88 <main+0xf00>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00d      	beq.n	8001d12 <main+0xc8a>
			{
				Lcd_clear(&lcd);
 8001cf6:	f107 0318 	add.w	r3, r7, #24
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f852 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001d00:	4ba3      	ldr	r3, [pc, #652]	; (8001f90 <main+0xf08>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001d06:	4b9e      	ldr	r3, [pc, #632]	; (8001f80 <main+0xef8>)
 8001d08:	2204      	movs	r2, #4
 8001d0a:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001d0c:	4b9e      	ldr	r3, [pc, #632]	; (8001f88 <main+0xf00>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8001d12:	4ba0      	ldr	r3, [pc, #640]	; (8001f94 <main+0xf0c>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <main+0xcbe>
 8001d1a:	4b9b      	ldr	r3, [pc, #620]	; (8001f88 <main+0xf00>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d011      	beq.n	8001d46 <main+0xcbe>
			{
				AC_set = 1;
 8001d22:	4b9d      	ldr	r3, [pc, #628]	; (8001f98 <main+0xf10>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 8001d28:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
				signal_s = 1;
 8001d30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 8001d38:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001d40:	4b91      	ldr	r3, [pc, #580]	; (8001f88 <main+0xf00>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001d46:	4b95      	ldr	r3, [pc, #596]	; (8001f9c <main+0xf14>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d011      	beq.n	8001d72 <main+0xcea>
 8001d4e:	4b8e      	ldr	r3, [pc, #568]	; (8001f88 <main+0xf00>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00d      	beq.n	8001d72 <main+0xcea>
			{
				Lcd_clear(&lcd);
 8001d56:	f107 0318 	add.w	r3, r7, #24
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f822 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001d60:	4b8b      	ldr	r3, [pc, #556]	; (8001f90 <main+0xf08>)
 8001d62:	2203      	movs	r2, #3
 8001d64:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001d66:	4b86      	ldr	r3, [pc, #536]	; (8001f80 <main+0xef8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001d6c:	4b86      	ldr	r3, [pc, #536]	; (8001f88 <main+0xf00>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001d72:	4b8b      	ldr	r3, [pc, #556]	; (8001fa0 <main+0xf18>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d011      	beq.n	8001d9e <main+0xd16>
 8001d7a:	4b83      	ldr	r3, [pc, #524]	; (8001f88 <main+0xf00>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <main+0xd16>
			{
				Lcd_clear(&lcd);
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f80c 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001d8c:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <main+0xf08>)
 8001d8e:	2203      	movs	r2, #3
 8001d90:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8001d92:	4b7b      	ldr	r3, [pc, #492]	; (8001f80 <main+0xef8>)
 8001d94:	2202      	movs	r2, #2
 8001d96:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001d98:	4b7b      	ldr	r3, [pc, #492]	; (8001f88 <main+0xf00>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
			}
		}
		//Type sinus

		//Type pulse
		if (rows == 3 && cols == 2)
 8001d9e:	4b7c      	ldr	r3, [pc, #496]	; (8001f90 <main+0xf08>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b03      	cmp	r3, #3
 8001da4:	d15c      	bne.n	8001e60 <main+0xdd8>
 8001da6:	4b76      	ldr	r3, [pc, #472]	; (8001f80 <main+0xef8>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d158      	bne.n	8001e60 <main+0xdd8>
		{
			if (buttonState_d && press)
 8001dae:	4b75      	ldr	r3, [pc, #468]	; (8001f84 <main+0xefc>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <main+0xd3c>
 8001db6:	4b74      	ldr	r3, [pc, #464]	; (8001f88 <main+0xf00>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <main+0xd3c>
			{
				press = 0;
 8001dbe:	4b72      	ldr	r3, [pc, #456]	; (8001f88 <main+0xf00>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001dc4:	4b71      	ldr	r3, [pc, #452]	; (8001f8c <main+0xf04>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d011      	beq.n	8001df0 <main+0xd68>
 8001dcc:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <main+0xf00>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00d      	beq.n	8001df0 <main+0xd68>
			{
				Lcd_clear(&lcd);
 8001dd4:	f107 0318 	add.w	r3, r7, #24
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe ffe3 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001dde:	4b6c      	ldr	r3, [pc, #432]	; (8001f90 <main+0xf08>)
 8001de0:	2202      	movs	r2, #2
 8001de2:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001de4:	4b66      	ldr	r3, [pc, #408]	; (8001f80 <main+0xef8>)
 8001de6:	2204      	movs	r2, #4
 8001de8:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001dea:	4b67      	ldr	r3, [pc, #412]	; (8001f88 <main+0xf00>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8001df0:	4b68      	ldr	r3, [pc, #416]	; (8001f94 <main+0xf0c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d012      	beq.n	8001e1e <main+0xd96>
 8001df8:	4b63      	ldr	r3, [pc, #396]	; (8001f88 <main+0xf00>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d00e      	beq.n	8001e1e <main+0xd96>
			{
				signal_d = 0;
 8001e00:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
				signal_s = 0;
 8001e08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
				signal_p = 1;
 8001e10:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001e18:	4b5b      	ldr	r3, [pc, #364]	; (8001f88 <main+0xf00>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001e1e:	4b5f      	ldr	r3, [pc, #380]	; (8001f9c <main+0xf14>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d011      	beq.n	8001e4a <main+0xdc2>
 8001e26:	4b58      	ldr	r3, [pc, #352]	; (8001f88 <main+0xf00>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00d      	beq.n	8001e4a <main+0xdc2>
			{
				Lcd_clear(&lcd);
 8001e2e:	f107 0318 	add.w	r3, r7, #24
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe ffb6 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001e38:	4b55      	ldr	r3, [pc, #340]	; (8001f90 <main+0xf08>)
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001e3e:	4b50      	ldr	r3, [pc, #320]	; (8001f80 <main+0xef8>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001e44:	4b50      	ldr	r3, [pc, #320]	; (8001f88 <main+0xf00>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001e4a:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <main+0xf18>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d006      	beq.n	8001e60 <main+0xdd8>
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <main+0xf00>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d002      	beq.n	8001e60 <main+0xdd8>
			{
				press = 0;
 8001e5a:	4b4b      	ldr	r3, [pc, #300]	; (8001f88 <main+0xf00>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	701a      	strb	r2, [r3, #0]
			}
		}
		//Type pulse

		//Param Ampl
		if (rows == 3 && cols == 3)
 8001e60:	4b4b      	ldr	r3, [pc, #300]	; (8001f90 <main+0xf08>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b03      	cmp	r3, #3
 8001e66:	d15b      	bne.n	8001f20 <main+0xe98>
 8001e68:	4b45      	ldr	r3, [pc, #276]	; (8001f80 <main+0xef8>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d157      	bne.n	8001f20 <main+0xe98>
		{
			if (buttonState_d && press)
 8001e70:	4b44      	ldr	r3, [pc, #272]	; (8001f84 <main+0xefc>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d011      	beq.n	8001e9c <main+0xe14>
 8001e78:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <main+0xf00>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <main+0xe14>
			{
				Lcd_clear(&lcd);
 8001e80:	f107 0318 	add.w	r3, r7, #24
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe ff8d 	bl	8000da4 <Lcd_clear>

				rows = 4;
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <main+0xf08>)
 8001e8c:	2204      	movs	r2, #4
 8001e8e:	701a      	strb	r2, [r3, #0]
				cols = 0;
 8001e90:	4b3b      	ldr	r3, [pc, #236]	; (8001f80 <main+0xef8>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <main+0xf00>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <main+0xf04>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d011      	beq.n	8001ec8 <main+0xe40>
 8001ea4:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <main+0xf00>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00d      	beq.n	8001ec8 <main+0xe40>
			{
				Lcd_clear(&lcd);
 8001eac:	f107 0318 	add.w	r3, r7, #24
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe ff77 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001eb6:	4b36      	ldr	r3, [pc, #216]	; (8001f90 <main+0xf08>)
 8001eb8:	2202      	movs	r2, #2
 8001eba:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001ebc:	4b30      	ldr	r3, [pc, #192]	; (8001f80 <main+0xef8>)
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <main+0xf00>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8001ec8:	4b32      	ldr	r3, [pc, #200]	; (8001f94 <main+0xf0c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d006      	beq.n	8001ede <main+0xe56>
 8001ed0:	4b2d      	ldr	r3, [pc, #180]	; (8001f88 <main+0xf00>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <main+0xe56>
			{
				press = 0;
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	; (8001f88 <main+0xf00>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001ede:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <main+0xf14>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <main+0xe6c>
 8001ee6:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <main+0xf00>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <main+0xe6c>
			{
				press = 0;
 8001eee:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <main+0xf00>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <main+0xf18>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d011      	beq.n	8001f20 <main+0xe98>
 8001efc:	4b22      	ldr	r3, [pc, #136]	; (8001f88 <main+0xf00>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00d      	beq.n	8001f20 <main+0xe98>
			{
				Lcd_clear(&lcd);
 8001f04:	f107 0318 	add.w	r3, r7, #24
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe ff4b 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <main+0xf08>)
 8001f10:	2203      	movs	r2, #3
 8001f12:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <main+0xef8>)
 8001f16:	2204      	movs	r2, #4
 8001f18:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	; (8001f88 <main+0xf00>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
			}
		}
		//Param Ampl

		//Param Offset
		if (rows == 3 && cols == 4)
 8001f20:	4b1b      	ldr	r3, [pc, #108]	; (8001f90 <main+0xf08>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d17a      	bne.n	800201e <main+0xf96>
 8001f28:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <main+0xef8>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d176      	bne.n	800201e <main+0xf96>
		{
			if (buttonState_d && press)
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <main+0xefc>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d011      	beq.n	8001f5c <main+0xed4>
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <main+0xf00>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00d      	beq.n	8001f5c <main+0xed4>
			{
				Lcd_clear(&lcd);
 8001f40:	f107 0318 	add.w	r3, r7, #24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe ff2d 	bl	8000da4 <Lcd_clear>
				rows = 4;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <main+0xf08>)
 8001f4c:	2204      	movs	r2, #4
 8001f4e:	701a      	strb	r2, [r3, #0]
				cols = 1;
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <main+0xef8>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]

				press = 0;
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <main+0xf00>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <main+0xf04>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d025      	beq.n	8001fb0 <main+0xf28>
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <main+0xf00>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d021      	beq.n	8001fb0 <main+0xf28>
			{
				Lcd_clear(&lcd);
 8001f6c:	f107 0318 	add.w	r3, r7, #24
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe ff17 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8001f76:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <main+0xf08>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e012      	b.n	8001fa4 <main+0xf1c>
 8001f7e:	bf00      	nop
 8001f80:	200000cd 	.word	0x200000cd
 8001f84:	200000c8 	.word	0x200000c8
 8001f88:	20000010 	.word	0x20000010
 8001f8c:	200000c7 	.word	0x200000c7
 8001f90:	200000ce 	.word	0x200000ce
 8001f94:	200000c4 	.word	0x200000c4
 8001f98:	200000d0 	.word	0x200000d0
 8001f9c:	200000c5 	.word	0x200000c5
 8001fa0:	200000c6 	.word	0x200000c6
				cols = 4;
 8001fa4:	4ba9      	ldr	r3, [pc, #676]	; (800224c <main+0x11c4>)
 8001fa6:	2204      	movs	r2, #4
 8001fa8:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001faa:	4ba9      	ldr	r3, [pc, #676]	; (8002250 <main+0x11c8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8001fb0:	4ba8      	ldr	r3, [pc, #672]	; (8002254 <main+0x11cc>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d006      	beq.n	8001fc6 <main+0xf3e>
 8001fb8:	4ba5      	ldr	r3, [pc, #660]	; (8002250 <main+0x11c8>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <main+0xf3e>
			{
				//DC_set = 0;
				press = 0;
 8001fc0:	4ba3      	ldr	r3, [pc, #652]	; (8002250 <main+0x11c8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8001fc6:	4ba4      	ldr	r3, [pc, #656]	; (8002258 <main+0x11d0>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d011      	beq.n	8001ff2 <main+0xf6a>
 8001fce:	4ba0      	ldr	r3, [pc, #640]	; (8002250 <main+0x11c8>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00d      	beq.n	8001ff2 <main+0xf6a>
			{
				Lcd_clear(&lcd);
 8001fd6:	f107 0318 	add.w	r3, r7, #24
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fee2 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8001fe0:	4b9e      	ldr	r3, [pc, #632]	; (800225c <main+0x11d4>)
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8001fe6:	4b99      	ldr	r3, [pc, #612]	; (800224c <main+0x11c4>)
 8001fe8:	2203      	movs	r2, #3
 8001fea:	701a      	strb	r2, [r3, #0]
				press = 0;
 8001fec:	4b98      	ldr	r3, [pc, #608]	; (8002250 <main+0x11c8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8001ff2:	4b9b      	ldr	r3, [pc, #620]	; (8002260 <main+0x11d8>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d011      	beq.n	800201e <main+0xf96>
 8001ffa:	4b95      	ldr	r3, [pc, #596]	; (8002250 <main+0x11c8>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00d      	beq.n	800201e <main+0xf96>
			{
				Lcd_clear(&lcd);
 8002002:	f107 0318 	add.w	r3, r7, #24
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fecc 	bl	8000da4 <Lcd_clear>
				rows = 3;
 800200c:	4b93      	ldr	r3, [pc, #588]	; (800225c <main+0x11d4>)
 800200e:	2203      	movs	r2, #3
 8002010:	701a      	strb	r2, [r3, #0]
				cols = 5;
 8002012:	4b8e      	ldr	r3, [pc, #568]	; (800224c <main+0x11c4>)
 8002014:	2205      	movs	r2, #5
 8002016:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002018:	4b8d      	ldr	r3, [pc, #564]	; (8002250 <main+0x11c8>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
			}
		}
		//Param Offset

		//Param Freq
		if (rows == 3 && cols == 5)
 800201e:	4b8f      	ldr	r3, [pc, #572]	; (800225c <main+0x11d4>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d166      	bne.n	80020f4 <main+0x106c>
 8002026:	4b89      	ldr	r3, [pc, #548]	; (800224c <main+0x11c4>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b05      	cmp	r3, #5
 800202c:	d162      	bne.n	80020f4 <main+0x106c>
		{
			if (buttonState_d && press)
 800202e:	4b8d      	ldr	r3, [pc, #564]	; (8002264 <main+0x11dc>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d011      	beq.n	800205a <main+0xfd2>
 8002036:	4b86      	ldr	r3, [pc, #536]	; (8002250 <main+0x11c8>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <main+0xfd2>
			{
				//if(output)
				//{
				Lcd_clear(&lcd);
 800203e:	f107 0318 	add.w	r3, r7, #24
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe feae 	bl	8000da4 <Lcd_clear>
				rows = 4;
 8002048:	4b84      	ldr	r3, [pc, #528]	; (800225c <main+0x11d4>)
 800204a:	2204      	movs	r2, #4
 800204c:	701a      	strb	r2, [r3, #0]
				cols = 2;
 800204e:	4b7f      	ldr	r3, [pc, #508]	; (800224c <main+0x11c4>)
 8002050:	2202      	movs	r2, #2
 8002052:	701a      	strb	r2, [r3, #0]

				//}
				press = 0;
 8002054:	4b7e      	ldr	r3, [pc, #504]	; (8002250 <main+0x11c8>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]


			}
			if (buttonState_u && press)
 800205a:	4b83      	ldr	r3, [pc, #524]	; (8002268 <main+0x11e0>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d011      	beq.n	8002086 <main+0xffe>
 8002062:	4b7b      	ldr	r3, [pc, #492]	; (8002250 <main+0x11c8>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00d      	beq.n	8002086 <main+0xffe>
			{
				Lcd_clear(&lcd);
 800206a:	f107 0318 	add.w	r3, r7, #24
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fe98 	bl	8000da4 <Lcd_clear>
				rows = 2;
 8002074:	4b79      	ldr	r3, [pc, #484]	; (800225c <main+0x11d4>)
 8002076:	2202      	movs	r2, #2
 8002078:	701a      	strb	r2, [r3, #0]
				cols = 4;
 800207a:	4b74      	ldr	r3, [pc, #464]	; (800224c <main+0x11c4>)
 800207c:	2204      	movs	r2, #4
 800207e:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002080:	4b73      	ldr	r3, [pc, #460]	; (8002250 <main+0x11c8>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8002086:	4b73      	ldr	r3, [pc, #460]	; (8002254 <main+0x11cc>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <main+0x1014>
 800208e:	4b70      	ldr	r3, [pc, #448]	; (8002250 <main+0x11c8>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <main+0x1014>
			{
				press = 0;
 8002096:	4b6e      	ldr	r3, [pc, #440]	; (8002250 <main+0x11c8>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 800209c:	4b6e      	ldr	r3, [pc, #440]	; (8002258 <main+0x11d0>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d011      	beq.n	80020c8 <main+0x1040>
 80020a4:	4b6a      	ldr	r3, [pc, #424]	; (8002250 <main+0x11c8>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <main+0x1040>
			{
				Lcd_clear(&lcd);
 80020ac:	f107 0318 	add.w	r3, r7, #24
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fe77 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80020b6:	4b69      	ldr	r3, [pc, #420]	; (800225c <main+0x11d4>)
 80020b8:	2203      	movs	r2, #3
 80020ba:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80020bc:	4b63      	ldr	r3, [pc, #396]	; (800224c <main+0x11c4>)
 80020be:	2204      	movs	r2, #4
 80020c0:	701a      	strb	r2, [r3, #0]
				press = 0;
 80020c2:	4b63      	ldr	r3, [pc, #396]	; (8002250 <main+0x11c8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 80020c8:	4b65      	ldr	r3, [pc, #404]	; (8002260 <main+0x11d8>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d011      	beq.n	80020f4 <main+0x106c>
 80020d0:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <main+0x11c8>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00d      	beq.n	80020f4 <main+0x106c>
			{
				Lcd_clear(&lcd);
 80020d8:	f107 0318 	add.w	r3, r7, #24
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe fe61 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80020e2:	4b5e      	ldr	r3, [pc, #376]	; (800225c <main+0x11d4>)
 80020e4:	2203      	movs	r2, #3
 80020e6:	701a      	strb	r2, [r3, #0]
				cols = 6;
 80020e8:	4b58      	ldr	r3, [pc, #352]	; (800224c <main+0x11c4>)
 80020ea:	2206      	movs	r2, #6
 80020ec:	701a      	strb	r2, [r3, #0]
				press = 0;
 80020ee:	4b58      	ldr	r3, [pc, #352]	; (8002250 <main+0x11c8>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
			}
		}
		//Param Freq

		//Param Duty Cycle
		if (rows == 3 && cols == 6)
 80020f4:	4b59      	ldr	r3, [pc, #356]	; (800225c <main+0x11d4>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d15b      	bne.n	80021b4 <main+0x112c>
 80020fc:	4b53      	ldr	r3, [pc, #332]	; (800224c <main+0x11c4>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b06      	cmp	r3, #6
 8002102:	d157      	bne.n	80021b4 <main+0x112c>
		{
			if (buttonState_d && press)
 8002104:	4b57      	ldr	r3, [pc, #348]	; (8002264 <main+0x11dc>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d011      	beq.n	8002130 <main+0x10a8>
 800210c:	4b50      	ldr	r3, [pc, #320]	; (8002250 <main+0x11c8>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00d      	beq.n	8002130 <main+0x10a8>
			{
				Lcd_clear(&lcd);
 8002114:	f107 0318 	add.w	r3, r7, #24
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fe43 	bl	8000da4 <Lcd_clear>
				rows = 4;
 800211e:	4b4f      	ldr	r3, [pc, #316]	; (800225c <main+0x11d4>)
 8002120:	2204      	movs	r2, #4
 8002122:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002124:	4b49      	ldr	r3, [pc, #292]	; (800224c <main+0x11c4>)
 8002126:	2203      	movs	r2, #3
 8002128:	701a      	strb	r2, [r3, #0]
				press = 0;
 800212a:	4b49      	ldr	r3, [pc, #292]	; (8002250 <main+0x11c8>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8002130:	4b4d      	ldr	r3, [pc, #308]	; (8002268 <main+0x11e0>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d011      	beq.n	800215c <main+0x10d4>
 8002138:	4b45      	ldr	r3, [pc, #276]	; (8002250 <main+0x11c8>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00d      	beq.n	800215c <main+0x10d4>
			{
				Lcd_clear(&lcd);
 8002140:	f107 0318 	add.w	r3, r7, #24
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fe2d 	bl	8000da4 <Lcd_clear>
				rows = 2;
 800214a:	4b44      	ldr	r3, [pc, #272]	; (800225c <main+0x11d4>)
 800214c:	2202      	movs	r2, #2
 800214e:	701a      	strb	r2, [r3, #0]
				cols = 4;
 8002150:	4b3e      	ldr	r3, [pc, #248]	; (800224c <main+0x11c4>)
 8002152:	2204      	movs	r2, #4
 8002154:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002156:	4b3e      	ldr	r3, [pc, #248]	; (8002250 <main+0x11c8>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 800215c:	4b3d      	ldr	r3, [pc, #244]	; (8002254 <main+0x11cc>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d006      	beq.n	8002172 <main+0x10ea>
 8002164:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <main+0x11c8>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <main+0x10ea>
			{
				press = 0;
 800216c:	4b38      	ldr	r3, [pc, #224]	; (8002250 <main+0x11c8>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8002172:	4b39      	ldr	r3, [pc, #228]	; (8002258 <main+0x11d0>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d011      	beq.n	800219e <main+0x1116>
 800217a:	4b35      	ldr	r3, [pc, #212]	; (8002250 <main+0x11c8>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00d      	beq.n	800219e <main+0x1116>
			{
				Lcd_clear(&lcd);
 8002182:	f107 0318 	add.w	r3, r7, #24
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fe0c 	bl	8000da4 <Lcd_clear>
				rows = 3;
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <main+0x11d4>)
 800218e:	2203      	movs	r2, #3
 8002190:	701a      	strb	r2, [r3, #0]
				cols = 5;
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <main+0x11c4>)
 8002194:	2205      	movs	r2, #5
 8002196:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002198:	4b2d      	ldr	r3, [pc, #180]	; (8002250 <main+0x11c8>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 800219e:	4b30      	ldr	r3, [pc, #192]	; (8002260 <main+0x11d8>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <main+0x112c>
 80021a6:	4b2a      	ldr	r3, [pc, #168]	; (8002250 <main+0x11c8>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <main+0x112c>
			{
				press = 0;
 80021ae:	4b28      	ldr	r3, [pc, #160]	; (8002250 <main+0x11c8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]
			}
		}
		//Param Duty Cycle

		//Output on
		if (rows == 3 && cols == 7)
 80021b4:	4b29      	ldr	r3, [pc, #164]	; (800225c <main+0x11d4>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d167      	bne.n	800228c <main+0x1204>
 80021bc:	4b23      	ldr	r3, [pc, #140]	; (800224c <main+0x11c4>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b07      	cmp	r3, #7
 80021c2:	d163      	bne.n	800228c <main+0x1204>
		{
			if (buttonState_d && press)
 80021c4:	4b27      	ldr	r3, [pc, #156]	; (8002264 <main+0x11dc>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d006      	beq.n	80021da <main+0x1152>
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <main+0x11c8>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <main+0x1152>
			{
				press = 0;
 80021d4:	4b1e      	ldr	r3, [pc, #120]	; (8002250 <main+0x11c8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 80021da:	4b23      	ldr	r3, [pc, #140]	; (8002268 <main+0x11e0>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d011      	beq.n	8002206 <main+0x117e>
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <main+0x11c8>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00d      	beq.n	8002206 <main+0x117e>
			{
				Lcd_clear(&lcd);
 80021ea:	f107 0318 	add.w	r3, r7, #24
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fdd8 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <main+0x11d4>)
 80021f6:	2202      	movs	r2, #2
 80021f8:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80021fa:	4b14      	ldr	r3, [pc, #80]	; (800224c <main+0x11c4>)
 80021fc:	2204      	movs	r2, #4
 80021fe:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <main+0x11c8>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <main+0x11cc>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d009      	beq.n	8002222 <main+0x119a>
 800220e:	4b10      	ldr	r3, [pc, #64]	; (8002250 <main+0x11c8>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <main+0x119a>
			{
				output = 1;
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <main+0x11e4>)
 8002218:	2201      	movs	r2, #1
 800221a:	701a      	strb	r2, [r3, #0]
				//Lcd_clear(&lcd);
				press = 0;
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <main+0x11c8>)
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8002222:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <main+0x11d0>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d006      	beq.n	8002238 <main+0x11b0>
 800222a:	4b09      	ldr	r3, [pc, #36]	; (8002250 <main+0x11c8>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <main+0x11b0>
			{
				press = 0;
 8002232:	4b07      	ldr	r3, [pc, #28]	; (8002250 <main+0x11c8>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <main+0x11d8>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d025      	beq.n	800228c <main+0x1204>
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <main+0x11c8>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d021      	beq.n	800228c <main+0x1204>
 8002248:	e012      	b.n	8002270 <main+0x11e8>
 800224a:	bf00      	nop
 800224c:	200000cd 	.word	0x200000cd
 8002250:	20000010 	.word	0x20000010
 8002254:	200000c4 	.word	0x200000c4
 8002258:	200000c5 	.word	0x200000c5
 800225c:	200000ce 	.word	0x200000ce
 8002260:	200000c6 	.word	0x200000c6
 8002264:	200000c8 	.word	0x200000c8
 8002268:	200000c7 	.word	0x200000c7
 800226c:	200000cc 	.word	0x200000cc
			{
				Lcd_clear(&lcd);
 8002270:	f107 0318 	add.w	r3, r7, #24
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fd95 	bl	8000da4 <Lcd_clear>
				rows = 3;
 800227a:	4bc3      	ldr	r3, [pc, #780]	; (8002588 <main+0x1500>)
 800227c:	2203      	movs	r2, #3
 800227e:	701a      	strb	r2, [r3, #0]
				cols = 8;
 8002280:	4bc2      	ldr	r3, [pc, #776]	; (800258c <main+0x1504>)
 8002282:	2208      	movs	r2, #8
 8002284:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002286:	4bc2      	ldr	r3, [pc, #776]	; (8002590 <main+0x1508>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
			}
		}
		//Output on

		//Output off
		if (rows == 3 && cols == 8)
 800228c:	4bbe      	ldr	r3, [pc, #760]	; (8002588 <main+0x1500>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b03      	cmp	r3, #3
 8002292:	d153      	bne.n	800233c <main+0x12b4>
 8002294:	4bbd      	ldr	r3, [pc, #756]	; (800258c <main+0x1504>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d14f      	bne.n	800233c <main+0x12b4>
		{
			if (buttonState_d && press)
 800229c:	4bbd      	ldr	r3, [pc, #756]	; (8002594 <main+0x150c>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <main+0x122a>
 80022a4:	4bba      	ldr	r3, [pc, #744]	; (8002590 <main+0x1508>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <main+0x122a>
			{
				press = 0;
 80022ac:	4bb8      	ldr	r3, [pc, #736]	; (8002590 <main+0x1508>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 80022b2:	4bb9      	ldr	r3, [pc, #740]	; (8002598 <main+0x1510>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d011      	beq.n	80022de <main+0x1256>
 80022ba:	4bb5      	ldr	r3, [pc, #724]	; (8002590 <main+0x1508>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00d      	beq.n	80022de <main+0x1256>
			{
				Lcd_clear(&lcd);
 80022c2:	f107 0318 	add.w	r3, r7, #24
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fd6c 	bl	8000da4 <Lcd_clear>
				rows = 2;
 80022cc:	4bae      	ldr	r3, [pc, #696]	; (8002588 <main+0x1500>)
 80022ce:	2202      	movs	r2, #2
 80022d0:	701a      	strb	r2, [r3, #0]
				cols = 4;
 80022d2:	4bae      	ldr	r3, [pc, #696]	; (800258c <main+0x1504>)
 80022d4:	2204      	movs	r2, #4
 80022d6:	701a      	strb	r2, [r3, #0]
				press = 0;
 80022d8:	4bad      	ldr	r3, [pc, #692]	; (8002590 <main+0x1508>)
 80022da:	2200      	movs	r2, #0
 80022dc:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 80022de:	4baf      	ldr	r3, [pc, #700]	; (800259c <main+0x1514>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <main+0x1272>
 80022e6:	4baa      	ldr	r3, [pc, #680]	; (8002590 <main+0x1508>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <main+0x1272>
			{
				output = 0;
 80022ee:	4bac      	ldr	r3, [pc, #688]	; (80025a0 <main+0x1518>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
				press = 0;
 80022f4:	4ba6      	ldr	r3, [pc, #664]	; (8002590 <main+0x1508>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 80022fa:	4baa      	ldr	r3, [pc, #680]	; (80025a4 <main+0x151c>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d011      	beq.n	8002326 <main+0x129e>
 8002302:	4ba3      	ldr	r3, [pc, #652]	; (8002590 <main+0x1508>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00d      	beq.n	8002326 <main+0x129e>
			{
				Lcd_clear(&lcd);
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fd48 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002314:	4b9c      	ldr	r3, [pc, #624]	; (8002588 <main+0x1500>)
 8002316:	2203      	movs	r2, #3
 8002318:	701a      	strb	r2, [r3, #0]
				cols = 7;
 800231a:	4b9c      	ldr	r3, [pc, #624]	; (800258c <main+0x1504>)
 800231c:	2207      	movs	r2, #7
 800231e:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002320:	4b9b      	ldr	r3, [pc, #620]	; (8002590 <main+0x1508>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8002326:	4ba0      	ldr	r3, [pc, #640]	; (80025a8 <main+0x1520>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d006      	beq.n	800233c <main+0x12b4>
 800232e:	4b98      	ldr	r3, [pc, #608]	; (8002590 <main+0x1508>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <main+0x12b4>
			{
				press = 0;
 8002336:	4b96      	ldr	r3, [pc, #600]	; (8002590 <main+0x1508>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
			}
		}
		//Output off

		//parameter amp values
		if (rows == 4 && cols == 0)
 800233c:	4b92      	ldr	r3, [pc, #584]	; (8002588 <main+0x1500>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b04      	cmp	r3, #4
 8002342:	f040 811d 	bne.w	8002580 <main+0x14f8>
 8002346:	4b91      	ldr	r3, [pc, #580]	; (800258c <main+0x1504>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 8118 	bne.w	8002580 <main+0x14f8>
		{
			if (buttonState_d && press)
 8002350:	4b90      	ldr	r3, [pc, #576]	; (8002594 <main+0x150c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <main+0x12de>
 8002358:	4b8d      	ldr	r3, [pc, #564]	; (8002590 <main+0x1508>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d002      	beq.n	8002366 <main+0x12de>
			{
				press = 0;
 8002360:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <main+0x1508>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8002366:	4b8c      	ldr	r3, [pc, #560]	; (8002598 <main+0x1510>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d011      	beq.n	8002392 <main+0x130a>
 800236e:	4b88      	ldr	r3, [pc, #544]	; (8002590 <main+0x1508>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00d      	beq.n	8002392 <main+0x130a>
			{
				Lcd_clear(&lcd);
 8002376:	f107 0318 	add.w	r3, r7, #24
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe fd12 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002380:	4b81      	ldr	r3, [pc, #516]	; (8002588 <main+0x1500>)
 8002382:	2203      	movs	r2, #3
 8002384:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002386:	4b81      	ldr	r3, [pc, #516]	; (800258c <main+0x1504>)
 8002388:	2203      	movs	r2, #3
 800238a:	701a      	strb	r2, [r3, #0]
				press = 0;
 800238c:	4b80      	ldr	r3, [pc, #512]	; (8002590 <main+0x1508>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8002392:	4b82      	ldr	r3, [pc, #520]	; (800259c <main+0x1514>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d015      	beq.n	80023c6 <main+0x133e>
 800239a:	4b7d      	ldr	r3, [pc, #500]	; (8002590 <main+0x1508>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d011      	beq.n	80023c6 <main+0x133e>
			{
				setAmplitude = 1;
 80023a2:	4b82      	ldr	r3, [pc, #520]	; (80025ac <main+0x1524>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
				signal_s = 1;
 80023a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 80023b0:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 80023b8:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
				press = 0;
 80023c0:	4b73      	ldr	r3, [pc, #460]	; (8002590 <main+0x1508>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 80023c6:	4b77      	ldr	r3, [pc, #476]	; (80025a4 <main+0x151c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d068      	beq.n	80024a0 <main+0x1418>
 80023ce:	4b70      	ldr	r3, [pc, #448]	; (8002590 <main+0x1508>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d064      	beq.n	80024a0 <main+0x1418>
			{
				DAC_amplitude_output_lcd = DAC_amplitude_output_lcd - 100;
 80023d6:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80023da:	3b64      	subs	r3, #100	; 0x64
 80023dc:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
				if(DAC_amplitude_output_lcd <= 0)
 80023e0:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	dc02      	bgt.n	80023ee <main+0x1366>
				{
					DAC_amplitude_output_lcd = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
				}
				amplitude_output_value[0] = ((DAC_amplitude_output_lcd/1000) % 10);
 80023ee:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80023f2:	4a6f      	ldr	r2, [pc, #444]	; (80025b0 <main+0x1528>)
 80023f4:	fb82 1203 	smull	r1, r2, r2, r3
 80023f8:	1192      	asrs	r2, r2, #6
 80023fa:	17db      	asrs	r3, r3, #31
 80023fc:	1ad2      	subs	r2, r2, r3
 80023fe:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <main+0x152c>)
 8002400:	fb83 1302 	smull	r1, r3, r3, r2
 8002404:	1099      	asrs	r1, r3, #2
 8002406:	17d3      	asrs	r3, r2, #31
 8002408:	1ac9      	subs	r1, r1, r3
 800240a:	460b      	mov	r3, r1
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	1ad1      	subs	r1, r2, r3
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800241a:	701a      	strb	r2, [r3, #0]
				amplitude_output_value[1] = ((DAC_amplitude_output_lcd/100) % 10);
 800241c:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8002420:	4a65      	ldr	r2, [pc, #404]	; (80025b8 <main+0x1530>)
 8002422:	fb82 1203 	smull	r1, r2, r2, r3
 8002426:	1152      	asrs	r2, r2, #5
 8002428:	17db      	asrs	r3, r3, #31
 800242a:	1ad2      	subs	r2, r2, r3
 800242c:	4b61      	ldr	r3, [pc, #388]	; (80025b4 <main+0x152c>)
 800242e:	fb83 1302 	smull	r1, r3, r3, r2
 8002432:	1099      	asrs	r1, r3, #2
 8002434:	17d3      	asrs	r3, r2, #31
 8002436:	1ac9      	subs	r1, r1, r3
 8002438:	460b      	mov	r3, r1
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	1ad1      	subs	r1, r2, r3
 8002442:	b2ca      	uxtb	r2, r1
 8002444:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002448:	705a      	strb	r2, [r3, #1]
				amplitude_output_value[2] = ((DAC_amplitude_output_lcd/10) % 10);
 800244a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800244e:	4a59      	ldr	r2, [pc, #356]	; (80025b4 <main+0x152c>)
 8002450:	fb82 1203 	smull	r1, r2, r2, r3
 8002454:	1092      	asrs	r2, r2, #2
 8002456:	17db      	asrs	r3, r3, #31
 8002458:	1ad2      	subs	r2, r2, r3
 800245a:	4b56      	ldr	r3, [pc, #344]	; (80025b4 <main+0x152c>)
 800245c:	fb83 1302 	smull	r1, r3, r3, r2
 8002460:	1099      	asrs	r1, r3, #2
 8002462:	17d3      	asrs	r3, r2, #31
 8002464:	1ac9      	subs	r1, r1, r3
 8002466:	460b      	mov	r3, r1
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	1ad1      	subs	r1, r2, r3
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002476:	709a      	strb	r2, [r3, #2]
				amplitude_output_value[3] = ((DAC_amplitude_output_lcd) % 10);
 8002478:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800247c:	4b4d      	ldr	r3, [pc, #308]	; (80025b4 <main+0x152c>)
 800247e:	fb83 1302 	smull	r1, r3, r3, r2
 8002482:	1099      	asrs	r1, r3, #2
 8002484:	17d3      	asrs	r3, r2, #31
 8002486:	1ac9      	subs	r1, r1, r3
 8002488:	460b      	mov	r3, r1
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	440b      	add	r3, r1
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	1ad1      	subs	r1, r2, r3
 8002492:	b2ca      	uxtb	r2, r1
 8002494:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002498:	70da      	strb	r2, [r3, #3]
				press = 0;
 800249a:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <main+0x1508>)
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 80024a0:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <main+0x1520>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d06b      	beq.n	8002580 <main+0x14f8>
 80024a8:	4b39      	ldr	r3, [pc, #228]	; (8002590 <main+0x1508>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d067      	beq.n	8002580 <main+0x14f8>
			{
				DAC_amplitude_output_lcd = DAC_amplitude_output_lcd + 100;
 80024b0:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80024b4:	3364      	adds	r3, #100	; 0x64
 80024b6:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
				if(DAC_amplitude_output_lcd >= 3100)
 80024ba:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80024be:	f640 421b 	movw	r2, #3099	; 0xc1b
 80024c2:	4293      	cmp	r3, r2
 80024c4:	dd03      	ble.n	80024ce <main+0x1446>
				{
					DAC_amplitude_output_lcd = 3100;
 80024c6:	f640 431c 	movw	r3, #3100	; 0xc1c
 80024ca:	f8c7 39a4 	str.w	r3, [r7, #2468]	; 0x9a4
				}
				amplitude_output_value[0] = ((DAC_amplitude_output_lcd/1000) % 10);
 80024ce:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 80024d2:	4a37      	ldr	r2, [pc, #220]	; (80025b0 <main+0x1528>)
 80024d4:	fb82 1203 	smull	r1, r2, r2, r3
 80024d8:	1192      	asrs	r2, r2, #6
 80024da:	17db      	asrs	r3, r3, #31
 80024dc:	1ad2      	subs	r2, r2, r3
 80024de:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <main+0x152c>)
 80024e0:	fb83 1302 	smull	r1, r3, r3, r2
 80024e4:	1099      	asrs	r1, r3, #2
 80024e6:	17d3      	asrs	r3, r2, #31
 80024e8:	1ac9      	subs	r1, r1, r3
 80024ea:	460b      	mov	r3, r1
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	1ad1      	subs	r1, r2, r3
 80024f4:	b2ca      	uxtb	r2, r1
 80024f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024fa:	701a      	strb	r2, [r3, #0]
				amplitude_output_value[1] = ((DAC_amplitude_output_lcd/100) % 10);
 80024fc:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 8002500:	4a2d      	ldr	r2, [pc, #180]	; (80025b8 <main+0x1530>)
 8002502:	fb82 1203 	smull	r1, r2, r2, r3
 8002506:	1152      	asrs	r2, r2, #5
 8002508:	17db      	asrs	r3, r3, #31
 800250a:	1ad2      	subs	r2, r2, r3
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <main+0x152c>)
 800250e:	fb83 1302 	smull	r1, r3, r3, r2
 8002512:	1099      	asrs	r1, r3, #2
 8002514:	17d3      	asrs	r3, r2, #31
 8002516:	1ac9      	subs	r1, r1, r3
 8002518:	460b      	mov	r3, r1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	1ad1      	subs	r1, r2, r3
 8002522:	b2ca      	uxtb	r2, r1
 8002524:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002528:	705a      	strb	r2, [r3, #1]
				amplitude_output_value[2] = ((DAC_amplitude_output_lcd/10) % 10);
 800252a:	f8d7 39a4 	ldr.w	r3, [r7, #2468]	; 0x9a4
 800252e:	4a21      	ldr	r2, [pc, #132]	; (80025b4 <main+0x152c>)
 8002530:	fb82 1203 	smull	r1, r2, r2, r3
 8002534:	1092      	asrs	r2, r2, #2
 8002536:	17db      	asrs	r3, r3, #31
 8002538:	1ad2      	subs	r2, r2, r3
 800253a:	4b1e      	ldr	r3, [pc, #120]	; (80025b4 <main+0x152c>)
 800253c:	fb83 1302 	smull	r1, r3, r3, r2
 8002540:	1099      	asrs	r1, r3, #2
 8002542:	17d3      	asrs	r3, r2, #31
 8002544:	1ac9      	subs	r1, r1, r3
 8002546:	460b      	mov	r3, r1
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	1ad1      	subs	r1, r2, r3
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002556:	709a      	strb	r2, [r3, #2]
				amplitude_output_value[3] = ((DAC_amplitude_output_lcd) % 10);
 8002558:	f8d7 29a4 	ldr.w	r2, [r7, #2468]	; 0x9a4
 800255c:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <main+0x152c>)
 800255e:	fb83 1302 	smull	r1, r3, r3, r2
 8002562:	1099      	asrs	r1, r3, #2
 8002564:	17d3      	asrs	r3, r2, #31
 8002566:	1ac9      	subs	r1, r1, r3
 8002568:	460b      	mov	r3, r1
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	1ad1      	subs	r1, r2, r3
 8002572:	b2ca      	uxtb	r2, r1
 8002574:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002578:	70da      	strb	r2, [r3, #3]
				press = 0;
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <main+0x1508>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
			}
		}
		//parameter amp values

		//parameter off values
		if (rows == 4 && cols == 1)
 8002580:	4b01      	ldr	r3, [pc, #4]	; (8002588 <main+0x1500>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	e01a      	b.n	80025bc <main+0x1534>
 8002586:	bf00      	nop
 8002588:	200000ce 	.word	0x200000ce
 800258c:	200000cd 	.word	0x200000cd
 8002590:	20000010 	.word	0x20000010
 8002594:	200000c8 	.word	0x200000c8
 8002598:	200000c7 	.word	0x200000c7
 800259c:	200000c4 	.word	0x200000c4
 80025a0:	200000cc 	.word	0x200000cc
 80025a4:	200000c5 	.word	0x200000c5
 80025a8:	200000c6 	.word	0x200000c6
 80025ac:	200001ac 	.word	0x200001ac
 80025b0:	10624dd3 	.word	0x10624dd3
 80025b4:	66666667 	.word	0x66666667
 80025b8:	51eb851f 	.word	0x51eb851f
 80025bc:	2b04      	cmp	r3, #4
 80025be:	f040 8227 	bne.w	8002a10 <main+0x1988>
 80025c2:	4bd1      	ldr	r3, [pc, #836]	; (8002908 <main+0x1880>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	f040 8222 	bne.w	8002a10 <main+0x1988>
		{
			if (buttonState_d && press)
 80025cc:	4bcf      	ldr	r3, [pc, #828]	; (800290c <main+0x1884>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <main+0x155a>
 80025d4:	4bce      	ldr	r3, [pc, #824]	; (8002910 <main+0x1888>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <main+0x155a>
			{
				press = 0;
 80025dc:	4bcc      	ldr	r3, [pc, #816]	; (8002910 <main+0x1888>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 80025e2:	4bcc      	ldr	r3, [pc, #816]	; (8002914 <main+0x188c>)
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d011      	beq.n	800260e <main+0x1586>
 80025ea:	4bc9      	ldr	r3, [pc, #804]	; (8002910 <main+0x1888>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00d      	beq.n	800260e <main+0x1586>
			{
				Lcd_clear(&lcd);
 80025f2:	f107 0318 	add.w	r3, r7, #24
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fbd4 	bl	8000da4 <Lcd_clear>
				rows = 3;
 80025fc:	4bc6      	ldr	r3, [pc, #792]	; (8002918 <main+0x1890>)
 80025fe:	2203      	movs	r2, #3
 8002600:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002602:	4bc1      	ldr	r3, [pc, #772]	; (8002908 <main+0x1880>)
 8002604:	2203      	movs	r2, #3
 8002606:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002608:	4bc1      	ldr	r3, [pc, #772]	; (8002910 <main+0x1888>)
 800260a:	2200      	movs	r2, #0
 800260c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 800260e:	4bc3      	ldr	r3, [pc, #780]	; (800291c <main+0x1894>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d029      	beq.n	800266a <main+0x15e2>
 8002616:	4bbe      	ldr	r3, [pc, #760]	; (8002910 <main+0x1888>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d025      	beq.n	800266a <main+0x15e2>
			{
				setOffset = 1;
 800261e:	4bc0      	ldr	r3, [pc, #768]	; (8002920 <main+0x1898>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
				if (DC_set)
 8002624:	4bbf      	ldr	r3, [pc, #764]	; (8002924 <main+0x189c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <main+0x15bc>
				{
					signal_d = 1;
 800262c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
					signal_s = 0;
 8002634:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002638:	2200      	movs	r2, #0
 800263a:	701a      	strb	r2, [r3, #0]
					signal_p = 0;
 800263c:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8002640:	2200      	movs	r2, #0
 8002642:	701a      	strb	r2, [r3, #0]
				}
				if (AC_set)
 8002644:	4bb8      	ldr	r3, [pc, #736]	; (8002928 <main+0x18a0>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00b      	beq.n	8002664 <main+0x15dc>
				{
					signal_d = 0;
 800264c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
					signal_s = 1;
 8002654:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002658:	2201      	movs	r2, #1
 800265a:	701a      	strb	r2, [r3, #0]
					signal_p = 0;
 800265c:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
				}

				press = 0;
 8002664:	4baa      	ldr	r3, [pc, #680]	; (8002910 <main+0x1888>)
 8002666:	2200      	movs	r2, #0
 8002668:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 800266a:	4bb0      	ldr	r3, [pc, #704]	; (800292c <main+0x18a4>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80d4 	beq.w	800281c <main+0x1794>
 8002674:	4ba6      	ldr	r3, [pc, #664]	; (8002910 <main+0x1888>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80cf 	beq.w	800281c <main+0x1794>
			{
				if (DC_set)
 800267e:	4ba9      	ldr	r3, [pc, #676]	; (8002924 <main+0x189c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d061      	beq.n	800274a <main+0x16c2>
				{
					//DAC_DC_Offset_int = DAC_DC_offset;

					DAC_DC_Offset_lcd = DAC_DC_Offset_lcd - 100;
 8002686:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 800268a:	3b64      	subs	r3, #100	; 0x64
 800268c:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
					if(DAC_DC_Offset_lcd <= 100)
 8002690:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 8002694:	2b64      	cmp	r3, #100	; 0x64
 8002696:	dc02      	bgt.n	800269e <main+0x1616>
					{
						DAC_DC_Offset_lcd = 100;
 8002698:	2364      	movs	r3, #100	; 0x64
 800269a:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
					}
					//DAC_DC_Offset_int = DAC_DC_offset;
					DC_offset_output_value[0] = ((DAC_DC_Offset_lcd/1000) % 10);
 800269e:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 80026a2:	4aa3      	ldr	r2, [pc, #652]	; (8002930 <main+0x18a8>)
 80026a4:	fb82 1203 	smull	r1, r2, r2, r3
 80026a8:	1192      	asrs	r2, r2, #6
 80026aa:	17db      	asrs	r3, r3, #31
 80026ac:	1ad2      	subs	r2, r2, r3
 80026ae:	4ba1      	ldr	r3, [pc, #644]	; (8002934 <main+0x18ac>)
 80026b0:	fb83 1302 	smull	r1, r3, r3, r2
 80026b4:	1099      	asrs	r1, r3, #2
 80026b6:	17d3      	asrs	r3, r2, #31
 80026b8:	1ac9      	subs	r1, r1, r3
 80026ba:	460b      	mov	r3, r1
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	1ad1      	subs	r1, r2, r3
 80026c4:	b2ca      	uxtb	r2, r1
 80026c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026ca:	701a      	strb	r2, [r3, #0]
					DC_offset_output_value[1] = ((DAC_DC_Offset_lcd/100) % 10);
 80026cc:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 80026d0:	4a99      	ldr	r2, [pc, #612]	; (8002938 <main+0x18b0>)
 80026d2:	fb82 1203 	smull	r1, r2, r2, r3
 80026d6:	1152      	asrs	r2, r2, #5
 80026d8:	17db      	asrs	r3, r3, #31
 80026da:	1ad2      	subs	r2, r2, r3
 80026dc:	4b95      	ldr	r3, [pc, #596]	; (8002934 <main+0x18ac>)
 80026de:	fb83 1302 	smull	r1, r3, r3, r2
 80026e2:	1099      	asrs	r1, r3, #2
 80026e4:	17d3      	asrs	r3, r2, #31
 80026e6:	1ac9      	subs	r1, r1, r3
 80026e8:	460b      	mov	r3, r1
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	1ad1      	subs	r1, r2, r3
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f8:	705a      	strb	r2, [r3, #1]
					DC_offset_output_value[2] = ((DAC_DC_Offset_lcd/10) % 10);
 80026fa:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 80026fe:	4a8d      	ldr	r2, [pc, #564]	; (8002934 <main+0x18ac>)
 8002700:	fb82 1203 	smull	r1, r2, r2, r3
 8002704:	1092      	asrs	r2, r2, #2
 8002706:	17db      	asrs	r3, r3, #31
 8002708:	1ad2      	subs	r2, r2, r3
 800270a:	4b8a      	ldr	r3, [pc, #552]	; (8002934 <main+0x18ac>)
 800270c:	fb83 1302 	smull	r1, r3, r3, r2
 8002710:	1099      	asrs	r1, r3, #2
 8002712:	17d3      	asrs	r3, r2, #31
 8002714:	1ac9      	subs	r1, r1, r3
 8002716:	460b      	mov	r3, r1
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	440b      	add	r3, r1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	1ad1      	subs	r1, r2, r3
 8002720:	b2ca      	uxtb	r2, r1
 8002722:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002726:	709a      	strb	r2, [r3, #2]
					DC_offset_output_value[3] = ((DAC_DC_Offset_lcd/1) % 10);
 8002728:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 800272c:	4b81      	ldr	r3, [pc, #516]	; (8002934 <main+0x18ac>)
 800272e:	fb83 1302 	smull	r1, r3, r3, r2
 8002732:	1099      	asrs	r1, r3, #2
 8002734:	17d3      	asrs	r3, r2, #31
 8002736:	1ac9      	subs	r1, r1, r3
 8002738:	460b      	mov	r3, r1
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	1ad1      	subs	r1, r2, r3
 8002742:	b2ca      	uxtb	r2, r1
 8002744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002748:	70da      	strb	r2, [r3, #3]
				}
				if (AC_set)
 800274a:	4b77      	ldr	r3, [pc, #476]	; (8002928 <main+0x18a0>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d061      	beq.n	8002816 <main+0x178e>
				{
					DAC_offset_output_lcd = DAC_offset_output_lcd - 100;
 8002752:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8002756:	3b64      	subs	r3, #100	; 0x64
 8002758:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
					if(DAC_offset_output_lcd <= 100)
 800275c:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8002760:	2b64      	cmp	r3, #100	; 0x64
 8002762:	dc02      	bgt.n	800276a <main+0x16e2>
					{
						DAC_offset_output_lcd = 100;
 8002764:	2364      	movs	r3, #100	; 0x64
 8002766:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
					}
					//DAC_offset_output_lcd = DAC_offset_output;
					offset_output_value[0] = ((DAC_offset_output_lcd/1000) % 10);
 800276a:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 800276e:	4a70      	ldr	r2, [pc, #448]	; (8002930 <main+0x18a8>)
 8002770:	fb82 1203 	smull	r1, r2, r2, r3
 8002774:	1192      	asrs	r2, r2, #6
 8002776:	17db      	asrs	r3, r3, #31
 8002778:	1ad2      	subs	r2, r2, r3
 800277a:	4b6e      	ldr	r3, [pc, #440]	; (8002934 <main+0x18ac>)
 800277c:	fb83 1302 	smull	r1, r3, r3, r2
 8002780:	1099      	asrs	r1, r3, #2
 8002782:	17d3      	asrs	r3, r2, #31
 8002784:	1ac9      	subs	r1, r1, r3
 8002786:	460b      	mov	r3, r1
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	1ad1      	subs	r1, r2, r3
 8002790:	b2ca      	uxtb	r2, r1
 8002792:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002796:	701a      	strb	r2, [r3, #0]
					offset_output_value[1] = ((DAC_offset_output_lcd/100) % 10);
 8002798:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 800279c:	4a66      	ldr	r2, [pc, #408]	; (8002938 <main+0x18b0>)
 800279e:	fb82 1203 	smull	r1, r2, r2, r3
 80027a2:	1152      	asrs	r2, r2, #5
 80027a4:	17db      	asrs	r3, r3, #31
 80027a6:	1ad2      	subs	r2, r2, r3
 80027a8:	4b62      	ldr	r3, [pc, #392]	; (8002934 <main+0x18ac>)
 80027aa:	fb83 1302 	smull	r1, r3, r3, r2
 80027ae:	1099      	asrs	r1, r3, #2
 80027b0:	17d3      	asrs	r3, r2, #31
 80027b2:	1ac9      	subs	r1, r1, r3
 80027b4:	460b      	mov	r3, r1
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	1ad1      	subs	r1, r2, r3
 80027be:	b2ca      	uxtb	r2, r1
 80027c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027c4:	705a      	strb	r2, [r3, #1]
					offset_output_value[2] = ((DAC_offset_output_lcd/10) % 10);
 80027c6:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 80027ca:	4a5a      	ldr	r2, [pc, #360]	; (8002934 <main+0x18ac>)
 80027cc:	fb82 1203 	smull	r1, r2, r2, r3
 80027d0:	1092      	asrs	r2, r2, #2
 80027d2:	17db      	asrs	r3, r3, #31
 80027d4:	1ad2      	subs	r2, r2, r3
 80027d6:	4b57      	ldr	r3, [pc, #348]	; (8002934 <main+0x18ac>)
 80027d8:	fb83 1302 	smull	r1, r3, r3, r2
 80027dc:	1099      	asrs	r1, r3, #2
 80027de:	17d3      	asrs	r3, r2, #31
 80027e0:	1ac9      	subs	r1, r1, r3
 80027e2:	460b      	mov	r3, r1
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	1ad1      	subs	r1, r2, r3
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027f2:	709a      	strb	r2, [r3, #2]
					offset_output_value[3] = ((DAC_offset_output_lcd/1) % 10);
 80027f4:	f8d7 299c 	ldr.w	r2, [r7, #2460]	; 0x99c
 80027f8:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <main+0x18ac>)
 80027fa:	fb83 1302 	smull	r1, r3, r3, r2
 80027fe:	1099      	asrs	r1, r3, #2
 8002800:	17d3      	asrs	r3, r2, #31
 8002802:	1ac9      	subs	r1, r1, r3
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	1ad1      	subs	r1, r2, r3
 800280e:	b2ca      	uxtb	r2, r1
 8002810:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002814:	70da      	strb	r2, [r3, #3]
				}
				press = 0;
 8002816:	4b3e      	ldr	r3, [pc, #248]	; (8002910 <main+0x1888>)
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 800281c:	4b47      	ldr	r3, [pc, #284]	; (800293c <main+0x18b4>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80f5 	beq.w	8002a10 <main+0x1988>
 8002826:	4b3a      	ldr	r3, [pc, #232]	; (8002910 <main+0x1888>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f000 80f0 	beq.w	8002a10 <main+0x1988>
			{
				if (DC_set)
 8002830:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <main+0x189c>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d063      	beq.n	8002900 <main+0x1878>
				{
					//DAC_DC_Offset_int = DAC_DC_offset;
					DAC_DC_Offset_lcd = DAC_DC_Offset_lcd + 100;
 8002838:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 800283c:	3364      	adds	r3, #100	; 0x64
 800283e:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
					if(DAC_DC_Offset_lcd >= 3200)
 8002842:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 8002846:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800284a:	db03      	blt.n	8002854 <main+0x17cc>
					{
						DAC_DC_Offset_lcd = 3200;
 800284c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002850:	f8c7 3990 	str.w	r3, [r7, #2448]	; 0x990
					}
					DC_offset_output_value[0] = ((DAC_DC_Offset_lcd/1000) % 10);
 8002854:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 8002858:	4a35      	ldr	r2, [pc, #212]	; (8002930 <main+0x18a8>)
 800285a:	fb82 1203 	smull	r1, r2, r2, r3
 800285e:	1192      	asrs	r2, r2, #6
 8002860:	17db      	asrs	r3, r3, #31
 8002862:	1ad2      	subs	r2, r2, r3
 8002864:	4b33      	ldr	r3, [pc, #204]	; (8002934 <main+0x18ac>)
 8002866:	fb83 1302 	smull	r1, r3, r3, r2
 800286a:	1099      	asrs	r1, r3, #2
 800286c:	17d3      	asrs	r3, r2, #31
 800286e:	1ac9      	subs	r1, r1, r3
 8002870:	460b      	mov	r3, r1
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	1ad1      	subs	r1, r2, r3
 800287a:	b2ca      	uxtb	r2, r1
 800287c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002880:	701a      	strb	r2, [r3, #0]
					DC_offset_output_value[1] = ((DAC_DC_Offset_lcd/100) % 10);
 8002882:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 8002886:	4a2c      	ldr	r2, [pc, #176]	; (8002938 <main+0x18b0>)
 8002888:	fb82 1203 	smull	r1, r2, r2, r3
 800288c:	1152      	asrs	r2, r2, #5
 800288e:	17db      	asrs	r3, r3, #31
 8002890:	1ad2      	subs	r2, r2, r3
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <main+0x18ac>)
 8002894:	fb83 1302 	smull	r1, r3, r3, r2
 8002898:	1099      	asrs	r1, r3, #2
 800289a:	17d3      	asrs	r3, r2, #31
 800289c:	1ac9      	subs	r1, r1, r3
 800289e:	460b      	mov	r3, r1
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	1ad1      	subs	r1, r2, r3
 80028a8:	b2ca      	uxtb	r2, r1
 80028aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028ae:	705a      	strb	r2, [r3, #1]
					DC_offset_output_value[2] = ((DAC_DC_Offset_lcd/10) % 10);
 80028b0:	f8d7 3990 	ldr.w	r3, [r7, #2448]	; 0x990
 80028b4:	4a1f      	ldr	r2, [pc, #124]	; (8002934 <main+0x18ac>)
 80028b6:	fb82 1203 	smull	r1, r2, r2, r3
 80028ba:	1092      	asrs	r2, r2, #2
 80028bc:	17db      	asrs	r3, r3, #31
 80028be:	1ad2      	subs	r2, r2, r3
 80028c0:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <main+0x18ac>)
 80028c2:	fb83 1302 	smull	r1, r3, r3, r2
 80028c6:	1099      	asrs	r1, r3, #2
 80028c8:	17d3      	asrs	r3, r2, #31
 80028ca:	1ac9      	subs	r1, r1, r3
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	1ad1      	subs	r1, r2, r3
 80028d6:	b2ca      	uxtb	r2, r1
 80028d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028dc:	709a      	strb	r2, [r3, #2]
					DC_offset_output_value[3] = ((DAC_DC_Offset_lcd/1) % 10);
 80028de:	f8d7 2990 	ldr.w	r2, [r7, #2448]	; 0x990
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <main+0x18ac>)
 80028e4:	fb83 1302 	smull	r1, r3, r3, r2
 80028e8:	1099      	asrs	r1, r3, #2
 80028ea:	17d3      	asrs	r3, r2, #31
 80028ec:	1ac9      	subs	r1, r1, r3
 80028ee:	460b      	mov	r3, r1
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	1ad1      	subs	r1, r2, r3
 80028f8:	b2ca      	uxtb	r2, r1
 80028fa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80028fe:	70da      	strb	r2, [r3, #3]
				}
				if (AC_set)
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <main+0x18a0>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	e01b      	b.n	8002940 <main+0x18b8>
 8002908:	200000cd 	.word	0x200000cd
 800290c:	200000c8 	.word	0x200000c8
 8002910:	20000010 	.word	0x20000010
 8002914:	200000c7 	.word	0x200000c7
 8002918:	200000ce 	.word	0x200000ce
 800291c:	200000c4 	.word	0x200000c4
 8002920:	200002d8 	.word	0x200002d8
 8002924:	200000cf 	.word	0x200000cf
 8002928:	200000d0 	.word	0x200000d0
 800292c:	200000c5 	.word	0x200000c5
 8002930:	10624dd3 	.word	0x10624dd3
 8002934:	66666667 	.word	0x66666667
 8002938:	51eb851f 	.word	0x51eb851f
 800293c:	200000c6 	.word	0x200000c6
 8002940:	d063      	beq.n	8002a0a <main+0x1982>
				{
					DAC_offset_output_lcd = DAC_offset_output_lcd + 100;
 8002942:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8002946:	3364      	adds	r3, #100	; 0x64
 8002948:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
					if(DAC_offset_output_lcd >= 3200)
 800294c:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8002950:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002954:	db03      	blt.n	800295e <main+0x18d6>
					{
						DAC_offset_output_lcd = 3200;
 8002956:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800295a:	f8c7 399c 	str.w	r3, [r7, #2460]	; 0x99c
					}
					//DAC_offset_output_lcd = DAC_offset_output;
					offset_output_value[0] = ((DAC_offset_output_lcd/1000) % 10);
 800295e:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8002962:	4ac3      	ldr	r2, [pc, #780]	; (8002c70 <main+0x1be8>)
 8002964:	fb82 1203 	smull	r1, r2, r2, r3
 8002968:	1192      	asrs	r2, r2, #6
 800296a:	17db      	asrs	r3, r3, #31
 800296c:	1ad2      	subs	r2, r2, r3
 800296e:	4bc1      	ldr	r3, [pc, #772]	; (8002c74 <main+0x1bec>)
 8002970:	fb83 1302 	smull	r1, r3, r3, r2
 8002974:	1099      	asrs	r1, r3, #2
 8002976:	17d3      	asrs	r3, r2, #31
 8002978:	1ac9      	subs	r1, r1, r3
 800297a:	460b      	mov	r3, r1
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	1ad1      	subs	r1, r2, r3
 8002984:	b2ca      	uxtb	r2, r1
 8002986:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800298a:	701a      	strb	r2, [r3, #0]
					offset_output_value[1] = ((DAC_offset_output_lcd/100) % 10);
 800298c:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 8002990:	4ab9      	ldr	r2, [pc, #740]	; (8002c78 <main+0x1bf0>)
 8002992:	fb82 1203 	smull	r1, r2, r2, r3
 8002996:	1152      	asrs	r2, r2, #5
 8002998:	17db      	asrs	r3, r3, #31
 800299a:	1ad2      	subs	r2, r2, r3
 800299c:	4bb5      	ldr	r3, [pc, #724]	; (8002c74 <main+0x1bec>)
 800299e:	fb83 1302 	smull	r1, r3, r3, r2
 80029a2:	1099      	asrs	r1, r3, #2
 80029a4:	17d3      	asrs	r3, r2, #31
 80029a6:	1ac9      	subs	r1, r1, r3
 80029a8:	460b      	mov	r3, r1
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	1ad1      	subs	r1, r2, r3
 80029b2:	b2ca      	uxtb	r2, r1
 80029b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029b8:	705a      	strb	r2, [r3, #1]
					offset_output_value[2] = ((DAC_offset_output_lcd/10) % 10);
 80029ba:	f8d7 399c 	ldr.w	r3, [r7, #2460]	; 0x99c
 80029be:	4aad      	ldr	r2, [pc, #692]	; (8002c74 <main+0x1bec>)
 80029c0:	fb82 1203 	smull	r1, r2, r2, r3
 80029c4:	1092      	asrs	r2, r2, #2
 80029c6:	17db      	asrs	r3, r3, #31
 80029c8:	1ad2      	subs	r2, r2, r3
 80029ca:	4baa      	ldr	r3, [pc, #680]	; (8002c74 <main+0x1bec>)
 80029cc:	fb83 1302 	smull	r1, r3, r3, r2
 80029d0:	1099      	asrs	r1, r3, #2
 80029d2:	17d3      	asrs	r3, r2, #31
 80029d4:	1ac9      	subs	r1, r1, r3
 80029d6:	460b      	mov	r3, r1
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	1ad1      	subs	r1, r2, r3
 80029e0:	b2ca      	uxtb	r2, r1
 80029e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029e6:	709a      	strb	r2, [r3, #2]
					offset_output_value[3] = ((DAC_offset_output_lcd/1) % 10);
 80029e8:	f8d7 299c 	ldr.w	r2, [r7, #2460]	; 0x99c
 80029ec:	4ba1      	ldr	r3, [pc, #644]	; (8002c74 <main+0x1bec>)
 80029ee:	fb83 1302 	smull	r1, r3, r3, r2
 80029f2:	1099      	asrs	r1, r3, #2
 80029f4:	17d3      	asrs	r3, r2, #31
 80029f6:	1ac9      	subs	r1, r1, r3
 80029f8:	460b      	mov	r3, r1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	1ad1      	subs	r1, r2, r3
 8002a02:	b2ca      	uxtb	r2, r1
 8002a04:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a08:	70da      	strb	r2, [r3, #3]
				}
				press = 0;
 8002a0a:	4b9c      	ldr	r3, [pc, #624]	; (8002c7c <main+0x1bf4>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
			}
		}
		//parameter off values

		//parameter freq values
		if (rows == 4 && cols == 2)
 8002a10:	4b9b      	ldr	r3, [pc, #620]	; (8002c80 <main+0x1bf8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	f040 810f 	bne.w	8002c38 <main+0x1bb0>
 8002a1a:	4b9a      	ldr	r3, [pc, #616]	; (8002c84 <main+0x1bfc>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	f040 810a 	bne.w	8002c38 <main+0x1bb0>
		{
			if (buttonState_d && press)
 8002a24:	4b98      	ldr	r3, [pc, #608]	; (8002c88 <main+0x1c00>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <main+0x19b2>
 8002a2c:	4b93      	ldr	r3, [pc, #588]	; (8002c7c <main+0x1bf4>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <main+0x19b2>
			{
				press = 0;
 8002a34:	4b91      	ldr	r3, [pc, #580]	; (8002c7c <main+0x1bf4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8002a3a:	4b94      	ldr	r3, [pc, #592]	; (8002c8c <main+0x1c04>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d011      	beq.n	8002a66 <main+0x19de>
 8002a42:	4b8e      	ldr	r3, [pc, #568]	; (8002c7c <main+0x1bf4>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00d      	beq.n	8002a66 <main+0x19de>
			{
				Lcd_clear(&lcd);
 8002a4a:	f107 0318 	add.w	r3, r7, #24
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fe f9a8 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002a54:	4b8a      	ldr	r3, [pc, #552]	; (8002c80 <main+0x1bf8>)
 8002a56:	2203      	movs	r2, #3
 8002a58:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002a5a:	4b8a      	ldr	r3, [pc, #552]	; (8002c84 <main+0x1bfc>)
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002a60:	4b86      	ldr	r3, [pc, #536]	; (8002c7c <main+0x1bf4>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8002a66:	4b8a      	ldr	r3, [pc, #552]	; (8002c90 <main+0x1c08>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d015      	beq.n	8002a9a <main+0x1a12>
 8002a6e:	4b83      	ldr	r3, [pc, #524]	; (8002c7c <main+0x1bf4>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d011      	beq.n	8002a9a <main+0x1a12>
			{
				setFrequency = 1;
 8002a76:	4b87      	ldr	r3, [pc, #540]	; (8002c94 <main+0x1c0c>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	701a      	strb	r2, [r3, #0]
				signal_d = 0;
 8002a7c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
				signal_s = 1;
 8002a84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
				signal_p = 0;
 8002a8c:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002a94:	4b79      	ldr	r3, [pc, #484]	; (8002c7c <main+0x1bf4>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <main+0x1c10>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d061      	beq.n	8002b66 <main+0x1ade>
 8002aa2:	4b76      	ldr	r3, [pc, #472]	; (8002c7c <main+0x1bf4>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d05d      	beq.n	8002b66 <main+0x1ade>
			{
				DAC_frequency_output_lcd = DAC_frequency_output_lcd -100;
 8002aaa:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002aae:	3b64      	subs	r3, #100	; 0x64
 8002ab0:	f8a7 3998 	strh.w	r3, [r7, #2456]	; 0x998
				if (DAC_frequency_output_lcd <= 0)
 8002ab4:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <main+0x1a3a>
				{
					DAC_frequency_output_lcd = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f8a7 3998 	strh.w	r3, [r7, #2456]	; 0x998
				}
				frequency_output_value[0] = ((DAC_frequency_output_lcd/1000) % 10);
 8002ac2:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002ac6:	4a6a      	ldr	r2, [pc, #424]	; (8002c70 <main+0x1be8>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	099b      	lsrs	r3, r3, #6
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	4b72      	ldr	r3, [pc, #456]	; (8002c9c <main+0x1c14>)
 8002ad2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad6:	08d9      	lsrs	r1, r3, #3
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002aea:	701a      	strb	r2, [r3, #0]
				frequency_output_value[1] = ((DAC_frequency_output_lcd/100) % 10);
 8002aec:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002af0:	4a61      	ldr	r2, [pc, #388]	; (8002c78 <main+0x1bf0>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	095b      	lsrs	r3, r3, #5
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	4b68      	ldr	r3, [pc, #416]	; (8002c9c <main+0x1c14>)
 8002afc:	fba3 1302 	umull	r1, r3, r3, r2
 8002b00:	08d9      	lsrs	r1, r3, #3
 8002b02:	460b      	mov	r3, r1
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b14:	705a      	strb	r2, [r3, #1]
				frequency_output_value[2] = ((DAC_frequency_output_lcd/10) % 10);
 8002b16:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002b1a:	4a60      	ldr	r2, [pc, #384]	; (8002c9c <main+0x1c14>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	08db      	lsrs	r3, r3, #3
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <main+0x1c14>)
 8002b26:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2a:	08d9      	lsrs	r1, r3, #3
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b3e:	709a      	strb	r2, [r3, #2]
				frequency_output_value[3] = ((DAC_frequency_output_lcd/1) % 10);
 8002b40:	f8b7 2998 	ldrh.w	r2, [r7, #2456]	; 0x998
 8002b44:	4b55      	ldr	r3, [pc, #340]	; (8002c9c <main+0x1c14>)
 8002b46:	fba3 1302 	umull	r1, r3, r3, r2
 8002b4a:	08d9      	lsrs	r1, r3, #3
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b5e:	70da      	strb	r2, [r3, #3]

				press = 0;
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <main+0x1bf4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8002b66:	4b4e      	ldr	r3, [pc, #312]	; (8002ca0 <main+0x1c18>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d064      	beq.n	8002c38 <main+0x1bb0>
 8002b6e:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <main+0x1bf4>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d060      	beq.n	8002c38 <main+0x1bb0>
			{
				DAC_frequency_output_lcd = DAC_frequency_output_lcd +100;
 8002b76:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002b7a:	3364      	adds	r3, #100	; 0x64
 8002b7c:	f8a7 3998 	strh.w	r3, [r7, #2456]	; 0x998
				if (DAC_frequency_output_lcd >= 5000)
 8002b80:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002b84:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d903      	bls.n	8002b94 <main+0x1b0c>
				{
					DAC_frequency_output_lcd = 5000;
 8002b8c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b90:	f8a7 3998 	strh.w	r3, [r7, #2456]	; 0x998
				}
				frequency_output_value[0] = ((DAC_frequency_output_lcd/1000) % 10);
 8002b94:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002b98:	4a35      	ldr	r2, [pc, #212]	; (8002c70 <main+0x1be8>)
 8002b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9e:	099b      	lsrs	r3, r3, #6
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	4b3e      	ldr	r3, [pc, #248]	; (8002c9c <main+0x1c14>)
 8002ba4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba8:	08d9      	lsrs	r1, r3, #3
 8002baa:	460b      	mov	r3, r1
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bbc:	701a      	strb	r2, [r3, #0]
				frequency_output_value[1] = ((DAC_frequency_output_lcd/100) % 10);
 8002bbe:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002bc2:	4a2d      	ldr	r2, [pc, #180]	; (8002c78 <main+0x1bf0>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	095b      	lsrs	r3, r3, #5
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b33      	ldr	r3, [pc, #204]	; (8002c9c <main+0x1c14>)
 8002bce:	fba3 1302 	umull	r1, r3, r3, r2
 8002bd2:	08d9      	lsrs	r1, r3, #3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002be6:	705a      	strb	r2, [r3, #1]
				frequency_output_value[2] = ((DAC_frequency_output_lcd/10) % 10);
 8002be8:	f8b7 3998 	ldrh.w	r3, [r7, #2456]	; 0x998
 8002bec:	4a2b      	ldr	r2, [pc, #172]	; (8002c9c <main+0x1c14>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	08db      	lsrs	r3, r3, #3
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <main+0x1c14>)
 8002bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bfc:	08d9      	lsrs	r1, r3, #3
 8002bfe:	460b      	mov	r3, r1
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c10:	709a      	strb	r2, [r3, #2]
				frequency_output_value[3] = ((DAC_frequency_output_lcd/1) % 10);
 8002c12:	f8b7 2998 	ldrh.w	r2, [r7, #2456]	; 0x998
 8002c16:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <main+0x1c14>)
 8002c18:	fba3 1302 	umull	r1, r3, r3, r2
 8002c1c:	08d9      	lsrs	r1, r3, #3
 8002c1e:	460b      	mov	r3, r1
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c30:	70da      	strb	r2, [r3, #3]

				press = 0;
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <main+0x1bf4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
			}
		}
		//parameter freq values

		//parameter duty Cycle values
		if (rows == 4 && cols == 3)
 8002c38:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <main+0x1bf8>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d16b      	bne.n	8002d18 <main+0x1c90>
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <main+0x1bfc>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	d167      	bne.n	8002d18 <main+0x1c90>
		{
			if (buttonState_d && press)
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <main+0x1c00>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <main+0x1bd6>
 8002c50:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <main+0x1bf4>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <main+0x1bd6>
			{
				press = 0;
 8002c58:	4b08      	ldr	r3, [pc, #32]	; (8002c7c <main+0x1bf4>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_u && press)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <main+0x1c04>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02c      	beq.n	8002cc0 <main+0x1c38>
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <main+0x1bf4>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d028      	beq.n	8002cc0 <main+0x1c38>
 8002c6e:	e019      	b.n	8002ca4 <main+0x1c1c>
 8002c70:	10624dd3 	.word	0x10624dd3
 8002c74:	66666667 	.word	0x66666667
 8002c78:	51eb851f 	.word	0x51eb851f
 8002c7c:	20000010 	.word	0x20000010
 8002c80:	200000ce 	.word	0x200000ce
 8002c84:	200000cd 	.word	0x200000cd
 8002c88:	200000c8 	.word	0x200000c8
 8002c8c:	200000c7 	.word	0x200000c7
 8002c90:	200000c4 	.word	0x200000c4
 8002c94:	20001681 	.word	0x20001681
 8002c98:	200000c5 	.word	0x200000c5
 8002c9c:	cccccccd 	.word	0xcccccccd
 8002ca0:	200000c6 	.word	0x200000c6
			{
				Lcd_clear(&lcd);
 8002ca4:	f107 0318 	add.w	r3, r7, #24
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe f87b 	bl	8000da4 <Lcd_clear>
				rows = 3;
 8002cae:	4bcf      	ldr	r3, [pc, #828]	; (8002fec <main+0x1f64>)
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	701a      	strb	r2, [r3, #0]
				cols = 3;
 8002cb4:	4bce      	ldr	r3, [pc, #824]	; (8002ff0 <main+0x1f68>)
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002cba:	4bce      	ldr	r3, [pc, #824]	; (8002ff4 <main+0x1f6c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_m && press)
 8002cc0:	4bcd      	ldr	r3, [pc, #820]	; (8002ff8 <main+0x1f70>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <main+0x1c4e>
 8002cc8:	4bca      	ldr	r3, [pc, #808]	; (8002ff4 <main+0x1f6c>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <main+0x1c4e>
			{
				//output = 0;
				press = 0;
 8002cd0:	4bc8      	ldr	r3, [pc, #800]	; (8002ff4 <main+0x1f6c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_l && press)
 8002cd6:	4bc9      	ldr	r3, [pc, #804]	; (8002ffc <main+0x1f74>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d011      	beq.n	8002d02 <main+0x1c7a>
 8002cde:	4bc5      	ldr	r3, [pc, #788]	; (8002ff4 <main+0x1f6c>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00d      	beq.n	8002d02 <main+0x1c7a>
			{
				Lcd_clear(&lcd);
 8002ce6:	f107 0318 	add.w	r3, r7, #24
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f85a 	bl	8000da4 <Lcd_clear>
				rows = 4;
 8002cf0:	4bbe      	ldr	r3, [pc, #760]	; (8002fec <main+0x1f64>)
 8002cf2:	2204      	movs	r2, #4
 8002cf4:	701a      	strb	r2, [r3, #0]
				cols = 2;
 8002cf6:	4bbe      	ldr	r3, [pc, #760]	; (8002ff0 <main+0x1f68>)
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	701a      	strb	r2, [r3, #0]
				press = 0;
 8002cfc:	4bbd      	ldr	r3, [pc, #756]	; (8002ff4 <main+0x1f6c>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]
			}
			if (buttonState_r && press)
 8002d02:	4bbf      	ldr	r3, [pc, #764]	; (8003000 <main+0x1f78>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <main+0x1c90>
 8002d0a:	4bba      	ldr	r3, [pc, #744]	; (8002ff4 <main+0x1f6c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <main+0x1c90>
			{
				press = 0;
 8002d12:	4bb8      	ldr	r3, [pc, #736]	; (8002ff4 <main+0x1f6c>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]

		}
		//parameter duty Cycle values


		if (cols == 0 && rows == 0)
 8002d18:	4bb5      	ldr	r3, [pc, #724]	; (8002ff0 <main+0x1f68>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d110      	bne.n	8002d42 <main+0x1cba>
 8002d20:	4bb2      	ldr	r3, [pc, #712]	; (8002fec <main+0x1f64>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10c      	bne.n	8002d42 <main+0x1cba>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002d28:	f107 0318 	add.w	r3, r7, #24
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe f81d 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Start Message");
 8002d36:	f107 0318 	add.w	r3, r7, #24
 8002d3a:	49b2      	ldr	r1, [pc, #712]	; (8003004 <main+0x1f7c>)
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fd fff9 	bl	8000d34 <Lcd_string>
		}
		if(cols == 0 && rows == 1)
 8002d42:	4bab      	ldr	r3, [pc, #684]	; (8002ff0 <main+0x1f68>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d11d      	bne.n	8002d86 <main+0x1cfe>
 8002d4a:	4ba8      	ldr	r3, [pc, #672]	; (8002fec <main+0x1f64>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d119      	bne.n	8002d86 <main+0x1cfe>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002d52:	f107 0318 	add.w	r3, r7, #24
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe f808 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Measure");
 8002d60:	f107 0318 	add.w	r3, r7, #24
 8002d64:	49a8      	ldr	r1, [pc, #672]	; (8003008 <main+0x1f80>)
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fd ffe4 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002d6c:	f107 0318 	add.w	r3, r7, #24
 8002d70:	2200      	movs	r2, #0
 8002d72:	2101      	movs	r1, #1
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fd fffb 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Mode");
 8002d7a:	f107 0318 	add.w	r3, r7, #24
 8002d7e:	49a3      	ldr	r1, [pc, #652]	; (800300c <main+0x1f84>)
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd ffd7 	bl	8000d34 <Lcd_string>
		}
		if(cols == 1 && rows == 1)
 8002d86:	4b9a      	ldr	r3, [pc, #616]	; (8002ff0 <main+0x1f68>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d11d      	bne.n	8002dca <main+0x1d42>
 8002d8e:	4b97      	ldr	r3, [pc, #604]	; (8002fec <main+0x1f64>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d119      	bne.n	8002dca <main+0x1d42>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002d96:	f107 0318 	add.w	r3, r7, #24
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd ffe6 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Sig gen");
 8002da4:	f107 0318 	add.w	r3, r7, #24
 8002da8:	4999      	ldr	r1, [pc, #612]	; (8003010 <main+0x1f88>)
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd ffc2 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002db0:	f107 0318 	add.w	r3, r7, #24
 8002db4:	2200      	movs	r2, #0
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fd ffd9 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Mode");
 8002dbe:	f107 0318 	add.w	r3, r7, #24
 8002dc2:	4992      	ldr	r1, [pc, #584]	; (800300c <main+0x1f84>)
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd ffb5 	bl	8000d34 <Lcd_string>
		}
		if(cols == 0 && rows == 2)
 8002dca:	4b89      	ldr	r3, [pc, #548]	; (8002ff0 <main+0x1f68>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d14f      	bne.n	8002e72 <main+0x1dea>
 8002dd2:	4b86      	ldr	r3, [pc, #536]	; (8002fec <main+0x1f64>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d14b      	bne.n	8002e72 <main+0x1dea>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002dda:	f107 0318 	add.w	r3, r7, #24
 8002dde:	2200      	movs	r2, #0
 8002de0:	2100      	movs	r1, #0
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd ffc4 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "DC Voltage");
 8002de8:	f107 0318 	add.w	r3, r7, #24
 8002dec:	4989      	ldr	r1, [pc, #548]	; (8003014 <main+0x1f8c>)
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd ffa0 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002df4:	f107 0318 	add.w	r3, r7, #24
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7fd ffb7 	bl	8000d70 <Lcd_cursor>
			Lcd_int(&lcd, (DC_disp_offset[6] - 48));
 8002e02:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002e06:	799b      	ldrb	r3, [r3, #6]
 8002e08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002e0c:	f107 0318 	add.w	r3, r7, #24
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fd ff76 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "." );
 8002e18:	f107 0318 	add.w	r3, r7, #24
 8002e1c:	497e      	ldr	r1, [pc, #504]	; (8003018 <main+0x1f90>)
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd ff88 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (DC_disp_offset[7]-48));
 8002e24:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002e28:	79db      	ldrb	r3, [r3, #7]
 8002e2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002e2e:	f107 0318 	add.w	r3, r7, #24
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd ff65 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (DC_disp_offset[8]-48));
 8002e3a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002e3e:	7a1b      	ldrb	r3, [r3, #8]
 8002e40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002e44:	f107 0318 	add.w	r3, r7, #24
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd ff5a 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (DC_disp_offset[9] - 48));
 8002e50:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002e54:	7a5b      	ldrb	r3, [r3, #9]
 8002e56:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002e5a:	f107 0318 	add.w	r3, r7, #24
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd ff4f 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "V");
 8002e66:	f107 0318 	add.w	r3, r7, #24
 8002e6a:	496c      	ldr	r1, [pc, #432]	; (800301c <main+0x1f94>)
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd ff61 	bl	8000d34 <Lcd_string>
		}
		if(cols == 1 && rows == 2)
 8002e72:	4b5f      	ldr	r3, [pc, #380]	; (8002ff0 <main+0x1f68>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d11d      	bne.n	8002eb6 <main+0x1e2e>
 8002e7a:	4b5c      	ldr	r3, [pc, #368]	; (8002fec <main+0x1f64>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d119      	bne.n	8002eb6 <main+0x1e2e>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8002e82:	f107 0318 	add.w	r3, r7, #24
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd ff70 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "DC Current");
 8002e90:	f107 0318 	add.w	r3, r7, #24
 8002e94:	4962      	ldr	r1, [pc, #392]	; (8003020 <main+0x1f98>)
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd ff4c 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002e9c:	f107 0318 	add.w	r3, r7, #24
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd ff63 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "-");
 8002eaa:	f107 0318 	add.w	r3, r7, #24
 8002eae:	495d      	ldr	r1, [pc, #372]	; (8003024 <main+0x1f9c>)
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd ff3f 	bl	8000d34 <Lcd_string>
		}

		if(cols == 2 && rows == 2 && AC_measure==1 && timer_interrupt==1 && measurment_mode==1)
 8002eb6:	4b4e      	ldr	r3, [pc, #312]	; (8002ff0 <main+0x1f68>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	f040 810c 	bne.w	80030d8 <main+0x2050>
 8002ec0:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <main+0x1f64>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	f040 8107 	bne.w	80030d8 <main+0x2050>
 8002eca:	f8b7 39c4 	ldrh.w	r3, [r7, #2500]	; 0x9c4
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	f040 8102 	bne.w	80030d8 <main+0x2050>
 8002ed4:	4b54      	ldr	r3, [pc, #336]	; (8003028 <main+0x1fa0>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	f040 80fd 	bne.w	80030d8 <main+0x2050>
 8002ede:	4b53      	ldr	r3, [pc, #332]	; (800302c <main+0x1fa4>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	f040 80f8 	bne.w	80030d8 <main+0x2050>
		{
			//DC_measure = 0;
			//AC_measure = 1;

			Lcd_cursor(&lcd, 0, 0);
 8002ee8:	f107 0318 	add.w	r3, r7, #24
 8002eec:	2200      	movs	r2, #0
 8002eee:	2100      	movs	r1, #0
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd ff3d 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "AC Voltage");
 8002ef6:	f107 0318 	add.w	r3, r7, #24
 8002efa:	494d      	ldr	r1, [pc, #308]	; (8003030 <main+0x1fa8>)
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd ff19 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8002f02:	f107 0318 	add.w	r3, r7, #24
 8002f06:	2200      	movs	r2, #0
 8002f08:	2101      	movs	r1, #1
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fd ff30 	bl	8000d70 <Lcd_cursor>

			LCD_scroll_count++;
 8002f10:	f8b7 398e 	ldrh.w	r3, [r7, #2446]	; 0x98e
 8002f14:	3301      	adds	r3, #1
 8002f16:	f8a7 398e 	strh.w	r3, [r7, #2446]	; 0x98e

			///// SEND TO LCD /////////
			//offset//
			//Lcd_clear(&lcd);
			Lcd_string(&lcd, "O:");
 8002f1a:	f107 0318 	add.w	r3, r7, #24
 8002f1e:	4945      	ldr	r1, [pc, #276]	; (8003034 <main+0x1fac>)
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd ff07 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_offset[6]-48));
 8002f26:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f2a:	799b      	ldrb	r3, [r3, #6]
 8002f2c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002f30:	f107 0318 	add.w	r3, r7, #24
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fee4 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "." );
 8002f3c:	f107 0318 	add.w	r3, r7, #24
 8002f40:	4935      	ldr	r1, [pc, #212]	; (8003018 <main+0x1f90>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd fef6 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_offset[7]-48));
 8002f48:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f4c:	79db      	ldrb	r3, [r3, #7]
 8002f4e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002f52:	f107 0318 	add.w	r3, r7, #24
 8002f56:	4611      	mov	r1, r2
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fd fed3 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_offset[8]-48));
 8002f5e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f62:	7a1b      	ldrb	r3, [r3, #8]
 8002f64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002f68:	f107 0318 	add.w	r3, r7, #24
 8002f6c:	4611      	mov	r1, r2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fec8 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_offset[9]-48));
 8002f74:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002f78:	7a5b      	ldrb	r3, [r3, #9]
 8002f7a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002f7e:	f107 0318 	add.w	r3, r7, #24
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd febd 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "V");
 8002f8a:	f107 0318 	add.w	r3, r7, #24
 8002f8e:	4923      	ldr	r1, [pc, #140]	; (800301c <main+0x1f94>)
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd fecf 	bl	8000d34 <Lcd_string>
			Lcd_string(&lcd, ",");
 8002f96:	f107 0318 	add.w	r3, r7, #24
 8002f9a:	4927      	ldr	r1, [pc, #156]	; (8003038 <main+0x1fb0>)
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd fec9 	bl	8000d34 <Lcd_string>

			//Amplitude //
			Lcd_string(&lcd, "A:");
 8002fa2:	f107 0318 	add.w	r3, r7, #24
 8002fa6:	4925      	ldr	r1, [pc, #148]	; (800303c <main+0x1fb4>)
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fec3 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_pk_pk[6]-48));
 8002fae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fb2:	799b      	ldrb	r3, [r3, #6]
 8002fb4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002fb8:	f107 0318 	add.w	r3, r7, #24
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd fea0 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "." );
 8002fc4:	f107 0318 	add.w	r3, r7, #24
 8002fc8:	4913      	ldr	r1, [pc, #76]	; (8003018 <main+0x1f90>)
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd feb2 	bl	8000d34 <Lcd_string>
			Lcd_int(&lcd, (AC_disp_pk_pk[7]-48));
 8002fd0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fd4:	79db      	ldrb	r3, [r3, #7]
 8002fd6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002fda:	f107 0318 	add.w	r3, r7, #24
 8002fde:	4611      	mov	r1, r2
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fe8f 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_pk_pk[8]-48));
 8002fe6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002fea:	e029      	b.n	8003040 <main+0x1fb8>
 8002fec:	200000ce 	.word	0x200000ce
 8002ff0:	200000cd 	.word	0x200000cd
 8002ff4:	20000010 	.word	0x20000010
 8002ff8:	200000c4 	.word	0x200000c4
 8002ffc:	200000c5 	.word	0x200000c5
 8003000:	200000c6 	.word	0x200000c6
 8003004:	0800e544 	.word	0x0800e544
 8003008:	0800e554 	.word	0x0800e554
 800300c:	0800e55c 	.word	0x0800e55c
 8003010:	0800e564 	.word	0x0800e564
 8003014:	0800e56c 	.word	0x0800e56c
 8003018:	0800e578 	.word	0x0800e578
 800301c:	0800e57c 	.word	0x0800e57c
 8003020:	0800e580 	.word	0x0800e580
 8003024:	0800e58c 	.word	0x0800e58c
 8003028:	2000168c 	.word	0x2000168c
 800302c:	2000000f 	.word	0x2000000f
 8003030:	0800e590 	.word	0x0800e590
 8003034:	0800e59c 	.word	0x0800e59c
 8003038:	0800e5a0 	.word	0x0800e5a0
 800303c:	0800e5a4 	.word	0x0800e5a4
 8003040:	7a1b      	ldrb	r3, [r3, #8]
 8003042:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003046:	f107 0318 	add.w	r3, r7, #24
 800304a:	4611      	mov	r1, r2
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fe59 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (AC_disp_pk_pk[9] -48));
 8003052:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003056:	7a5b      	ldrb	r3, [r3, #9]
 8003058:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800305c:	f107 0318 	add.w	r3, r7, #24
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fe4e 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "V");
 8003068:	f107 0318 	add.w	r3, r7, #24
 800306c:	49c8      	ldr	r1, [pc, #800]	; (8003390 <main+0x2308>)
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fe60 	bl	8000d34 <Lcd_string>
			Lcd_string(&lcd, ",");
 8003074:	f107 0318 	add.w	r3, r7, #24
 8003078:	49c6      	ldr	r1, [pc, #792]	; (8003394 <main+0x230c>)
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fe5a 	bl	8000d34 <Lcd_string>

			//Frequency//
			Lcd_string(&lcd, "F:");
 8003080:	f107 0318 	add.w	r3, r7, #24
 8003084:	49c4      	ldr	r1, [pc, #784]	; (8003398 <main+0x2310>)
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fe54 	bl	8000d34 <Lcd_string>
			if (AC_freq <1000)
 800308c:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 8003090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003094:	d205      	bcs.n	80030a2 <main+0x201a>
			{
				Lcd_string(&lcd, "0");
 8003096:	f107 0318 	add.w	r3, r7, #24
 800309a:	49c0      	ldr	r1, [pc, #768]	; (800339c <main+0x2314>)
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd fe49 	bl	8000d34 <Lcd_string>
			}

			Lcd_int(&lcd, AC_freq);
 80030a2:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 80030a6:	f107 0318 	add.w	r3, r7, #24
 80030aa:	4611      	mov	r1, r2
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fe29 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "Hz");
 80030b2:	f107 0318 	add.w	r3, r7, #24
 80030b6:	49ba      	ldr	r1, [pc, #744]	; (80033a0 <main+0x2318>)
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd fe3b 	bl	8000d34 <Lcd_string>

			if(LCD_scroll_count > 8){
 80030be:	f8b7 398e 	ldrh.w	r3, [r7, #2446]	; 0x98e
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d908      	bls.n	80030d8 <main+0x2050>
				lcd_write_command(&lcd, 0x1A);
 80030c6:	f107 0318 	add.w	r3, r7, #24
 80030ca:	211a      	movs	r1, #26
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fd fe75 	bl	8000dbc <lcd_write_command>
				LCD_scroll_count = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f8a7 398e 	strh.w	r3, [r7, #2446]	; 0x98e
			}

		}

		if(cols == 3 && rows == 2)
 80030d8:	4bb2      	ldr	r3, [pc, #712]	; (80033a4 <main+0x231c>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d11d      	bne.n	800311c <main+0x2094>
 80030e0:	4bb1      	ldr	r3, [pc, #708]	; (80033a8 <main+0x2320>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d119      	bne.n	800311c <main+0x2094>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80030e8:	f107 0318 	add.w	r3, r7, #24
 80030ec:	2200      	movs	r2, #0
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fe3d 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "AC Current");
 80030f6:	f107 0318 	add.w	r3, r7, #24
 80030fa:	49ac      	ldr	r1, [pc, #688]	; (80033ac <main+0x2324>)
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fe19 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003102:	f107 0318 	add.w	r3, r7, #24
 8003106:	2200      	movs	r2, #0
 8003108:	2101      	movs	r1, #1
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd fe30 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "-");
 8003110:	f107 0318 	add.w	r3, r7, #24
 8003114:	49a6      	ldr	r1, [pc, #664]	; (80033b0 <main+0x2328>)
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd fe0c 	bl	8000d34 <Lcd_string>
		}

		if(cols == 4 && rows == 2)
 800311c:	4ba1      	ldr	r3, [pc, #644]	; (80033a4 <main+0x231c>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d117      	bne.n	8003154 <main+0x20cc>
 8003124:	4ba0      	ldr	r3, [pc, #640]	; (80033a8 <main+0x2320>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d113      	bne.n	8003154 <main+0x20cc>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 800312c:	f107 0318 	add.w	r3, r7, #24
 8003130:	2200      	movs	r2, #0
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fe1b 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 800313a:	f107 0318 	add.w	r3, r7, #24
 800313e:	499d      	ldr	r1, [pc, #628]	; (80033b4 <main+0x232c>)
 8003140:	4618      	mov	r0, r3
 8003142:	f7fd fdf7 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003146:	f107 0318 	add.w	r3, r7, #24
 800314a:	2200      	movs	r2, #0
 800314c:	2101      	movs	r1, #1
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fe0e 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 5 && rows == 2)
 8003154:	4b93      	ldr	r3, [pc, #588]	; (80033a4 <main+0x231c>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b05      	cmp	r3, #5
 800315a:	d117      	bne.n	800318c <main+0x2104>
 800315c:	4b92      	ldr	r3, [pc, #584]	; (80033a8 <main+0x2320>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b02      	cmp	r3, #2
 8003162:	d113      	bne.n	800318c <main+0x2104>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003164:	f107 0318 	add.w	r3, r7, #24
 8003168:	2200      	movs	r2, #0
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fdff 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Parameter");
 8003172:	f107 0318 	add.w	r3, r7, #24
 8003176:	4990      	ldr	r1, [pc, #576]	; (80033b8 <main+0x2330>)
 8003178:	4618      	mov	r0, r3
 800317a:	f7fd fddb 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800317e:	f107 0318 	add.w	r3, r7, #24
 8003182:	2200      	movs	r2, #0
 8003184:	2101      	movs	r1, #1
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fdf2 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 6 && rows == 2)
 800318c:	4b85      	ldr	r3, [pc, #532]	; (80033a4 <main+0x231c>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b06      	cmp	r3, #6
 8003192:	d117      	bne.n	80031c4 <main+0x213c>
 8003194:	4b84      	ldr	r3, [pc, #528]	; (80033a8 <main+0x2320>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d113      	bne.n	80031c4 <main+0x213c>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 800319c:	f107 0318 	add.w	r3, r7, #24
 80031a0:	2200      	movs	r2, #0
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fd fde3 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Output");
 80031aa:	f107 0318 	add.w	r3, r7, #24
 80031ae:	4983      	ldr	r1, [pc, #524]	; (80033bc <main+0x2334>)
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd fdbf 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80031b6:	f107 0318 	add.w	r3, r7, #24
 80031ba:	2200      	movs	r2, #0
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fdd6 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 0 && rows == 3)
 80031c4:	4b77      	ldr	r3, [pc, #476]	; (80033a4 <main+0x231c>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d11d      	bne.n	8003208 <main+0x2180>
 80031cc:	4b76      	ldr	r3, [pc, #472]	; (80033a8 <main+0x2320>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d119      	bne.n	8003208 <main+0x2180>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80031d4:	f107 0318 	add.w	r3, r7, #24
 80031d8:	2200      	movs	r2, #0
 80031da:	2100      	movs	r1, #0
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd fdc7 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 80031e2:	f107 0318 	add.w	r3, r7, #24
 80031e6:	4973      	ldr	r1, [pc, #460]	; (80033b4 <main+0x232c>)
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd fda3 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80031ee:	f107 0318 	add.w	r3, r7, #24
 80031f2:	2200      	movs	r2, #0
 80031f4:	2101      	movs	r1, #1
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd fdba 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "DC");
 80031fc:	f107 0318 	add.w	r3, r7, #24
 8003200:	496f      	ldr	r1, [pc, #444]	; (80033c0 <main+0x2338>)
 8003202:	4618      	mov	r0, r3
 8003204:	f7fd fd96 	bl	8000d34 <Lcd_string>
		}

		if(cols == 1 && rows == 3)
 8003208:	4b66      	ldr	r3, [pc, #408]	; (80033a4 <main+0x231c>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d11d      	bne.n	800324c <main+0x21c4>
 8003210:	4b65      	ldr	r3, [pc, #404]	; (80033a8 <main+0x2320>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d119      	bne.n	800324c <main+0x21c4>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003218:	f107 0318 	add.w	r3, r7, #24
 800321c:	2200      	movs	r2, #0
 800321e:	2100      	movs	r1, #0
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd fda5 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 8003226:	f107 0318 	add.w	r3, r7, #24
 800322a:	4962      	ldr	r1, [pc, #392]	; (80033b4 <main+0x232c>)
 800322c:	4618      	mov	r0, r3
 800322e:	f7fd fd81 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003232:	f107 0318 	add.w	r3, r7, #24
 8003236:	2200      	movs	r2, #0
 8003238:	2101      	movs	r1, #1
 800323a:	4618      	mov	r0, r3
 800323c:	f7fd fd98 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Sinusoidal");
 8003240:	f107 0318 	add.w	r3, r7, #24
 8003244:	495f      	ldr	r1, [pc, #380]	; (80033c4 <main+0x233c>)
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd fd74 	bl	8000d34 <Lcd_string>
		}

		if(cols == 2 && rows == 3)
 800324c:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <main+0x231c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d11d      	bne.n	8003290 <main+0x2208>
 8003254:	4b54      	ldr	r3, [pc, #336]	; (80033a8 <main+0x2320>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d119      	bne.n	8003290 <main+0x2208>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 800325c:	f107 0318 	add.w	r3, r7, #24
 8003260:	2200      	movs	r2, #0
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd fd83 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Type");
 800326a:	f107 0318 	add.w	r3, r7, #24
 800326e:	4951      	ldr	r1, [pc, #324]	; (80033b4 <main+0x232c>)
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fd5f 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003276:	f107 0318 	add.w	r3, r7, #24
 800327a:	2200      	movs	r2, #0
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd fd76 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Pulse");
 8003284:	f107 0318 	add.w	r3, r7, #24
 8003288:	494f      	ldr	r1, [pc, #316]	; (80033c8 <main+0x2340>)
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd fd52 	bl	8000d34 <Lcd_string>
		}

		if(cols == 3 && rows == 3)
 8003290:	4b44      	ldr	r3, [pc, #272]	; (80033a4 <main+0x231c>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b03      	cmp	r3, #3
 8003296:	d117      	bne.n	80032c8 <main+0x2240>
 8003298:	4b43      	ldr	r3, [pc, #268]	; (80033a8 <main+0x2320>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b03      	cmp	r3, #3
 800329e:	d113      	bne.n	80032c8 <main+0x2240>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80032a0:	f107 0318 	add.w	r3, r7, #24
 80032a4:	2200      	movs	r2, #0
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd fd61 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Amplitude");
 80032ae:	f107 0318 	add.w	r3, r7, #24
 80032b2:	4946      	ldr	r1, [pc, #280]	; (80033cc <main+0x2344>)
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd fd3d 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80032ba:	f107 0318 	add.w	r3, r7, #24
 80032be:	2200      	movs	r2, #0
 80032c0:	2101      	movs	r1, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd fd54 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 4 && rows == 3)
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <main+0x231c>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d117      	bne.n	8003300 <main+0x2278>
 80032d0:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <main+0x2320>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d113      	bne.n	8003300 <main+0x2278>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80032d8:	f107 0318 	add.w	r3, r7, #24
 80032dc:	2200      	movs	r2, #0
 80032de:	2100      	movs	r1, #0
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fd fd45 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Offset");
 80032e6:	f107 0318 	add.w	r3, r7, #24
 80032ea:	4939      	ldr	r1, [pc, #228]	; (80033d0 <main+0x2348>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd fd21 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80032f2:	f107 0318 	add.w	r3, r7, #24
 80032f6:	2200      	movs	r2, #0
 80032f8:	2101      	movs	r1, #1
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd fd38 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 5 && rows == 3)
 8003300:	4b28      	ldr	r3, [pc, #160]	; (80033a4 <main+0x231c>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b05      	cmp	r3, #5
 8003306:	d117      	bne.n	8003338 <main+0x22b0>
 8003308:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <main+0x2320>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d113      	bne.n	8003338 <main+0x22b0>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003310:	f107 0318 	add.w	r3, r7, #24
 8003314:	2200      	movs	r2, #0
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f7fd fd29 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Frequency");
 800331e:	f107 0318 	add.w	r3, r7, #24
 8003322:	492c      	ldr	r1, [pc, #176]	; (80033d4 <main+0x234c>)
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fd05 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800332a:	f107 0318 	add.w	r3, r7, #24
 800332e:	2200      	movs	r2, #0
 8003330:	2101      	movs	r1, #1
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd fd1c 	bl	8000d70 <Lcd_cursor>
			//			Lcd_string(&lcd, "-");
		}

		if(cols == 6 && rows == 3)
 8003338:	4b1a      	ldr	r3, [pc, #104]	; (80033a4 <main+0x231c>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b06      	cmp	r3, #6
 800333e:	d11d      	bne.n	800337c <main+0x22f4>
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <main+0x2320>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b03      	cmp	r3, #3
 8003346:	d119      	bne.n	800337c <main+0x22f4>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003348:	f107 0318 	add.w	r3, r7, #24
 800334c:	2200      	movs	r2, #0
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f7fd fd0d 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Parameter");
 8003356:	f107 0318 	add.w	r3, r7, #24
 800335a:	4917      	ldr	r1, [pc, #92]	; (80033b8 <main+0x2330>)
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd fce9 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003362:	f107 0318 	add.w	r3, r7, #24
 8003366:	2200      	movs	r2, #0
 8003368:	2101      	movs	r1, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd fd00 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Duty Cycle");
 8003370:	f107 0318 	add.w	r3, r7, #24
 8003374:	4918      	ldr	r1, [pc, #96]	; (80033d8 <main+0x2350>)
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fcdc 	bl	8000d34 <Lcd_string>
		}

		if(cols == 7 && rows == 3)
 800337c:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <main+0x231c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b07      	cmp	r3, #7
 8003382:	d145      	bne.n	8003410 <main+0x2388>
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <main+0x2320>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d141      	bne.n	8003410 <main+0x2388>
 800338c:	e026      	b.n	80033dc <main+0x2354>
 800338e:	bf00      	nop
 8003390:	0800e57c 	.word	0x0800e57c
 8003394:	0800e5a0 	.word	0x0800e5a0
 8003398:	0800e5a8 	.word	0x0800e5a8
 800339c:	0800e5ac 	.word	0x0800e5ac
 80033a0:	0800e5b0 	.word	0x0800e5b0
 80033a4:	200000cd 	.word	0x200000cd
 80033a8:	200000ce 	.word	0x200000ce
 80033ac:	0800e5b4 	.word	0x0800e5b4
 80033b0:	0800e58c 	.word	0x0800e58c
 80033b4:	0800e5c0 	.word	0x0800e5c0
 80033b8:	0800e5c8 	.word	0x0800e5c8
 80033bc:	0800e5d4 	.word	0x0800e5d4
 80033c0:	0800e5dc 	.word	0x0800e5dc
 80033c4:	0800e5e0 	.word	0x0800e5e0
 80033c8:	0800e5ec 	.word	0x0800e5ec
 80033cc:	0800e5f4 	.word	0x0800e5f4
 80033d0:	0800e600 	.word	0x0800e600
 80033d4:	0800e608 	.word	0x0800e608
 80033d8:	0800e614 	.word	0x0800e614
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 80033dc:	f107 0318 	add.w	r3, r7, #24
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd fcc3 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Output");
 80033ea:	f107 0318 	add.w	r3, r7, #24
 80033ee:	49da      	ldr	r1, [pc, #872]	; (8003758 <main+0x26d0>)
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fd fc9f 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 80033f6:	f107 0318 	add.w	r3, r7, #24
 80033fa:	2200      	movs	r2, #0
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fcb6 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "on");
 8003404:	f107 0318 	add.w	r3, r7, #24
 8003408:	49d4      	ldr	r1, [pc, #848]	; (800375c <main+0x26d4>)
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd fc92 	bl	8000d34 <Lcd_string>
		}

		if(cols == 8 && rows == 3)
 8003410:	4bd3      	ldr	r3, [pc, #844]	; (8003760 <main+0x26d8>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b08      	cmp	r3, #8
 8003416:	d11d      	bne.n	8003454 <main+0x23cc>
 8003418:	4bd2      	ldr	r3, [pc, #840]	; (8003764 <main+0x26dc>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b03      	cmp	r3, #3
 800341e:	d119      	bne.n	8003454 <main+0x23cc>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003420:	f107 0318 	add.w	r3, r7, #24
 8003424:	2200      	movs	r2, #0
 8003426:	2100      	movs	r1, #0
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd fca1 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Output");
 800342e:	f107 0318 	add.w	r3, r7, #24
 8003432:	49c9      	ldr	r1, [pc, #804]	; (8003758 <main+0x26d0>)
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd fc7d 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800343a:	f107 0318 	add.w	r3, r7, #24
 800343e:	2200      	movs	r2, #0
 8003440:	2101      	movs	r1, #1
 8003442:	4618      	mov	r0, r3
 8003444:	f7fd fc94 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Off");
 8003448:	f107 0318 	add.w	r3, r7, #24
 800344c:	49c6      	ldr	r1, [pc, #792]	; (8003768 <main+0x26e0>)
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fc70 	bl	8000d34 <Lcd_string>
		}

		if(cols == 1 && rows == 0)
 8003454:	4bc2      	ldr	r3, [pc, #776]	; (8003760 <main+0x26d8>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 8277 	bne.w	800394c <main+0x28c4>
 800345e:	4bc1      	ldr	r3, [pc, #772]	; (8003764 <main+0x26dc>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f040 8272 	bne.w	800394c <main+0x28c4>
		{
			Lcd_cursor(&lcd, 0, 0);
 8003468:	f107 0318 	add.w	r3, r7, #24
 800346c:	2200      	movs	r2, #0
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f7fd fc7d 	bl	8000d70 <Lcd_cursor>

			if (DC_measure)
 8003476:	f897 39c7 	ldrb.w	r3, [r7, #2503]	; 0x9c7
 800347a:	2b00      	cmp	r3, #0
 800347c:	d037      	beq.n	80034ee <main+0x2466>
			{
				Lcd_int(&lcd, (DC_disp_offset[6] - 48));
 800347e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8003482:	799b      	ldrb	r3, [r3, #6]
 8003484:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003488:	f107 0318 	add.w	r3, r7, #24
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fc38 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "." );
 8003494:	f107 0318 	add.w	r3, r7, #24
 8003498:	49b4      	ldr	r1, [pc, #720]	; (800376c <main+0x26e4>)
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fc4a 	bl	8000d34 <Lcd_string>
				Lcd_int(&lcd, (DC_disp_offset[7]-48));
 80034a0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80034a4:	79db      	ldrb	r3, [r3, #7]
 80034a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80034aa:	f107 0318 	add.w	r3, r7, #24
 80034ae:	4611      	mov	r1, r2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd fc27 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (DC_disp_offset[8]-48));
 80034b6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80034ba:	7a1b      	ldrb	r3, [r3, #8]
 80034bc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80034c0:	f107 0318 	add.w	r3, r7, #24
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fd fc1c 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (DC_disp_offset[9] - 48));
 80034cc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80034d0:	7a5b      	ldrb	r3, [r3, #9]
 80034d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80034d6:	f107 0318 	add.w	r3, r7, #24
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fc11 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "V");
 80034e2:	f107 0318 	add.w	r3, r7, #24
 80034e6:	49a2      	ldr	r1, [pc, #648]	; (8003770 <main+0x26e8>)
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd fc23 	bl	8000d34 <Lcd_string>
			}
			if (AC_measure)
 80034ee:	f8b7 39c4 	ldrh.w	r3, [r7, #2500]	; 0x9c4
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80b9 	beq.w	800366a <main+0x25e2>
			{
				LCD_scroll_count++;
 80034f8:	f8b7 398e 	ldrh.w	r3, [r7, #2446]	; 0x98e
 80034fc:	3301      	adds	r3, #1
 80034fe:	f8a7 398e 	strh.w	r3, [r7, #2446]	; 0x98e
							Lcd_string(&lcd, "O:");
 8003502:	f107 0318 	add.w	r3, r7, #24
 8003506:	499b      	ldr	r1, [pc, #620]	; (8003774 <main+0x26ec>)
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd fc13 	bl	8000d34 <Lcd_string>
							Lcd_int(&lcd, (AC_disp_offset[6]-48));
 800350e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003512:	799b      	ldrb	r3, [r3, #6]
 8003514:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003518:	f107 0318 	add.w	r3, r7, #24
 800351c:	4611      	mov	r1, r2
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd fbf0 	bl	8000d04 <Lcd_int>
							Lcd_string(&lcd, "." );
 8003524:	f107 0318 	add.w	r3, r7, #24
 8003528:	4990      	ldr	r1, [pc, #576]	; (800376c <main+0x26e4>)
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fc02 	bl	8000d34 <Lcd_string>
							Lcd_int(&lcd, (AC_disp_offset[7]-48));
 8003530:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003534:	79db      	ldrb	r3, [r3, #7]
 8003536:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800353a:	f107 0318 	add.w	r3, r7, #24
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd fbdf 	bl	8000d04 <Lcd_int>
							Lcd_int(&lcd, (AC_disp_offset[8]-48));
 8003546:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800354a:	7a1b      	ldrb	r3, [r3, #8]
 800354c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003550:	f107 0318 	add.w	r3, r7, #24
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f7fd fbd4 	bl	8000d04 <Lcd_int>
							Lcd_int(&lcd, (AC_disp_offset[9]-48));
 800355c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003560:	7a5b      	ldrb	r3, [r3, #9]
 8003562:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8003566:	f107 0318 	add.w	r3, r7, #24
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd fbc9 	bl	8000d04 <Lcd_int>
							Lcd_string(&lcd, "V");
 8003572:	f107 0318 	add.w	r3, r7, #24
 8003576:	497e      	ldr	r1, [pc, #504]	; (8003770 <main+0x26e8>)
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd fbdb 	bl	8000d34 <Lcd_string>
							Lcd_string(&lcd, ",");
 800357e:	f107 0318 	add.w	r3, r7, #24
 8003582:	497d      	ldr	r1, [pc, #500]	; (8003778 <main+0x26f0>)
 8003584:	4618      	mov	r0, r3
 8003586:	f7fd fbd5 	bl	8000d34 <Lcd_string>

							//Amplitude //
							Lcd_string(&lcd, "A:");
 800358a:	f107 0318 	add.w	r3, r7, #24
 800358e:	497b      	ldr	r1, [pc, #492]	; (800377c <main+0x26f4>)
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd fbcf 	bl	8000d34 <Lcd_string>
							Lcd_int(&lcd, (AC_disp_pk_pk[6]-48));
 8003596:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800359a:	799b      	ldrb	r3, [r3, #6]
 800359c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80035a0:	f107 0318 	add.w	r3, r7, #24
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fbac 	bl	8000d04 <Lcd_int>
							Lcd_string(&lcd, "." );
 80035ac:	f107 0318 	add.w	r3, r7, #24
 80035b0:	496e      	ldr	r1, [pc, #440]	; (800376c <main+0x26e4>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fd fbbe 	bl	8000d34 <Lcd_string>
							Lcd_int(&lcd, (AC_disp_pk_pk[7]-48));
 80035b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035bc:	79db      	ldrb	r3, [r3, #7]
 80035be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80035c2:	f107 0318 	add.w	r3, r7, #24
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd fb9b 	bl	8000d04 <Lcd_int>
							Lcd_int(&lcd, (AC_disp_pk_pk[8]-48));
 80035ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035d2:	7a1b      	ldrb	r3, [r3, #8]
 80035d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80035d8:	f107 0318 	add.w	r3, r7, #24
 80035dc:	4611      	mov	r1, r2
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd fb90 	bl	8000d04 <Lcd_int>
							Lcd_int(&lcd, (AC_disp_pk_pk[9] -48));
 80035e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80035e8:	7a5b      	ldrb	r3, [r3, #9]
 80035ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80035ee:	f107 0318 	add.w	r3, r7, #24
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fd fb85 	bl	8000d04 <Lcd_int>
							Lcd_string(&lcd, "V");
 80035fa:	f107 0318 	add.w	r3, r7, #24
 80035fe:	495c      	ldr	r1, [pc, #368]	; (8003770 <main+0x26e8>)
 8003600:	4618      	mov	r0, r3
 8003602:	f7fd fb97 	bl	8000d34 <Lcd_string>
							Lcd_string(&lcd, ",");
 8003606:	f107 0318 	add.w	r3, r7, #24
 800360a:	495b      	ldr	r1, [pc, #364]	; (8003778 <main+0x26f0>)
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd fb91 	bl	8000d34 <Lcd_string>

							//Frequency//
							Lcd_string(&lcd, "F:");
 8003612:	f107 0318 	add.w	r3, r7, #24
 8003616:	495a      	ldr	r1, [pc, #360]	; (8003780 <main+0x26f8>)
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fb8b 	bl	8000d34 <Lcd_string>
							if (AC_freq < 1000)
 800361e:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 8003622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003626:	d205      	bcs.n	8003634 <main+0x25ac>
							{
								Lcd_string(&lcd, "0");
 8003628:	f107 0318 	add.w	r3, r7, #24
 800362c:	4955      	ldr	r1, [pc, #340]	; (8003784 <main+0x26fc>)
 800362e:	4618      	mov	r0, r3
 8003630:	f7fd fb80 	bl	8000d34 <Lcd_string>
							}


							Lcd_int(&lcd, AC_freq);
 8003634:	f8d7 29b0 	ldr.w	r2, [r7, #2480]	; 0x9b0
 8003638:	f107 0318 	add.w	r3, r7, #24
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fb60 	bl	8000d04 <Lcd_int>
							Lcd_string(&lcd, "Hz");
 8003644:	f107 0318 	add.w	r3, r7, #24
 8003648:	494f      	ldr	r1, [pc, #316]	; (8003788 <main+0x2700>)
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fb72 	bl	8000d34 <Lcd_string>
							if(LCD_scroll_count > 8){
 8003650:	f8b7 398e 	ldrh.w	r3, [r7, #2446]	; 0x98e
 8003654:	2b08      	cmp	r3, #8
 8003656:	d908      	bls.n	800366a <main+0x25e2>
								lcd_write_command(&lcd, 0x1A);
 8003658:	f107 0318 	add.w	r3, r7, #24
 800365c:	211a      	movs	r1, #26
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fbac 	bl	8000dbc <lcd_write_command>
								LCD_scroll_count = 0;
 8003664:	2300      	movs	r3, #0
 8003666:	f8a7 398e 	strh.w	r3, [r7, #2446]	; 0x98e
							}

			}
			if (setcurrent == 1)
 800366a:	4b48      	ldr	r3, [pc, #288]	; (800378c <main+0x2704>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <main+0x25f6>
			{
				//Lcd_cursor(&lcd,0,0);
				Lcd_string(&lcd, "No current");
 8003672:	f107 0318 	add.w	r3, r7, #24
 8003676:	4946      	ldr	r1, [pc, #280]	; (8003790 <main+0x2708>)
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd fb5b 	bl	8000d34 <Lcd_string>
			}

			Lcd_cursor(&lcd, 1, 0);
 800367e:	f107 0318 	add.w	r3, r7, #24
 8003682:	2200      	movs	r2, #0
 8003684:	2101      	movs	r1, #1
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd fb72 	bl	8000d70 <Lcd_cursor>

			if(output == 0)
 800368c:	4b41      	ldr	r3, [pc, #260]	; (8003794 <main+0x270c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <main+0x2618>
			{
				//Lcd_cursor(&lcd, 1, 0);
				Lcd_string(&lcd, "OUTPUT OFF");
 8003694:	f107 0318 	add.w	r3, r7, #24
 8003698:	493f      	ldr	r1, [pc, #252]	; (8003798 <main+0x2710>)
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fb4a 	bl	8000d34 <Lcd_string>
			}
			if(output == 1)
 80036a0:	4b3c      	ldr	r3, [pc, #240]	; (8003794 <main+0x270c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	f040 8151 	bne.w	800394c <main+0x28c4>
			{
				//Lcd_clear(&lcd);
				if(DC_set)
 80036aa:	4b3c      	ldr	r3, [pc, #240]	; (800379c <main+0x2714>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03f      	beq.n	8003732 <main+0x26aa>
				{
					scrolling = 0;
 80036b2:	4b3b      	ldr	r3, [pc, #236]	; (80037a0 <main+0x2718>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
					//Lcd_cursor(&lcd, 1, 0);
					Lcd_string(&lcd, "O:");
 80036b8:	f107 0318 	add.w	r3, r7, #24
 80036bc:	492d      	ldr	r1, [pc, #180]	; (8003774 <main+0x26ec>)
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fb38 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, DC_offset_output_value[0]);
 80036c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f107 0318 	add.w	r3, r7, #24
 80036d0:	4611      	mov	r1, r2
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fb16 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, ".");
 80036d8:	f107 0318 	add.w	r3, r7, #24
 80036dc:	4923      	ldr	r1, [pc, #140]	; (800376c <main+0x26e4>)
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fb28 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, DC_offset_output_value[1]);
 80036e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036e8:	785b      	ldrb	r3, [r3, #1]
 80036ea:	461a      	mov	r2, r3
 80036ec:	f107 0318 	add.w	r3, r7, #24
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fd fb06 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, DC_offset_output_value[2]);
 80036f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80036fc:	789b      	ldrb	r3, [r3, #2]
 80036fe:	461a      	mov	r2, r3
 8003700:	f107 0318 	add.w	r3, r7, #24
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fafc 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, DC_offset_output_value[3]);
 800370c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003710:	78db      	ldrb	r3, [r3, #3]
 8003712:	461a      	mov	r2, r3
 8003714:	f107 0318 	add.w	r3, r7, #24
 8003718:	4611      	mov	r1, r2
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd faf2 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "V");
 8003720:	f107 0318 	add.w	r3, r7, #24
 8003724:	4912      	ldr	r1, [pc, #72]	; (8003770 <main+0x26e8>)
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fb04 	bl	8000d34 <Lcd_string>
					DC_set = 0;
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <main+0x2714>)
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
				}
				if(AC_set)
 8003732:	4b1c      	ldr	r3, [pc, #112]	; (80037a4 <main+0x271c>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80e3 	beq.w	8003902 <main+0x287a>
				{
					scrolling = 1;
 800373c:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <main+0x2718>)
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
					//Lcd_cursor(&lcd, 1, 0);
					//					LCD_scroll_count++;

					Lcd_string(&lcd, "O:");
 8003742:	f107 0318 	add.w	r3, r7, #24
 8003746:	490b      	ldr	r1, [pc, #44]	; (8003774 <main+0x26ec>)
 8003748:	4618      	mov	r0, r3
 800374a:	f7fd faf3 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, offset_output_value[0]);
 800374e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	e027      	b.n	80037a8 <main+0x2720>
 8003758:	0800e5d4 	.word	0x0800e5d4
 800375c:	0800e620 	.word	0x0800e620
 8003760:	200000cd 	.word	0x200000cd
 8003764:	200000ce 	.word	0x200000ce
 8003768:	0800e624 	.word	0x0800e624
 800376c:	0800e578 	.word	0x0800e578
 8003770:	0800e57c 	.word	0x0800e57c
 8003774:	0800e59c 	.word	0x0800e59c
 8003778:	0800e5a0 	.word	0x0800e5a0
 800377c:	0800e5a4 	.word	0x0800e5a4
 8003780:	0800e5a8 	.word	0x0800e5a8
 8003784:	0800e5ac 	.word	0x0800e5ac
 8003788:	0800e5b0 	.word	0x0800e5b0
 800378c:	20000531 	.word	0x20000531
 8003790:	0800e628 	.word	0x0800e628
 8003794:	200000cc 	.word	0x200000cc
 8003798:	0800e634 	.word	0x0800e634
 800379c:	200000cf 	.word	0x200000cf
 80037a0:	200004d8 	.word	0x200004d8
 80037a4:	200000d0 	.word	0x200000d0
 80037a8:	f107 0318 	add.w	r3, r7, #24
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fd faa8 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, ".");
 80037b4:	f107 0318 	add.w	r3, r7, #24
 80037b8:	49db      	ldr	r1, [pc, #876]	; (8003b28 <main+0x2aa0>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd faba 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, offset_output_value[1]);
 80037c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037c4:	785b      	ldrb	r3, [r3, #1]
 80037c6:	461a      	mov	r2, r3
 80037c8:	f107 0318 	add.w	r3, r7, #24
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd fa98 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, offset_output_value[2]);
 80037d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037d8:	789b      	ldrb	r3, [r3, #2]
 80037da:	461a      	mov	r2, r3
 80037dc:	f107 0318 	add.w	r3, r7, #24
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fd fa8e 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, offset_output_value[3]);
 80037e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037ec:	78db      	ldrb	r3, [r3, #3]
 80037ee:	461a      	mov	r2, r3
 80037f0:	f107 0318 	add.w	r3, r7, #24
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7fd fa84 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "V");
 80037fc:	f107 0318 	add.w	r3, r7, #24
 8003800:	49ca      	ldr	r1, [pc, #808]	; (8003b2c <main+0x2aa4>)
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fa96 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, ",");
 8003808:	f107 0318 	add.w	r3, r7, #24
 800380c:	49c8      	ldr	r1, [pc, #800]	; (8003b30 <main+0x2aa8>)
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fa90 	bl	8000d34 <Lcd_string>

					Lcd_string(&lcd, "A:");
 8003814:	f107 0318 	add.w	r3, r7, #24
 8003818:	49c6      	ldr	r1, [pc, #792]	; (8003b34 <main+0x2aac>)
 800381a:	4618      	mov	r0, r3
 800381c:	f7fd fa8a 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, (amplitude_output_value[0]));
 8003820:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	f107 0318 	add.w	r3, r7, #24
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fa68 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "." );
 8003834:	f107 0318 	add.w	r3, r7, #24
 8003838:	49bb      	ldr	r1, [pc, #748]	; (8003b28 <main+0x2aa0>)
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fa7a 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, (amplitude_output_value[1]));
 8003840:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	461a      	mov	r2, r3
 8003848:	f107 0318 	add.w	r3, r7, #24
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fa58 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (amplitude_output_value[2]));
 8003854:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003858:	789b      	ldrb	r3, [r3, #2]
 800385a:	461a      	mov	r2, r3
 800385c:	f107 0318 	add.w	r3, r7, #24
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f7fd fa4e 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (amplitude_output_value[3]));
 8003868:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800386c:	78db      	ldrb	r3, [r3, #3]
 800386e:	461a      	mov	r2, r3
 8003870:	f107 0318 	add.w	r3, r7, #24
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f7fd fa44 	bl	8000d04 <Lcd_int>
					Lcd_string(&lcd, "V");
 800387c:	f107 0318 	add.w	r3, r7, #24
 8003880:	49aa      	ldr	r1, [pc, #680]	; (8003b2c <main+0x2aa4>)
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fa56 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, ",");
 8003888:	f107 0318 	add.w	r3, r7, #24
 800388c:	49a8      	ldr	r1, [pc, #672]	; (8003b30 <main+0x2aa8>)
 800388e:	4618      	mov	r0, r3
 8003890:	f7fd fa50 	bl	8000d34 <Lcd_string>

					Lcd_string(&lcd, "F:");
 8003894:	f107 0318 	add.w	r3, r7, #24
 8003898:	49a7      	ldr	r1, [pc, #668]	; (8003b38 <main+0x2ab0>)
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fa4a 	bl	8000d34 <Lcd_string>
					Lcd_int(&lcd, (frequency_output_value[0]));
 80038a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f107 0318 	add.w	r3, r7, #24
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fd fa28 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (frequency_output_value[1]));
 80038b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038b8:	785b      	ldrb	r3, [r3, #1]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f107 0318 	add.w	r3, r7, #24
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd fa1e 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (frequency_output_value[2]));
 80038c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038cc:	789b      	ldrb	r3, [r3, #2]
 80038ce:	461a      	mov	r2, r3
 80038d0:	f107 0318 	add.w	r3, r7, #24
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fd fa14 	bl	8000d04 <Lcd_int>
					Lcd_int(&lcd, (frequency_output_value[3]));
 80038dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038e0:	78db      	ldrb	r3, [r3, #3]
 80038e2:	461a      	mov	r2, r3
 80038e4:	f107 0318 	add.w	r3, r7, #24
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd fa0a 	bl	8000d04 <Lcd_int>
					//					if(DAC_frequency_output_lcd<1000)
					//					{
					//						Lcd_string(&lcd, "0");
					//					}
					//DAC_frequency_output = DAC_frequency_output_lcd;
					Lcd_string(&lcd, "Hz");
 80038f0:	f107 0318 	add.w	r3, r7, #24
 80038f4:	4991      	ldr	r1, [pc, #580]	; (8003b3c <main+0x2ab4>)
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fd fa1c 	bl	8000d34 <Lcd_string>

					AC_set = 0;
 80038fc:	4b90      	ldr	r3, [pc, #576]	; (8003b40 <main+0x2ab8>)
 80038fe:	2200      	movs	r2, #0
 8003900:	701a      	strb	r2, [r3, #0]
				}

				if(signal_p)
 8003902:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d008      	beq.n	8003920 <main+0x2898>
				{
					scrolling = 1;
 800390e:	4b8d      	ldr	r3, [pc, #564]	; (8003b44 <main+0x2abc>)
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
					Lcd_string(&lcd, "O:1.200V,A:1.000V,F:1000Hz,D:25%");
 8003914:	f107 0318 	add.w	r3, r7, #24
 8003918:	498b      	ldr	r1, [pc, #556]	; (8003b48 <main+0x2ac0>)
 800391a:	4618      	mov	r0, r3
 800391c:	f7fd fa0a 	bl	8000d34 <Lcd_string>
				}

				if(scrolling)
 8003920:	4b88      	ldr	r3, [pc, #544]	; (8003b44 <main+0x2abc>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d011      	beq.n	800394c <main+0x28c4>
				{
					LCD_scroll_count++;
 8003928:	f8b7 398e 	ldrh.w	r3, [r7, #2446]	; 0x98e
 800392c:	3301      	adds	r3, #1
 800392e:	f8a7 398e 	strh.w	r3, [r7, #2446]	; 0x98e
					if(LCD_scroll_count > 8){
 8003932:	f8b7 398e 	ldrh.w	r3, [r7, #2446]	; 0x98e
 8003936:	2b08      	cmp	r3, #8
 8003938:	d908      	bls.n	800394c <main+0x28c4>
						lcd_write_command(&lcd, 0x1A);
 800393a:	f107 0318 	add.w	r3, r7, #24
 800393e:	211a      	movs	r1, #26
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd fa3b 	bl	8000dbc <lcd_write_command>
						LCD_scroll_count = 0;
 8003946:	2300      	movs	r3, #0
 8003948:	f8a7 398e 	strh.w	r3, [r7, #2446]	; 0x98e
			}


		}

		if(cols == 0 && rows == 4)
 800394c:	4b7f      	ldr	r3, [pc, #508]	; (8003b4c <main+0x2ac4>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f040 808b 	bne.w	8003a6c <main+0x29e4>
 8003956:	4b7e      	ldr	r3, [pc, #504]	; (8003b50 <main+0x2ac8>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b04      	cmp	r3, #4
 800395c:	f040 8086 	bne.w	8003a6c <main+0x29e4>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003960:	f107 0318 	add.w	r3, r7, #24
 8003964:	2200      	movs	r2, #0
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd fa01 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Amplitude");
 800396e:	f107 0318 	add.w	r3, r7, #24
 8003972:	4978      	ldr	r1, [pc, #480]	; (8003b54 <main+0x2acc>)
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd f9dd 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 800397a:	f107 0318 	add.w	r3, r7, #24
 800397e:	2200      	movs	r2, #0
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd f9f4 	bl	8000d70 <Lcd_cursor>
			Lcd_int(&lcd, (amplitude_output_value[0]));
 8003988:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	f107 0318 	add.w	r3, r7, #24
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f7fd f9b4 	bl	8000d04 <Lcd_int>
			//			Lcd_string(&lcd, "." );
			Lcd_int(&lcd, (amplitude_output_value[1]));
 800399c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039a0:	785b      	ldrb	r3, [r3, #1]
 80039a2:	461a      	mov	r2, r3
 80039a4:	f107 0318 	add.w	r3, r7, #24
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fd f9aa 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (amplitude_output_value[2]));
 80039b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039b4:	789b      	ldrb	r3, [r3, #2]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f107 0318 	add.w	r3, r7, #24
 80039bc:	4611      	mov	r1, r2
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd f9a0 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (amplitude_output_value[3]));
 80039c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80039c8:	78db      	ldrb	r3, [r3, #3]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f107 0318 	add.w	r3, r7, #24
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fd f996 	bl	8000d04 <Lcd_int>
			Lcd_string(&lcd, "mV");
 80039d8:	f107 0318 	add.w	r3, r7, #24
 80039dc:	495e      	ldr	r1, [pc, #376]	; (8003b58 <main+0x2ad0>)
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd f9a8 	bl	8000d34 <Lcd_string>
			if (setAmplitude == 1)
 80039e4:	4b5d      	ldr	r3, [pc, #372]	; (8003b5c <main+0x2ad4>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d13f      	bne.n	8003a6c <main+0x29e4>
			{
				Lcd_string(&lcd, " ");
 80039ec:	f107 0318 	add.w	r3, r7, #24
 80039f0:	495b      	ldr	r1, [pc, #364]	; (8003b60 <main+0x2ad8>)
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd f99e 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "S");
 80039f8:	f107 0318 	add.w	r3, r7, #24
 80039fc:	4959      	ldr	r1, [pc, #356]	; (8003b64 <main+0x2adc>)
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd f998 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "e");
 8003a04:	f107 0318 	add.w	r3, r7, #24
 8003a08:	4957      	ldr	r1, [pc, #348]	; (8003b68 <main+0x2ae0>)
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd f992 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "t");
 8003a10:	f107 0318 	add.w	r3, r7, #24
 8003a14:	4955      	ldr	r1, [pc, #340]	; (8003b6c <main+0x2ae4>)
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fd f98c 	bl	8000d34 <Lcd_string>
				DAC_amplitude_output = (amplitude_output_value[0])*1000 +(amplitude_output_value[1])*100 + (amplitude_output_value[2])*10 + (amplitude_output_value[3]);
 8003a1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a28:	fb03 f202 	mul.w	r2, r3, r2
 8003a2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a30:	785b      	ldrb	r3, [r3, #1]
 8003a32:	4619      	mov	r1, r3
 8003a34:	2364      	movs	r3, #100	; 0x64
 8003a36:	fb03 f301 	mul.w	r3, r3, r1
 8003a3a:	441a      	add	r2, r3
 8003a3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a40:	789b      	ldrb	r3, [r3, #2]
 8003a42:	4619      	mov	r1, r3
 8003a44:	460b      	mov	r3, r1
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003a52:	78d2      	ldrb	r2, [r2, #3]
 8003a54:	4413      	add	r3, r2
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a5e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8003a62:	edc3 7a00 	vstr	s15, [r3]
				setAmplitude = 0;
 8003a66:	4b3d      	ldr	r3, [pc, #244]	; (8003b5c <main+0x2ad4>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
			}


		}
		if(cols == 1 && rows == 4)
 8003a6c:	4b37      	ldr	r3, [pc, #220]	; (8003b4c <main+0x2ac4>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	f040 8146 	bne.w	8003d02 <main+0x2c7a>
 8003a76:	4b36      	ldr	r3, [pc, #216]	; (8003b50 <main+0x2ac8>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	f040 8141 	bne.w	8003d02 <main+0x2c7a>
		{
			//			Lcd_clear(&lcd);
			if (DC_set)
 8003a80:	4b3b      	ldr	r3, [pc, #236]	; (8003b70 <main+0x2ae8>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80b1 	beq.w	8003bec <main+0x2b64>
			{
				Lcd_cursor(&lcd, 0, 0);
 8003a8a:	f107 0318 	add.w	r3, r7, #24
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2100      	movs	r1, #0
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd f96c 	bl	8000d70 <Lcd_cursor>
				Lcd_string(&lcd, "Offset");
 8003a98:	f107 0318 	add.w	r3, r7, #24
 8003a9c:	4935      	ldr	r1, [pc, #212]	; (8003b74 <main+0x2aec>)
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd f948 	bl	8000d34 <Lcd_string>
				Lcd_cursor(&lcd, 1, 0);
 8003aa4:	f107 0318 	add.w	r3, r7, #24
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7fd f95f 	bl	8000d70 <Lcd_cursor>
				Lcd_int(&lcd, ((DC_offset_output_value[0])));
 8003ab2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f107 0318 	add.w	r3, r7, #24
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd f91f 	bl	8000d04 <Lcd_int>
				//				Lcd_string(&lcd, ".");
				Lcd_int(&lcd, ((DC_offset_output_value[1])));
 8003ac6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	461a      	mov	r2, r3
 8003ace:	f107 0318 	add.w	r3, r7, #24
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd f915 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, ((DC_offset_output_value[2])));
 8003ada:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ade:	789b      	ldrb	r3, [r3, #2]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	f107 0318 	add.w	r3, r7, #24
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7fd f90b 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, ((DC_offset_output_value[3])));
 8003aee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003af2:	78db      	ldrb	r3, [r3, #3]
 8003af4:	461a      	mov	r2, r3
 8003af6:	f107 0318 	add.w	r3, r7, #24
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd f901 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "mV");
 8003b02:	f107 0318 	add.w	r3, r7, #24
 8003b06:	4914      	ldr	r1, [pc, #80]	; (8003b58 <main+0x2ad0>)
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7fd f913 	bl	8000d34 <Lcd_string>

				if (setOffset == 1)
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <main+0x2af0>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d16a      	bne.n	8003bec <main+0x2b64>
				{
					//signal_d = 1;
					//					DCDACMENU = 1;
					Lcd_string(&lcd, " ");
 8003b16:	f107 0318 	add.w	r3, r7, #24
 8003b1a:	4911      	ldr	r1, [pc, #68]	; (8003b60 <main+0x2ad8>)
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7fd f909 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "S");
 8003b22:	f107 0318 	add.w	r3, r7, #24
 8003b26:	e029      	b.n	8003b7c <main+0x2af4>
 8003b28:	0800e578 	.word	0x0800e578
 8003b2c:	0800e57c 	.word	0x0800e57c
 8003b30:	0800e5a0 	.word	0x0800e5a0
 8003b34:	0800e5a4 	.word	0x0800e5a4
 8003b38:	0800e5a8 	.word	0x0800e5a8
 8003b3c:	0800e5b0 	.word	0x0800e5b0
 8003b40:	200000d0 	.word	0x200000d0
 8003b44:	200004d8 	.word	0x200004d8
 8003b48:	0800e640 	.word	0x0800e640
 8003b4c:	200000cd 	.word	0x200000cd
 8003b50:	200000ce 	.word	0x200000ce
 8003b54:	0800e5f4 	.word	0x0800e5f4
 8003b58:	0800e664 	.word	0x0800e664
 8003b5c:	200001ac 	.word	0x200001ac
 8003b60:	0800e668 	.word	0x0800e668
 8003b64:	0800e66c 	.word	0x0800e66c
 8003b68:	0800e670 	.word	0x0800e670
 8003b6c:	0800e674 	.word	0x0800e674
 8003b70:	200000cf 	.word	0x200000cf
 8003b74:	0800e600 	.word	0x0800e600
 8003b78:	200002d8 	.word	0x200002d8
 8003b7c:	49ce      	ldr	r1, [pc, #824]	; (8003eb8 <main+0x2e30>)
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd f8d8 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "e");
 8003b84:	f107 0318 	add.w	r3, r7, #24
 8003b88:	49cc      	ldr	r1, [pc, #816]	; (8003ebc <main+0x2e34>)
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fd f8d2 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "t");
 8003b90:	f107 0318 	add.w	r3, r7, #24
 8003b94:	49ca      	ldr	r1, [pc, #808]	; (8003ec0 <main+0x2e38>)
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd f8cc 	bl	8000d34 <Lcd_string>
					DAC_DC_offset = (DC_offset_output_value[0])*1000 +(DC_offset_output_value[1])*100 + (DC_offset_output_value[2])*10 + (DC_offset_output_value[3]);
 8003b9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ba8:	fb03 f202 	mul.w	r2, r3, r2
 8003bac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bb0:	785b      	ldrb	r3, [r3, #1]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	2364      	movs	r3, #100	; 0x64
 8003bb6:	fb03 f301 	mul.w	r3, r3, r1
 8003bba:	441a      	add	r2, r3
 8003bbc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bc0:	789b      	ldrb	r3, [r3, #2]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	4413      	add	r3, r2
 8003bce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bd2:	78d2      	ldrb	r2, [r2, #3]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bde:	f607 1394 	addw	r3, r7, #2452	; 0x994
 8003be2:	edc3 7a00 	vstr	s15, [r3]
					setOffset = 0;
 8003be6:	4bb7      	ldr	r3, [pc, #732]	; (8003ec4 <main+0x2e3c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	701a      	strb	r2, [r3, #0]
				}
			}

			if (AC_set)
 8003bec:	4bb6      	ldr	r3, [pc, #728]	; (8003ec8 <main+0x2e40>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8086 	beq.w	8003d02 <main+0x2c7a>
			{
				//				signal_s = 1;
				Lcd_cursor(&lcd, 0, 0);
 8003bf6:	f107 0318 	add.w	r3, r7, #24
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd f8b6 	bl	8000d70 <Lcd_cursor>
				Lcd_string(&lcd, "Offset");
 8003c04:	f107 0318 	add.w	r3, r7, #24
 8003c08:	49b0      	ldr	r1, [pc, #704]	; (8003ecc <main+0x2e44>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd f892 	bl	8000d34 <Lcd_string>
				Lcd_cursor(&lcd, 1, 0);
 8003c10:	f107 0318 	add.w	r3, r7, #24
 8003c14:	2200      	movs	r2, #0
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd f8a9 	bl	8000d70 <Lcd_cursor>
				Lcd_int(&lcd, (offset_output_value[0]));
 8003c1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	461a      	mov	r2, r3
 8003c26:	f107 0318 	add.w	r3, r7, #24
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fd f869 	bl	8000d04 <Lcd_int>
				//				Lcd_string(&lcd, "." );
				Lcd_int(&lcd, (offset_output_value[1]));
 8003c32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c36:	785b      	ldrb	r3, [r3, #1]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f107 0318 	add.w	r3, r7, #24
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fd f85f 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (offset_output_value[2]));
 8003c46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c4a:	789b      	ldrb	r3, [r3, #2]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f107 0318 	add.w	r3, r7, #24
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fd f855 	bl	8000d04 <Lcd_int>
				Lcd_int(&lcd, (offset_output_value[3]));
 8003c5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c5e:	78db      	ldrb	r3, [r3, #3]
 8003c60:	461a      	mov	r2, r3
 8003c62:	f107 0318 	add.w	r3, r7, #24
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fd f84b 	bl	8000d04 <Lcd_int>
				Lcd_string(&lcd, "mV");
 8003c6e:	f107 0318 	add.w	r3, r7, #24
 8003c72:	4997      	ldr	r1, [pc, #604]	; (8003ed0 <main+0x2e48>)
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd f85d 	bl	8000d34 <Lcd_string>
				if (setOffset == 1)
 8003c7a:	4b92      	ldr	r3, [pc, #584]	; (8003ec4 <main+0x2e3c>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d13f      	bne.n	8003d02 <main+0x2c7a>
				{
					Lcd_string(&lcd, " ");
 8003c82:	f107 0318 	add.w	r3, r7, #24
 8003c86:	4993      	ldr	r1, [pc, #588]	; (8003ed4 <main+0x2e4c>)
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fd f853 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "S");
 8003c8e:	f107 0318 	add.w	r3, r7, #24
 8003c92:	4989      	ldr	r1, [pc, #548]	; (8003eb8 <main+0x2e30>)
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fd f84d 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "e");
 8003c9a:	f107 0318 	add.w	r3, r7, #24
 8003c9e:	4987      	ldr	r1, [pc, #540]	; (8003ebc <main+0x2e34>)
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fd f847 	bl	8000d34 <Lcd_string>
					Lcd_string(&lcd, "t");
 8003ca6:	f107 0318 	add.w	r3, r7, #24
 8003caa:	4985      	ldr	r1, [pc, #532]	; (8003ec0 <main+0x2e38>)
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fd f841 	bl	8000d34 <Lcd_string>
					DAC_offset_output = (offset_output_value[0])*1000 +(offset_output_value[1])*100 + (offset_output_value[2])*10 + (offset_output_value[3]);
 8003cb2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cbe:	fb03 f202 	mul.w	r2, r3, r2
 8003cc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cc6:	785b      	ldrb	r3, [r3, #1]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	2364      	movs	r3, #100	; 0x64
 8003ccc:	fb03 f301 	mul.w	r3, r3, r1
 8003cd0:	441a      	add	r2, r3
 8003cd2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003cd6:	789b      	ldrb	r3, [r3, #2]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	460b      	mov	r3, r1
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8003ce8:	78d2      	ldrb	r2, [r2, #3]
 8003cea:	4413      	add	r3, r2
 8003cec:	ee07 3a90 	vmov	s15, r3
 8003cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cf4:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8003cf8:	edc3 7a00 	vstr	s15, [r3]
					setOffset = 0;
 8003cfc:	4b71      	ldr	r3, [pc, #452]	; (8003ec4 <main+0x2e3c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
				}
			}

		}

		if(cols == 2 && rows == 4)
 8003d02:	4b75      	ldr	r3, [pc, #468]	; (8003ed8 <main+0x2e50>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	f040 8093 	bne.w	8003e32 <main+0x2daa>
 8003d0c:	4b73      	ldr	r3, [pc, #460]	; (8003edc <main+0x2e54>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	f040 808e 	bne.w	8003e32 <main+0x2daa>
		{
			//			Lcd_clear(&lcd);
			Lcd_cursor(&lcd, 0, 0);
 8003d16:	f107 0318 	add.w	r3, r7, #24
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7fd f826 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Frequency");
 8003d24:	f107 0318 	add.w	r3, r7, #24
 8003d28:	496d      	ldr	r1, [pc, #436]	; (8003ee0 <main+0x2e58>)
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fd f802 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003d30:	f107 0318 	add.w	r3, r7, #24
 8003d34:	2200      	movs	r2, #0
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7fd f819 	bl	8000d70 <Lcd_cursor>
			Lcd_int(&lcd, (frequency_output_value[0]));
 8003d3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	f107 0318 	add.w	r3, r7, #24
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fc ffd9 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (frequency_output_value[1]));
 8003d52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d56:	785b      	ldrb	r3, [r3, #1]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f107 0318 	add.w	r3, r7, #24
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fc ffcf 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (frequency_output_value[2]));
 8003d66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d6a:	789b      	ldrb	r3, [r3, #2]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f107 0318 	add.w	r3, r7, #24
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fc ffc5 	bl	8000d04 <Lcd_int>
			Lcd_int(&lcd, (frequency_output_value[3]));
 8003d7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d7e:	78db      	ldrb	r3, [r3, #3]
 8003d80:	461a      	mov	r2, r3
 8003d82:	f107 0318 	add.w	r3, r7, #24
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fc ffbb 	bl	8000d04 <Lcd_int>


			Lcd_string(&lcd, "Hz");
 8003d8e:	f107 0318 	add.w	r3, r7, #24
 8003d92:	4954      	ldr	r1, [pc, #336]	; (8003ee4 <main+0x2e5c>)
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fc ffcd 	bl	8000d34 <Lcd_string>
			if (setFrequency == 1)
 8003d9a:	4b53      	ldr	r3, [pc, #332]	; (8003ee8 <main+0x2e60>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d147      	bne.n	8003e32 <main+0x2daa>
			{
				Lcd_string(&lcd, " ");
 8003da2:	f107 0318 	add.w	r3, r7, #24
 8003da6:	494b      	ldr	r1, [pc, #300]	; (8003ed4 <main+0x2e4c>)
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fc ffc3 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "S");
 8003dae:	f107 0318 	add.w	r3, r7, #24
 8003db2:	4941      	ldr	r1, [pc, #260]	; (8003eb8 <main+0x2e30>)
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc ffbd 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "e");
 8003dba:	f107 0318 	add.w	r3, r7, #24
 8003dbe:	493f      	ldr	r1, [pc, #252]	; (8003ebc <main+0x2e34>)
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fc ffb7 	bl	8000d34 <Lcd_string>
				Lcd_string(&lcd, "t");
 8003dc6:	f107 0318 	add.w	r3, r7, #24
 8003dca:	493d      	ldr	r1, [pc, #244]	; (8003ec0 <main+0x2e38>)
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc ffb1 	bl	8000d34 <Lcd_string>

				DAC_frequency_output = (frequency_output_value[0])*1000 +(frequency_output_value[1])*100 + (frequency_output_value[2])*10 + (frequency_output_value[3]);
 8003dd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	0152      	lsls	r2, r2, #5
 8003dde:	1ad2      	subs	r2, r2, r3
 8003de0:	0092      	lsls	r2, r2, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4619      	mov	r1, r3
 8003df2:	0089      	lsls	r1, r1, #2
 8003df4:	440b      	add	r3, r1
 8003df6:	4619      	mov	r1, r3
 8003df8:	0088      	lsls	r0, r1, #2
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	440b      	add	r3, r1
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	4413      	add	r3, r2
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e0c:	789b      	ldrb	r3, [r3, #2]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4619      	mov	r1, r3
 8003e12:	0089      	lsls	r1, r1, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e22:	78db      	ldrb	r3, [r3, #3]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	f8a7 399a 	strh.w	r3, [r7, #2458]	; 0x99a

				setFrequency = 0;
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <main+0x2e60>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	701a      	strb	r2, [r3, #0]
			}

		}


		if (rows == 4 && cols == 3)
 8003e32:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <main+0x2e54>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d11d      	bne.n	8003e76 <main+0x2dee>
 8003e3a:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <main+0x2e50>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d119      	bne.n	8003e76 <main+0x2dee>
		{
			Lcd_cursor(&lcd, 0, 0);
 8003e42:	f107 0318 	add.w	r3, r7, #24
 8003e46:	2200      	movs	r2, #0
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fc ff90 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "Duty Cycle");
 8003e50:	f107 0318 	add.w	r3, r7, #24
 8003e54:	4925      	ldr	r1, [pc, #148]	; (8003eec <main+0x2e64>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc ff6c 	bl	8000d34 <Lcd_string>
			Lcd_cursor(&lcd, 1, 0);
 8003e5c:	f107 0318 	add.w	r3, r7, #24
 8003e60:	2200      	movs	r2, #0
 8003e62:	2101      	movs	r1, #1
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fc ff83 	bl	8000d70 <Lcd_cursor>
			Lcd_string(&lcd, "25 %");
 8003e6a:	f107 0318 	add.w	r3, r7, #24
 8003e6e:	4920      	ldr	r1, [pc, #128]	; (8003ef0 <main+0x2e68>)
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fc ff5f 	bl	8000d34 <Lcd_string>



///////     LEDs

		if(rows==0 && cols==1) //D2
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <main+0x2e54>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <main+0x2e0a>
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <main+0x2e50>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d105      	bne.n	8003e92 <main+0x2e0a>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2110      	movs	r1, #16
 8003e8a:	481a      	ldr	r0, [pc, #104]	; (8003ef4 <main+0x2e6c>)
 8003e8c:	f004 fe56 	bl	8008b3c <HAL_GPIO_WritePin>
 8003e90:	e004      	b.n	8003e9c <main+0x2e14>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8003e92:	2201      	movs	r2, #1
 8003e94:	2110      	movs	r1, #16
 8003e96:	4817      	ldr	r0, [pc, #92]	; (8003ef4 <main+0x2e6c>)
 8003e98:	f004 fe50 	bl	8008b3c <HAL_GPIO_WritePin>
		}

		if(rows==0 && cols==1) //D3
 8003e9c:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <main+0x2e54>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d129      	bne.n	8003ef8 <main+0x2e70>
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <main+0x2e50>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d125      	bne.n	8003ef8 <main+0x2e70>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8003eac:	2201      	movs	r2, #1
 8003eae:	2120      	movs	r1, #32
 8003eb0:	4810      	ldr	r0, [pc, #64]	; (8003ef4 <main+0x2e6c>)
 8003eb2:	f004 fe43 	bl	8008b3c <HAL_GPIO_WritePin>
 8003eb6:	e024      	b.n	8003f02 <main+0x2e7a>
 8003eb8:	0800e66c 	.word	0x0800e66c
 8003ebc:	0800e670 	.word	0x0800e670
 8003ec0:	0800e674 	.word	0x0800e674
 8003ec4:	200002d8 	.word	0x200002d8
 8003ec8:	200000d0 	.word	0x200000d0
 8003ecc:	0800e600 	.word	0x0800e600
 8003ed0:	0800e664 	.word	0x0800e664
 8003ed4:	0800e668 	.word	0x0800e668
 8003ed8:	200000cd 	.word	0x200000cd
 8003edc:	200000ce 	.word	0x200000ce
 8003ee0:	0800e608 	.word	0x0800e608
 8003ee4:	0800e5b0 	.word	0x0800e5b0
 8003ee8:	20001681 	.word	0x20001681
 8003eec:	0800e614 	.word	0x0800e614
 8003ef0:	0800e678 	.word	0x0800e678
 8003ef4:	48000400 	.word	0x48000400
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8003ef8:	2200      	movs	r2, #0
 8003efa:	2120      	movs	r1, #32
 8003efc:	48b0      	ldr	r0, [pc, #704]	; (80041c0 <main+0x3138>)
 8003efe:	f004 fe1d 	bl	8008b3c <HAL_GPIO_WritePin>
		}

		if(setcurrent == 1) //D4
 8003f02:	4bb0      	ldr	r3, [pc, #704]	; (80041c4 <main+0x313c>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <main+0x2e8e>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	2140      	movs	r1, #64	; 0x40
 8003f0e:	48ac      	ldr	r0, [pc, #688]	; (80041c0 <main+0x3138>)
 8003f10:	f004 fe14 	bl	8008b3c <HAL_GPIO_WritePin>
 8003f14:	e004      	b.n	8003f20 <main+0x2e98>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8003f16:	2200      	movs	r2, #0
 8003f18:	2140      	movs	r1, #64	; 0x40
 8003f1a:	48a9      	ldr	r0, [pc, #676]	; (80041c0 <main+0x3138>)
 8003f1c:	f004 fe0e 	bl	8008b3c <HAL_GPIO_WritePin>
		}

		if(output == 1) //D5
 8003f20:	4ba9      	ldr	r3, [pc, #676]	; (80041c8 <main+0x3140>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <main+0x2eac>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8003f28:	2201      	movs	r2, #1
 8003f2a:	2180      	movs	r1, #128	; 0x80
 8003f2c:	48a4      	ldr	r0, [pc, #656]	; (80041c0 <main+0x3138>)
 8003f2e:	f004 fe05 	bl	8008b3c <HAL_GPIO_WritePin>
 8003f32:	e004      	b.n	8003f3e <main+0x2eb6>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8003f34:	2200      	movs	r2, #0
 8003f36:	2180      	movs	r1, #128	; 0x80
 8003f38:	48a1      	ldr	r0, [pc, #644]	; (80041c0 <main+0x3138>)
 8003f3a:	f004 fdff 	bl	8008b3c <HAL_GPIO_WritePin>




		////////////////////   UART Processing    /////////////////////
		if(move){
 8003f3e:	4ba3      	ldr	r3, [pc, #652]	; (80041cc <main+0x3144>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d020      	beq.n	8003f88 <main+0x2f00>
			for(i = 0; i < 21; i++){
 8003f46:	4ba2      	ldr	r3, [pc, #648]	; (80041d0 <main+0x3148>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e015      	b.n	8003f7a <main+0x2ef2>
				Tempdata[i] = Txdata[i];
 8003f4e:	4ba0      	ldr	r3, [pc, #640]	; (80041d0 <main+0x3148>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	4b9e      	ldr	r3, [pc, #632]	; (80041d0 <main+0x3148>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b9e      	ldr	r3, [pc, #632]	; (80041d4 <main+0x314c>)
 8003f5c:	5c59      	ldrb	r1, [r3, r1]
 8003f5e:	4b9e      	ldr	r3, [pc, #632]	; (80041d8 <main+0x3150>)
 8003f60:	5499      	strb	r1, [r3, r2]
				Txdata[i] = 0;
 8003f62:	4b9b      	ldr	r3, [pc, #620]	; (80041d0 <main+0x3148>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b9a      	ldr	r3, [pc, #616]	; (80041d4 <main+0x314c>)
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	5499      	strb	r1, [r3, r2]
			for(i = 0; i < 21; i++){
 8003f6e:	4b98      	ldr	r3, [pc, #608]	; (80041d0 <main+0x3148>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	3301      	adds	r3, #1
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b96      	ldr	r3, [pc, #600]	; (80041d0 <main+0x3148>)
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	4b95      	ldr	r3, [pc, #596]	; (80041d0 <main+0x3148>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b14      	cmp	r3, #20
 8003f80:	d9e5      	bls.n	8003f4e <main+0x2ec6>
			}
			move = 0;
 8003f82:	4b92      	ldr	r3, [pc, #584]	; (80041cc <main+0x3144>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
		}


		if (flag==1) {
 8003f88:	4b94      	ldr	r3, [pc, #592]	; (80041dc <main+0x3154>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	f040 84c1 	bne.w	8004916 <main+0x388e>


			if (Tempdata[2] == 35){ //#
 8003f94:	4b90      	ldr	r3, [pc, #576]	; (80041d8 <main+0x3150>)
 8003f96:	789b      	ldrb	r3, [r3, #2]
 8003f98:	2b23      	cmp	r3, #35	; 0x23
 8003f9a:	d13f      	bne.n	800401c <main+0x2f94>
				/// Display byte to screen
				if(Tempdata[4] == 49){ //1
 8003f9c:	4b8e      	ldr	r3, [pc, #568]	; (80041d8 <main+0x3150>)
 8003f9e:	791b      	ldrb	r3, [r3, #4]
 8003fa0:	2b31      	cmp	r3, #49	; 0x31
 8003fa2:	d124      	bne.n	8003fee <main+0x2f66>
					if(write_to_lcd == 0){
 8003fa4:	4b8e      	ldr	r3, [pc, #568]	; (80041e0 <main+0x3158>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <main+0x2f2e>
						Lcd_clear(&lcd);
 8003fac:	f107 0318 	add.w	r3, r7, #24
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fef7 	bl	8000da4 <Lcd_clear>
					}
					uint8_t disp_sc;
					disp_sc = Tempdata[6];
 8003fb6:	4b88      	ldr	r3, [pc, #544]	; (80041d8 <main+0x3150>)
 8003fb8:	799b      	ldrb	r3, [r3, #6]
 8003fba:	f887 397d 	strb.w	r3, [r7, #2429]	; 0x97d
					//HAL_UART_Transmit(&huart2,disp_sc,1, 50);
					lcd_write_data(&lcd, disp_sc);
 8003fbe:	f897 297d 	ldrb.w	r2, [r7, #2429]	; 0x97d
 8003fc2:	f107 0318 	add.w	r3, r7, #24
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fc ff25 	bl	8000e18 <lcd_write_data>
					write_to_lcd = 1;
 8003fce:	4b84      	ldr	r3, [pc, #528]	; (80041e0 <main+0x3158>)
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	701a      	strb	r2, [r3, #0]
					menu_mode = 0;
 8003fd4:	4b83      	ldr	r3, [pc, #524]	; (80041e4 <main+0x315c>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
					measurment_mode = 0;
 8003fda:	4b83      	ldr	r3, [pc, #524]	; (80041e8 <main+0x3160>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
					output = 0;
 8003fe0:	4b79      	ldr	r3, [pc, #484]	; (80041c8 <main+0x3140>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
					com_to_lcd = 0;
 8003fe6:	4b81      	ldr	r3, [pc, #516]	; (80041ec <main+0x3164>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e011      	b.n	8004012 <main+0x2f8a>
				}
				else if(Tempdata[4] == 40){
 8003fee:	4b7a      	ldr	r3, [pc, #488]	; (80041d8 <main+0x3150>)
 8003ff0:	791b      	ldrb	r3, [r3, #4]
 8003ff2:	2b28      	cmp	r3, #40	; 0x28
 8003ff4:	d10d      	bne.n	8004012 <main+0x2f8a>
					/// send command
					lcd_write_command(&lcd, Tempdata[6]);
 8003ff6:	4b78      	ldr	r3, [pc, #480]	; (80041d8 <main+0x3150>)
 8003ff8:	799a      	ldrb	r2, [r3, #6]
 8003ffa:	f107 0318 	add.w	r3, r7, #24
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc fedb 	bl	8000dbc <lcd_write_command>

					write_to_lcd = 0;
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <main+0x3158>)
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
					com_to_lcd = 1;
 800400c:	4b77      	ldr	r3, [pc, #476]	; (80041ec <main+0x3164>)
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
				}

				flag = 0;
 8004012:	4b72      	ldr	r3, [pc, #456]	; (80041dc <main+0x3154>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	f000 bc7d 	b.w	8004916 <main+0x388e>
			}
			else if(Tempdata[2] != 35 && write_to_lcd ==1){
 800401c:	4b6e      	ldr	r3, [pc, #440]	; (80041d8 <main+0x3150>)
 800401e:	789b      	ldrb	r3, [r3, #2]
 8004020:	2b23      	cmp	r3, #35	; 0x23
 8004022:	d010      	beq.n	8004046 <main+0x2fbe>
 8004024:	4b6e      	ldr	r3, [pc, #440]	; (80041e0 <main+0x3158>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d10c      	bne.n	8004046 <main+0x2fbe>
				Lcd_clear(&lcd);
 800402c:	f107 0318 	add.w	r3, r7, #24
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc feb7 	bl	8000da4 <Lcd_clear>
				write_to_lcd = 0;
 8004036:	4b6a      	ldr	r3, [pc, #424]	; (80041e0 <main+0x3158>)
 8004038:	2200      	movs	r2, #0
 800403a:	701a      	strb	r2, [r3, #0]
				com_to_lcd = 0;
 800403c:	4b6b      	ldr	r3, [pc, #428]	; (80041ec <main+0x3164>)
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	f000 bc68 	b.w	8004916 <main+0x388e>
			}



			else if(Tempdata[2] == 36){
 8004046:	4b64      	ldr	r3, [pc, #400]	; (80041d8 <main+0x3150>)
 8004048:	789b      	ldrb	r3, [r3, #2]
 800404a:	2b24      	cmp	r3, #36	; 0x24
 800404c:	d166      	bne.n	800411c <main+0x3094>
				// Measurement mode

				if((Tempdata[4] == 68) && (Tempdata[5] == 86)){
 800404e:	4b62      	ldr	r3, [pc, #392]	; (80041d8 <main+0x3150>)
 8004050:	791b      	ldrb	r3, [r3, #4]
 8004052:	2b44      	cmp	r3, #68	; 0x44
 8004054:	d11f      	bne.n	8004096 <main+0x300e>
 8004056:	4b60      	ldr	r3, [pc, #384]	; (80041d8 <main+0x3150>)
 8004058:	795b      	ldrb	r3, [r3, #5]
 800405a:	2b56      	cmp	r3, #86	; 0x56
 800405c:	d11b      	bne.n	8004096 <main+0x300e>
					// DC - Voltage
					DC_measure = 1;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
					measurment_mode = 1;
 8004064:	4b60      	ldr	r3, [pc, #384]	; (80041e8 <main+0x3160>)
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
					menu_mode = 0;
 800406a:	4b5e      	ldr	r3, [pc, #376]	; (80041e4 <main+0x315c>)
 800406c:	2200      	movs	r2, #0
 800406e:	701a      	strb	r2, [r3, #0]
					parameter_o = 1;
 8004070:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
					signal_d = 1;
 8004078:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800407c:	2201      	movs	r2, #1
 800407e:	701a      	strb	r2, [r3, #0]
					flag = 0;
 8004080:	4b56      	ldr	r3, [pc, #344]	; (80041dc <main+0x3154>)
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
					AC_measure = 0;
 8004086:	2300      	movs	r3, #0
 8004088:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
					setcurrent = 0;
 800408c:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <main+0x313c>)
 800408e:	2200      	movs	r2, #0
 8004090:	701a      	strb	r2, [r3, #0]
 8004092:	f000 bc40 	b.w	8004916 <main+0x388e>
				}
				else if((Tempdata[4] == 65) && (Tempdata[5] == 86)){
 8004096:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <main+0x3150>)
 8004098:	791b      	ldrb	r3, [r3, #4]
 800409a:	2b41      	cmp	r3, #65	; 0x41
 800409c:	d117      	bne.n	80040ce <main+0x3046>
 800409e:	4b4e      	ldr	r3, [pc, #312]	; (80041d8 <main+0x3150>)
 80040a0:	795b      	ldrb	r3, [r3, #5]
 80040a2:	2b56      	cmp	r3, #86	; 0x56
 80040a4:	d113      	bne.n	80040ce <main+0x3046>
					//AC - Voltage
					AC_measure = 1;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
					measurment_mode = 1;
 80040ac:	4b4e      	ldr	r3, [pc, #312]	; (80041e8 <main+0x3160>)
 80040ae:	2201      	movs	r2, #1
 80040b0:	701a      	strb	r2, [r3, #0]
					menu_mode = 0;
 80040b2:	4b4c      	ldr	r3, [pc, #304]	; (80041e4 <main+0x315c>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	701a      	strb	r2, [r3, #0]
					DC_measure = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
					flag = 0;
 80040be:	4b47      	ldr	r3, [pc, #284]	; (80041dc <main+0x3154>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
					setcurrent = 0;
 80040c4:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <main+0x313c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	f000 bc24 	b.w	8004916 <main+0x388e>
				}
				else if((Tempdata[4] == 68) && (Tempdata[5] == 73)){
 80040ce:	4b42      	ldr	r3, [pc, #264]	; (80041d8 <main+0x3150>)
 80040d0:	791b      	ldrb	r3, [r3, #4]
 80040d2:	2b44      	cmp	r3, #68	; 0x44
 80040d4:	d10e      	bne.n	80040f4 <main+0x306c>
 80040d6:	4b40      	ldr	r3, [pc, #256]	; (80041d8 <main+0x3150>)
 80040d8:	795b      	ldrb	r3, [r3, #5]
 80040da:	2b49      	cmp	r3, #73	; 0x49
 80040dc:	d10a      	bne.n	80040f4 <main+0x306c>
					//DC - Current
					setcurrent = 1;
 80040de:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <main+0x313c>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
					AC_measure = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
					DC_measure = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
 80040f0:	f000 bc11 	b.w	8004916 <main+0x388e>

				}
				else if((Tempdata[4] == 65) && (Tempdata[5] == 73)){
 80040f4:	4b38      	ldr	r3, [pc, #224]	; (80041d8 <main+0x3150>)
 80040f6:	791b      	ldrb	r3, [r3, #4]
 80040f8:	2b41      	cmp	r3, #65	; 0x41
 80040fa:	f040 840c 	bne.w	8004916 <main+0x388e>
 80040fe:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <main+0x3150>)
 8004100:	795b      	ldrb	r3, [r3, #5]
 8004102:	2b49      	cmp	r3, #73	; 0x49
 8004104:	f040 8407 	bne.w	8004916 <main+0x388e>
					// AC - Current
					setcurrent = 1;
 8004108:	4b2e      	ldr	r3, [pc, #184]	; (80041c4 <main+0x313c>)
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
					AC_measure = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	f8a7 39c4 	strh.w	r3, [r7, #2500]	; 0x9c4
					DC_measure = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	f887 39c7 	strb.w	r3, [r7, #2503]	; 0x9c7
 800411a:	e3fc      	b.n	8004916 <main+0x388e>
				}

			}
			else if(Tempdata[2] == 94){ //^
 800411c:	4b2e      	ldr	r3, [pc, #184]	; (80041d8 <main+0x3150>)
 800411e:	789b      	ldrb	r3, [r3, #2]
 8004120:	2b5e      	cmp	r3, #94	; 0x5e
 8004122:	f040 82b4 	bne.w	800468e <main+0x3606>
				// set output parameter

				if(Tempdata[4] == 116){ //t
 8004126:	4b2c      	ldr	r3, [pc, #176]	; (80041d8 <main+0x3150>)
 8004128:	791b      	ldrb	r3, [r3, #4]
 800412a:	2b74      	cmp	r3, #116	; 0x74
 800412c:	f040 8085 	bne.w	800423a <main+0x31b2>
					//type

					if(Tempdata[6] == 100){
 8004130:	4b29      	ldr	r3, [pc, #164]	; (80041d8 <main+0x3150>)
 8004132:	799b      	ldrb	r3, [r3, #6]
 8004134:	2b64      	cmp	r3, #100	; 0x64
 8004136:	d11f      	bne.n	8004178 <main+0x30f0>
						// DC - Signal type
						signal_d = 1;
 8004138:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800413c:	2201      	movs	r2, #1
 800413e:	701a      	strb	r2, [r3, #0]
						signal_s = 0;
 8004140:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004144:	2200      	movs	r2, #0
 8004146:	701a      	strb	r2, [r3, #0]
						signal_p = 0;
 8004148:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
						DC_set = 1;
 8004150:	4b27      	ldr	r3, [pc, #156]	; (80041f0 <main+0x3168>)
 8004152:	2201      	movs	r2, #1
 8004154:	701a      	strb	r2, [r3, #0]
						AC_set = 0;
 8004156:	4b27      	ldr	r3, [pc, #156]	; (80041f4 <main+0x316c>)
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
						HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800415c:	2100      	movs	r1, #0
 800415e:	4826      	ldr	r0, [pc, #152]	; (80041f8 <main+0x3170>)
 8004160:	f003 feba 	bl	8007ed8 <HAL_DAC_Stop_DMA>
						HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
 8004164:	2100      	movs	r1, #0
 8004166:	4824      	ldr	r0, [pc, #144]	; (80041f8 <main+0x3170>)
 8004168:	f003 fe9b 	bl	8007ea2 <HAL_DAC_Stop>
						Lcd_clear(&lcd);
 800416c:	f107 0318 	add.w	r3, r7, #24
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc fe17 	bl	8000da4 <Lcd_clear>
 8004176:	e286      	b.n	8004686 <main+0x35fe>
						//output = 1;
					}
					else if(Tempdata[6] == 115){
 8004178:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <main+0x3150>)
 800417a:	799b      	ldrb	r3, [r3, #6]
 800417c:	2b73      	cmp	r3, #115	; 0x73
 800417e:	d13d      	bne.n	80041fc <main+0x3174>
						// Sinusoidal signal type
						signal_s = 1;
 8004180:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
						signal_d = 0;
 8004188:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
						signal_p = 0;
 8004190:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8004194:	2200      	movs	r2, #0
 8004196:	701a      	strb	r2, [r3, #0]
						DC_set = 0;
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <main+0x3168>)
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
						AC_set = 1;
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <main+0x316c>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
						HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80041a4:	2100      	movs	r1, #0
 80041a6:	4814      	ldr	r0, [pc, #80]	; (80041f8 <main+0x3170>)
 80041a8:	f003 fe96 	bl	8007ed8 <HAL_DAC_Stop_DMA>
						HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
 80041ac:	2100      	movs	r1, #0
 80041ae:	4812      	ldr	r0, [pc, #72]	; (80041f8 <main+0x3170>)
 80041b0:	f003 fe77 	bl	8007ea2 <HAL_DAC_Stop>
						Lcd_clear(&lcd);
 80041b4:	f107 0318 	add.w	r3, r7, #24
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc fdf3 	bl	8000da4 <Lcd_clear>
 80041be:	e262      	b.n	8004686 <main+0x35fe>
 80041c0:	48000400 	.word	0x48000400
 80041c4:	20000531 	.word	0x20000531
 80041c8:	200000cc 	.word	0x200000cc
 80041cc:	2000032d 	.word	0x2000032d
 80041d0:	2000032c 	.word	0x2000032c
 80041d4:	20000334 	.word	0x20000334
 80041d8:	20000580 	.word	0x20000580
 80041dc:	200001c4 	.word	0x200001c4
 80041e0:	200000ca 	.word	0x200000ca
 80041e4:	200000c9 	.word	0x200000c9
 80041e8:	2000000f 	.word	0x2000000f
 80041ec:	200000cb 	.word	0x200000cb
 80041f0:	200000cf 	.word	0x200000cf
 80041f4:	200000d0 	.word	0x200000d0
 80041f8:	200001b0 	.word	0x200001b0
					}
					else if(Tempdata[6] == 112){
 80041fc:	4bba      	ldr	r3, [pc, #744]	; (80044e8 <main+0x3460>)
 80041fe:	799b      	ldrb	r3, [r3, #6]
 8004200:	2b70      	cmp	r3, #112	; 0x70
 8004202:	f040 8240 	bne.w	8004686 <main+0x35fe>
						// Pulse signal type
						signal_p = 1;
 8004206:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
						signal_d = 0;
 800420e:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8004212:	2200      	movs	r2, #0
 8004214:	701a      	strb	r2, [r3, #0]
						signal_s = 0;
 8004216:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800421a:	2200      	movs	r2, #0
 800421c:	701a      	strb	r2, [r3, #0]
						HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800421e:	2100      	movs	r1, #0
 8004220:	48b2      	ldr	r0, [pc, #712]	; (80044ec <main+0x3464>)
 8004222:	f003 fe59 	bl	8007ed8 <HAL_DAC_Stop_DMA>
						HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
 8004226:	2100      	movs	r1, #0
 8004228:	48b0      	ldr	r0, [pc, #704]	; (80044ec <main+0x3464>)
 800422a:	f003 fe3a 	bl	8007ea2 <HAL_DAC_Stop>
						//output = 1;
						Lcd_clear(&lcd);
 800422e:	f107 0318 	add.w	r3, r7, #24
 8004232:	4618      	mov	r0, r3
 8004234:	f7fc fdb6 	bl	8000da4 <Lcd_clear>
 8004238:	e225      	b.n	8004686 <main+0x35fe>
					}

				}
				else if(Tempdata[4] == 97){
 800423a:	4bab      	ldr	r3, [pc, #684]	; (80044e8 <main+0x3460>)
 800423c:	791b      	ldrb	r3, [r3, #4]
 800423e:	2b61      	cmp	r3, #97	; 0x61
 8004240:	d141      	bne.n	80042c6 <main+0x323e>
					// Amplitude
					amplitude_output_value[0] = Tempdata[6] - 48;
 8004242:	4ba9      	ldr	r3, [pc, #676]	; (80044e8 <main+0x3460>)
 8004244:	799b      	ldrb	r3, [r3, #6]
 8004246:	3b30      	subs	r3, #48	; 0x30
 8004248:	b2da      	uxtb	r2, r3
 800424a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800424e:	701a      	strb	r2, [r3, #0]
					amplitude_output_value[1] = Tempdata[7] - 48;
 8004250:	4ba5      	ldr	r3, [pc, #660]	; (80044e8 <main+0x3460>)
 8004252:	79db      	ldrb	r3, [r3, #7]
 8004254:	3b30      	subs	r3, #48	; 0x30
 8004256:	b2da      	uxtb	r2, r3
 8004258:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800425c:	705a      	strb	r2, [r3, #1]
					amplitude_output_value[2] = Tempdata[8] - 48;
 800425e:	4ba2      	ldr	r3, [pc, #648]	; (80044e8 <main+0x3460>)
 8004260:	7a1b      	ldrb	r3, [r3, #8]
 8004262:	3b30      	subs	r3, #48	; 0x30
 8004264:	b2da      	uxtb	r2, r3
 8004266:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800426a:	709a      	strb	r2, [r3, #2]
					amplitude_output_value[3] = Tempdata[9] - 48;
 800426c:	4b9e      	ldr	r3, [pc, #632]	; (80044e8 <main+0x3460>)
 800426e:	7a5b      	ldrb	r3, [r3, #9]
 8004270:	3b30      	subs	r3, #48	; 0x30
 8004272:	b2da      	uxtb	r2, r3
 8004274:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004278:	70da      	strb	r2, [r3, #3]
					//DAC_amplitude_output = amplitude_output_value[0]*1 + amplitude_output_value[1]*0.1 + amplitude_output_value[2]*0.01 + amplitude_output_value[3]*0.001;
					DAC_amplitude_output = amplitude_output_value[0]*1000 + amplitude_output_value[1]*100 + amplitude_output_value[2]*10 + amplitude_output_value[3];
 800427a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004286:	fb03 f202 	mul.w	r2, r3, r2
 800428a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800428e:	785b      	ldrb	r3, [r3, #1]
 8004290:	4619      	mov	r1, r3
 8004292:	2364      	movs	r3, #100	; 0x64
 8004294:	fb03 f301 	mul.w	r3, r3, r1
 8004298:	441a      	add	r2, r3
 800429a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800429e:	789b      	ldrb	r3, [r3, #2]
 80042a0:	4619      	mov	r1, r3
 80042a2:	460b      	mov	r3, r1
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	4413      	add	r3, r2
 80042ac:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80042b0:	78d2      	ldrb	r2, [r2, #3]
 80042b2:	4413      	add	r3, r2
 80042b4:	ee07 3a90 	vmov	s15, r3
 80042b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042bc:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80042c0:	edc3 7a00 	vstr	s15, [r3]
 80042c4:	e1df      	b.n	8004686 <main+0x35fe>
				}
				else if(Tempdata[4] == 111){
 80042c6:	4b88      	ldr	r3, [pc, #544]	; (80044e8 <main+0x3460>)
 80042c8:	791b      	ldrb	r3, [r3, #4]
 80042ca:	2b6f      	cmp	r3, #111	; 0x6f
 80042cc:	f040 8091 	bne.w	80043f2 <main+0x336a>
					//offset
					if(signal_d){
 80042d0:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d041      	beq.n	8004360 <main+0x32d8>
						DC_offset_output_value[0] = Tempdata[6] - 48;
 80042dc:	4b82      	ldr	r3, [pc, #520]	; (80044e8 <main+0x3460>)
 80042de:	799b      	ldrb	r3, [r3, #6]
 80042e0:	3b30      	subs	r3, #48	; 0x30
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042e8:	701a      	strb	r2, [r3, #0]
						DC_offset_output_value[1] = Tempdata[7] - 48;
 80042ea:	4b7f      	ldr	r3, [pc, #508]	; (80044e8 <main+0x3460>)
 80042ec:	79db      	ldrb	r3, [r3, #7]
 80042ee:	3b30      	subs	r3, #48	; 0x30
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80042f6:	705a      	strb	r2, [r3, #1]
						DC_offset_output_value[2] = Tempdata[8] - 48;
 80042f8:	4b7b      	ldr	r3, [pc, #492]	; (80044e8 <main+0x3460>)
 80042fa:	7a1b      	ldrb	r3, [r3, #8]
 80042fc:	3b30      	subs	r3, #48	; 0x30
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004304:	709a      	strb	r2, [r3, #2]
						DC_offset_output_value[3] = Tempdata[9] - 48;
 8004306:	4b78      	ldr	r3, [pc, #480]	; (80044e8 <main+0x3460>)
 8004308:	7a5b      	ldrb	r3, [r3, #9]
 800430a:	3b30      	subs	r3, #48	; 0x30
 800430c:	b2da      	uxtb	r2, r3
 800430e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004312:	70da      	strb	r2, [r3, #3]
						DAC_DC_offset = DC_offset_output_value[0]*1000 + DC_offset_output_value[1]*100 + DC_offset_output_value[2]*10 + DC_offset_output_value[3];
 8004314:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	461a      	mov	r2, r3
 800431c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004320:	fb03 f202 	mul.w	r2, r3, r2
 8004324:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	4619      	mov	r1, r3
 800432c:	2364      	movs	r3, #100	; 0x64
 800432e:	fb03 f301 	mul.w	r3, r3, r1
 8004332:	441a      	add	r2, r3
 8004334:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004338:	789b      	ldrb	r3, [r3, #2]
 800433a:	4619      	mov	r1, r3
 800433c:	460b      	mov	r3, r1
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	440b      	add	r3, r1
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800434a:	78d2      	ldrb	r2, [r2, #3]
 800434c:	4413      	add	r3, r2
 800434e:	ee07 3a90 	vmov	s15, r3
 8004352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004356:	f607 1394 	addw	r3, r7, #2452	; 0x994
 800435a:	edc3 7a00 	vstr	s15, [r3]
 800435e:	e192      	b.n	8004686 <main+0x35fe>
					}
					else if(signal_s){
 8004360:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 818c 	beq.w	8004686 <main+0x35fe>

						offset_output_value[0] = Tempdata[6] - 48;
 800436e:	4b5e      	ldr	r3, [pc, #376]	; (80044e8 <main+0x3460>)
 8004370:	799b      	ldrb	r3, [r3, #6]
 8004372:	3b30      	subs	r3, #48	; 0x30
 8004374:	b2da      	uxtb	r2, r3
 8004376:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800437a:	701a      	strb	r2, [r3, #0]
						offset_output_value[1] = Tempdata[7] - 48;
 800437c:	4b5a      	ldr	r3, [pc, #360]	; (80044e8 <main+0x3460>)
 800437e:	79db      	ldrb	r3, [r3, #7]
 8004380:	3b30      	subs	r3, #48	; 0x30
 8004382:	b2da      	uxtb	r2, r3
 8004384:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004388:	705a      	strb	r2, [r3, #1]
						offset_output_value[2] = Tempdata[8] - 48;
 800438a:	4b57      	ldr	r3, [pc, #348]	; (80044e8 <main+0x3460>)
 800438c:	7a1b      	ldrb	r3, [r3, #8]
 800438e:	3b30      	subs	r3, #48	; 0x30
 8004390:	b2da      	uxtb	r2, r3
 8004392:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004396:	709a      	strb	r2, [r3, #2]
						offset_output_value[3] = Tempdata[9] - 48;
 8004398:	4b53      	ldr	r3, [pc, #332]	; (80044e8 <main+0x3460>)
 800439a:	7a5b      	ldrb	r3, [r3, #9]
 800439c:	3b30      	subs	r3, #48	; 0x30
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043a4:	70da      	strb	r2, [r3, #3]
						//DAC_offset_output = offset_output_value[0]*1 + offset_output_value[1]*0.1 + offset_output_value[2]*0.01 + offset_output_value[3]*0.001;
						DAC_offset_output = offset_output_value[0]*1000 + offset_output_value[1]*100 + offset_output_value[2]*10 + offset_output_value[3];
 80043a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043b2:	fb03 f202 	mul.w	r2, r3, r2
 80043b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043ba:	785b      	ldrb	r3, [r3, #1]
 80043bc:	4619      	mov	r1, r3
 80043be:	2364      	movs	r3, #100	; 0x64
 80043c0:	fb03 f301 	mul.w	r3, r3, r1
 80043c4:	441a      	add	r2, r3
 80043c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043ca:	789b      	ldrb	r3, [r3, #2]
 80043cc:	4619      	mov	r1, r3
 80043ce:	460b      	mov	r3, r1
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	440b      	add	r3, r1
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80043dc:	78d2      	ldrb	r2, [r2, #3]
 80043de:	4413      	add	r3, r2
 80043e0:	ee07 3a90 	vmov	s15, r3
 80043e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043e8:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80043ec:	edc3 7a00 	vstr	s15, [r3]
 80043f0:	e149      	b.n	8004686 <main+0x35fe>
					}
				}
				else if(Tempdata[4] == 102){
 80043f2:	4b3d      	ldr	r3, [pc, #244]	; (80044e8 <main+0x3460>)
 80043f4:	791b      	ldrb	r3, [r3, #4]
 80043f6:	2b66      	cmp	r3, #102	; 0x66
 80043f8:	d17c      	bne.n	80044f4 <main+0x346c>
					// frequency
					frequency_output_value[0] = Tempdata[6] - 48;
 80043fa:	4b3b      	ldr	r3, [pc, #236]	; (80044e8 <main+0x3460>)
 80043fc:	799b      	ldrb	r3, [r3, #6]
 80043fe:	3b30      	subs	r3, #48	; 0x30
 8004400:	b2da      	uxtb	r2, r3
 8004402:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004406:	701a      	strb	r2, [r3, #0]
					frequency_output_value[1] = Tempdata[7] - 48;
 8004408:	4b37      	ldr	r3, [pc, #220]	; (80044e8 <main+0x3460>)
 800440a:	79db      	ldrb	r3, [r3, #7]
 800440c:	3b30      	subs	r3, #48	; 0x30
 800440e:	b2da      	uxtb	r2, r3
 8004410:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004414:	705a      	strb	r2, [r3, #1]
					frequency_output_value[2] = Tempdata[8] - 48;
 8004416:	4b34      	ldr	r3, [pc, #208]	; (80044e8 <main+0x3460>)
 8004418:	7a1b      	ldrb	r3, [r3, #8]
 800441a:	3b30      	subs	r3, #48	; 0x30
 800441c:	b2da      	uxtb	r2, r3
 800441e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004422:	709a      	strb	r2, [r3, #2]
					frequency_output_value[3] = Tempdata[9] - 48;
 8004424:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <main+0x3460>)
 8004426:	7a5b      	ldrb	r3, [r3, #9]
 8004428:	3b30      	subs	r3, #48	; 0x30
 800442a:	b2da      	uxtb	r2, r3
 800442c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004430:	70da      	strb	r2, [r3, #3]
					DAC_frequency_output = frequency_output_value[0]*1000 + frequency_output_value[1]*100 + frequency_output_value[2]*10 + frequency_output_value[3];
 8004432:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b29b      	uxth	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	0152      	lsls	r2, r2, #5
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	0092      	lsls	r2, r2, #2
 8004442:	4413      	add	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	b29a      	uxth	r2, r3
 8004448:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800444c:	785b      	ldrb	r3, [r3, #1]
 800444e:	b29b      	uxth	r3, r3
 8004450:	4619      	mov	r1, r3
 8004452:	0089      	lsls	r1, r1, #2
 8004454:	440b      	add	r3, r1
 8004456:	4619      	mov	r1, r3
 8004458:	0088      	lsls	r0, r1, #2
 800445a:	4619      	mov	r1, r3
 800445c:	4603      	mov	r3, r0
 800445e:	440b      	add	r3, r1
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	b29b      	uxth	r3, r3
 8004464:	4413      	add	r3, r2
 8004466:	b29a      	uxth	r2, r3
 8004468:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800446c:	789b      	ldrb	r3, [r3, #2]
 800446e:	b29b      	uxth	r3, r3
 8004470:	4619      	mov	r1, r3
 8004472:	0089      	lsls	r1, r1, #2
 8004474:	440b      	add	r3, r1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	b29b      	uxth	r3, r3
 800447a:	4413      	add	r3, r2
 800447c:	b29a      	uxth	r2, r3
 800447e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004482:	78db      	ldrb	r3, [r3, #3]
 8004484:	b29b      	uxth	r3, r3
 8004486:	4413      	add	r3, r2
 8004488:	f8a7 399a 	strh.w	r3, [r7, #2458]	; 0x99a
					//TIM2 -> EGR = ((TIM2->EGR)|0b01);
					TIM2 -> ARR = (72e6/(1000*DAC_frequency_output)) - 1;
 800448c:	f8b7 399a 	ldrh.w	r3, [r7, #2458]	; 0x99a
 8004490:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004494:	fb02 f303 	mul.w	r3, r2, r3
 8004498:	4618      	mov	r0, r3
 800449a:	f7fc f84b 	bl	8000534 <__aeabi_i2d>
 800449e:	4603      	mov	r3, r0
 80044a0:	460c      	mov	r4, r1
 80044a2:	461a      	mov	r2, r3
 80044a4:	4623      	mov	r3, r4
 80044a6:	a10e      	add	r1, pc, #56	; (adr r1, 80044e0 <main+0x3458>)
 80044a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044ac:	f7fc f9d6 	bl	800085c <__aeabi_ddiv>
 80044b0:	4603      	mov	r3, r0
 80044b2:	460c      	mov	r4, r1
 80044b4:	4618      	mov	r0, r3
 80044b6:	4621      	mov	r1, r4
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	4b0c      	ldr	r3, [pc, #48]	; (80044f0 <main+0x3468>)
 80044be:	f7fb feeb 	bl	8000298 <__aeabi_dsub>
 80044c2:	4603      	mov	r3, r0
 80044c4:	460c      	mov	r4, r1
 80044c6:	461a      	mov	r2, r3
 80044c8:	4623      	mov	r3, r4
 80044ca:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80044ce:	4610      	mov	r0, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	f7fc fb5b 	bl	8000b8c <__aeabi_d2uiz>
 80044d6:	4603      	mov	r3, r0
 80044d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044da:	e0d4      	b.n	8004686 <main+0x35fe>
 80044dc:	f3af 8000 	nop.w
 80044e0:	00000000 	.word	0x00000000
 80044e4:	41912a88 	.word	0x41912a88
 80044e8:	20000580 	.word	0x20000580
 80044ec:	200001b0 	.word	0x200001b0
 80044f0:	3ff00000 	.word	0x3ff00000
					//TIM2 -> EGR = ((TIM2->EGR)|0b01);
				}
				else if(signal_p){
 80044f4:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 80c2 	beq.w	8004686 <main+0x35fe>
					if(Tempdata[4] == 100){	 //d
 8004502:	4baa      	ldr	r3, [pc, #680]	; (80047ac <main+0x3724>)
 8004504:	791b      	ldrb	r3, [r3, #4]
 8004506:	2b64      	cmp	r3, #100	; 0x64
 8004508:	d13c      	bne.n	8004584 <main+0x34fc>
						//Duty Cycle
						DefDutyCycle[0] = Tempdata[6] - 48;
 800450a:	4ba8      	ldr	r3, [pc, #672]	; (80047ac <main+0x3724>)
 800450c:	799b      	ldrb	r3, [r3, #6]
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b30      	subs	r3, #48	; 0x30
 8004512:	b29a      	uxth	r2, r3
 8004514:	4ba6      	ldr	r3, [pc, #664]	; (80047b0 <main+0x3728>)
 8004516:	801a      	strh	r2, [r3, #0]
						DefDutyCycle[1] = Tempdata[7] - 48;
 8004518:	4ba4      	ldr	r3, [pc, #656]	; (80047ac <main+0x3724>)
 800451a:	79db      	ldrb	r3, [r3, #7]
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b30      	subs	r3, #48	; 0x30
 8004520:	b29a      	uxth	r2, r3
 8004522:	4ba3      	ldr	r3, [pc, #652]	; (80047b0 <main+0x3728>)
 8004524:	805a      	strh	r2, [r3, #2]
						DefDutyCycle[2] = Tempdata[8] - 48;
 8004526:	4ba1      	ldr	r3, [pc, #644]	; (80047ac <main+0x3724>)
 8004528:	7a1b      	ldrb	r3, [r3, #8]
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b30      	subs	r3, #48	; 0x30
 800452e:	b29a      	uxth	r2, r3
 8004530:	4b9f      	ldr	r3, [pc, #636]	; (80047b0 <main+0x3728>)
 8004532:	809a      	strh	r2, [r3, #4]
						DefDutyCycle[3] = Tempdata[9] - 48;
 8004534:	4b9d      	ldr	r3, [pc, #628]	; (80047ac <main+0x3724>)
 8004536:	7a5b      	ldrb	r3, [r3, #9]
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b30      	subs	r3, #48	; 0x30
 800453c:	b29a      	uxth	r2, r3
 800453e:	4b9c      	ldr	r3, [pc, #624]	; (80047b0 <main+0x3728>)
 8004540:	80da      	strh	r2, [r3, #6]
						DutyCycle = DefDutyCycle[0]*1000 + DefDutyCycle[1]*100 + DefDutyCycle[2]*10 + DefDutyCycle[3];
 8004542:	4b9b      	ldr	r3, [pc, #620]	; (80047b0 <main+0x3728>)
 8004544:	881b      	ldrh	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800454c:	fb03 f202 	mul.w	r2, r3, r2
 8004550:	4b97      	ldr	r3, [pc, #604]	; (80047b0 <main+0x3728>)
 8004552:	885b      	ldrh	r3, [r3, #2]
 8004554:	4619      	mov	r1, r3
 8004556:	2364      	movs	r3, #100	; 0x64
 8004558:	fb03 f301 	mul.w	r3, r3, r1
 800455c:	441a      	add	r2, r3
 800455e:	4b94      	ldr	r3, [pc, #592]	; (80047b0 <main+0x3728>)
 8004560:	889b      	ldrh	r3, [r3, #4]
 8004562:	4619      	mov	r1, r3
 8004564:	460b      	mov	r3, r1
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	440b      	add	r3, r1
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	4a90      	ldr	r2, [pc, #576]	; (80047b0 <main+0x3728>)
 8004570:	88d2      	ldrh	r2, [r2, #6]
 8004572:	4413      	add	r3, r2
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800457c:	4b8d      	ldr	r3, [pc, #564]	; (80047b4 <main+0x372c>)
 800457e:	edc3 7a00 	vstr	s15, [r3]
 8004582:	e080      	b.n	8004686 <main+0x35fe>
					}
					else if (Tempdata[4] == 'a'){
 8004584:	4b89      	ldr	r3, [pc, #548]	; (80047ac <main+0x3724>)
 8004586:	791b      	ldrb	r3, [r3, #4]
 8004588:	2b61      	cmp	r3, #97	; 0x61
 800458a:	d13c      	bne.n	8004606 <main+0x357e>
						//Amplitude_pulse
						DefAmpPulse[0] = Tempdata[6] - 48;
 800458c:	4b87      	ldr	r3, [pc, #540]	; (80047ac <main+0x3724>)
 800458e:	799b      	ldrb	r3, [r3, #6]
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b30      	subs	r3, #48	; 0x30
 8004594:	b29a      	uxth	r2, r3
 8004596:	4b88      	ldr	r3, [pc, #544]	; (80047b8 <main+0x3730>)
 8004598:	801a      	strh	r2, [r3, #0]
						DefAmpPulse[1] = Tempdata[7] - 48;
 800459a:	4b84      	ldr	r3, [pc, #528]	; (80047ac <main+0x3724>)
 800459c:	79db      	ldrb	r3, [r3, #7]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b30      	subs	r3, #48	; 0x30
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	4b84      	ldr	r3, [pc, #528]	; (80047b8 <main+0x3730>)
 80045a6:	805a      	strh	r2, [r3, #2]
						DefAmpPulse[2] = Tempdata[8] - 48;
 80045a8:	4b80      	ldr	r3, [pc, #512]	; (80047ac <main+0x3724>)
 80045aa:	7a1b      	ldrb	r3, [r3, #8]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b30      	subs	r3, #48	; 0x30
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	4b81      	ldr	r3, [pc, #516]	; (80047b8 <main+0x3730>)
 80045b4:	809a      	strh	r2, [r3, #4]
						DefAmpPulse[3] = Tempdata[9] - 48;
 80045b6:	4b7d      	ldr	r3, [pc, #500]	; (80047ac <main+0x3724>)
 80045b8:	7a5b      	ldrb	r3, [r3, #9]
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b30      	subs	r3, #48	; 0x30
 80045be:	b29a      	uxth	r2, r3
 80045c0:	4b7d      	ldr	r3, [pc, #500]	; (80047b8 <main+0x3730>)
 80045c2:	80da      	strh	r2, [r3, #6]
						Amplitude_pulse = DefAmpPulse[0]*1000 + DefAmpPulse[1]*100 + DefAmpPulse[2]*10 + DefAmpPulse[3];
 80045c4:	4b7c      	ldr	r3, [pc, #496]	; (80047b8 <main+0x3730>)
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	461a      	mov	r2, r3
 80045ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ce:	fb03 f202 	mul.w	r2, r3, r2
 80045d2:	4b79      	ldr	r3, [pc, #484]	; (80047b8 <main+0x3730>)
 80045d4:	885b      	ldrh	r3, [r3, #2]
 80045d6:	4619      	mov	r1, r3
 80045d8:	2364      	movs	r3, #100	; 0x64
 80045da:	fb03 f301 	mul.w	r3, r3, r1
 80045de:	441a      	add	r2, r3
 80045e0:	4b75      	ldr	r3, [pc, #468]	; (80047b8 <main+0x3730>)
 80045e2:	889b      	ldrh	r3, [r3, #4]
 80045e4:	4619      	mov	r1, r3
 80045e6:	460b      	mov	r3, r1
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	4413      	add	r3, r2
 80045f0:	4a71      	ldr	r2, [pc, #452]	; (80047b8 <main+0x3730>)
 80045f2:	88d2      	ldrh	r2, [r2, #6]
 80045f4:	4413      	add	r3, r2
 80045f6:	ee07 3a90 	vmov	s15, r3
 80045fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045fe:	4b6f      	ldr	r3, [pc, #444]	; (80047bc <main+0x3734>)
 8004600:	edc3 7a00 	vstr	s15, [r3]
 8004604:	e03f      	b.n	8004686 <main+0x35fe>
					}
					else if (Tempdata[4] == 'o') {
 8004606:	4b69      	ldr	r3, [pc, #420]	; (80047ac <main+0x3724>)
 8004608:	791b      	ldrb	r3, [r3, #4]
 800460a:	2b6f      	cmp	r3, #111	; 0x6f
 800460c:	d13b      	bne.n	8004686 <main+0x35fe>
						//Offset_pulse
						DefOffsetPulse[0] = Tempdata[6] - 48;
 800460e:	4b67      	ldr	r3, [pc, #412]	; (80047ac <main+0x3724>)
 8004610:	799b      	ldrb	r3, [r3, #6]
 8004612:	b29b      	uxth	r3, r3
 8004614:	3b30      	subs	r3, #48	; 0x30
 8004616:	b29a      	uxth	r2, r3
 8004618:	4b69      	ldr	r3, [pc, #420]	; (80047c0 <main+0x3738>)
 800461a:	801a      	strh	r2, [r3, #0]
						DefOffsetPulse[1] = Tempdata[7] - 48;
 800461c:	4b63      	ldr	r3, [pc, #396]	; (80047ac <main+0x3724>)
 800461e:	79db      	ldrb	r3, [r3, #7]
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b30      	subs	r3, #48	; 0x30
 8004624:	b29a      	uxth	r2, r3
 8004626:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <main+0x3738>)
 8004628:	805a      	strh	r2, [r3, #2]
						DefOffsetPulse[2] = Tempdata[8] - 48;
 800462a:	4b60      	ldr	r3, [pc, #384]	; (80047ac <main+0x3724>)
 800462c:	7a1b      	ldrb	r3, [r3, #8]
 800462e:	b29b      	uxth	r3, r3
 8004630:	3b30      	subs	r3, #48	; 0x30
 8004632:	b29a      	uxth	r2, r3
 8004634:	4b62      	ldr	r3, [pc, #392]	; (80047c0 <main+0x3738>)
 8004636:	809a      	strh	r2, [r3, #4]
						DefOffsetPulse[3] = Tempdata[9] - 48;
 8004638:	4b5c      	ldr	r3, [pc, #368]	; (80047ac <main+0x3724>)
 800463a:	7a5b      	ldrb	r3, [r3, #9]
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b30      	subs	r3, #48	; 0x30
 8004640:	b29a      	uxth	r2, r3
 8004642:	4b5f      	ldr	r3, [pc, #380]	; (80047c0 <main+0x3738>)
 8004644:	80da      	strh	r2, [r3, #6]
						Offset_pulse = DefOffsetPulse[0]*1000 + DefOffsetPulse[1]*100 + DefOffsetPulse[2]*10 + DefOffsetPulse[3];
 8004646:	4b5e      	ldr	r3, [pc, #376]	; (80047c0 <main+0x3738>)
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	461a      	mov	r2, r3
 800464c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004650:	fb03 f202 	mul.w	r2, r3, r2
 8004654:	4b5a      	ldr	r3, [pc, #360]	; (80047c0 <main+0x3738>)
 8004656:	885b      	ldrh	r3, [r3, #2]
 8004658:	4619      	mov	r1, r3
 800465a:	2364      	movs	r3, #100	; 0x64
 800465c:	fb03 f301 	mul.w	r3, r3, r1
 8004660:	441a      	add	r2, r3
 8004662:	4b57      	ldr	r3, [pc, #348]	; (80047c0 <main+0x3738>)
 8004664:	889b      	ldrh	r3, [r3, #4]
 8004666:	4619      	mov	r1, r3
 8004668:	460b      	mov	r3, r1
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	4413      	add	r3, r2
 8004672:	4a53      	ldr	r2, [pc, #332]	; (80047c0 <main+0x3738>)
 8004674:	88d2      	ldrh	r2, [r2, #6]
 8004676:	4413      	add	r3, r2
 8004678:	ee07 3a90 	vmov	s15, r3
 800467c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004680:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <main+0x373c>)
 8004682:	edc3 7a00 	vstr	s15, [r3]



				}

				flag = 0;
 8004686:	4b50      	ldr	r3, [pc, #320]	; (80047c8 <main+0x3740>)
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
 800468c:	e143      	b.n	8004916 <main+0x388e>
			}


			else if(Tempdata[2] == 42){ //*
 800468e:	4b47      	ldr	r3, [pc, #284]	; (80047ac <main+0x3724>)
 8004690:	789b      	ldrb	r3, [r3, #2]
 8004692:	2b2a      	cmp	r3, #42	; 0x2a
 8004694:	f040 813f 	bne.w	8004916 <main+0x388e>
				if(Tempdata[4] == 115){ //s
 8004698:	4b44      	ldr	r3, [pc, #272]	; (80047ac <main+0x3724>)
 800469a:	791b      	ldrb	r3, [r3, #4]
 800469c:	2b73      	cmp	r3, #115	; 0x73
 800469e:	f040 809f 	bne.w	80047e0 <main+0x3758>
					//request status
					send_status[0] = 64; //@
 80046a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046a6:	2240      	movs	r2, #64	; 0x40
 80046a8:	701a      	strb	r2, [r3, #0]
					send_status[1] = 44; //,
 80046aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046ae:	222c      	movs	r2, #44	; 0x2c
 80046b0:	705a      	strb	r2, [r3, #1]
					if(DC_measure){
 80046b2:	f897 39c7 	ldrb.w	r3, [r7, #2503]	; 0x9c7
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00c      	beq.n	80046d4 <main+0x364c>

						send_status[2] = 68; //D
 80046ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046be:	2244      	movs	r2, #68	; 0x44
 80046c0:	709a      	strb	r2, [r3, #2]
						send_status[3] = 86; //V
 80046c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046c6:	2256      	movs	r2, #86	; 0x56
 80046c8:	70da      	strb	r2, [r3, #3]
						send_status[4] = 44; //,
 80046ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046ce:	222c      	movs	r2, #44	; 0x2c
 80046d0:	711a      	strb	r2, [r3, #4]
 80046d2:	e00f      	b.n	80046f4 <main+0x366c>
						//send_status[5] = 100; //d
					}
					else if(AC_measure){
 80046d4:	f8b7 39c4 	ldrh.w	r3, [r7, #2500]	; 0x9c4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00b      	beq.n	80046f4 <main+0x366c>
						send_status[2] = 65; //A
 80046dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046e0:	2241      	movs	r2, #65	; 0x41
 80046e2:	709a      	strb	r2, [r3, #2]
						send_status[3] = 86; //V
 80046e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046e8:	2256      	movs	r2, #86	; 0x56
 80046ea:	70da      	strb	r2, [r3, #3]
						send_status[4] = 44; //,
 80046ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80046f0:	222c      	movs	r2, #44	; 0x2c
 80046f2:	711a      	strb	r2, [r3, #4]
						//send_status[5] = 115; //s

					}
					if(signal_s){
 80046f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d004      	beq.n	800470a <main+0x3682>

						send_status[5] = 115;
 8004700:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004704:	2273      	movs	r2, #115	; 0x73
 8004706:	715a      	strb	r2, [r3, #5]
 8004708:	e009      	b.n	800471e <main+0x3696>

					}
					else if(signal_d){
 800470a:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <main+0x3696>

						send_status[5] = 100;
 8004716:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800471a:	2264      	movs	r2, #100	; 0x64
 800471c:	715a      	strb	r2, [r3, #5]
					}
					send_status[6] = 44; //,
 800471e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004722:	222c      	movs	r2, #44	; 0x2c
 8004724:	719a      	strb	r2, [r3, #6]
					if(Tempdata[6] == 48){ //0
 8004726:	4b21      	ldr	r3, [pc, #132]	; (80047ac <main+0x3724>)
 8004728:	799b      	ldrb	r3, [r3, #6]
 800472a:	2b30      	cmp	r3, #48	; 0x30
 800472c:	d104      	bne.n	8004738 <main+0x36b0>
						send_status[7] = 48; //0
 800472e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004732:	2230      	movs	r2, #48	; 0x30
 8004734:	71da      	strb	r2, [r3, #7]
 8004736:	e007      	b.n	8004748 <main+0x36c0>
					}
					else if(Tempdata[6] == 49){ //1
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <main+0x3724>)
 800473a:	799b      	ldrb	r3, [r3, #6]
 800473c:	2b31      	cmp	r3, #49	; 0x31
 800473e:	d103      	bne.n	8004748 <main+0x36c0>
						send_status[7] = 49; //1
 8004740:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004744:	2231      	movs	r2, #49	; 0x31
 8004746:	71da      	strb	r2, [r3, #7]
					}

					send_status[8] = 44; //,
 8004748:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800474c:	222c      	movs	r2, #44	; 0x2c
 800474e:	721a      	strb	r2, [r3, #8]
					send_status[9] = 33; //!
 8004750:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004754:	2221      	movs	r2, #33	; 0x21
 8004756:	725a      	strb	r2, [r3, #9]
					send_status[10] = 10; //\n
 8004758:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800475c:	220a      	movs	r2, #10
 800475e:	729a      	strb	r2, [r3, #10]

					HAL_UART_Transmit(&huart2, send_status, 11, 50);
 8004760:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8004764:	2332      	movs	r3, #50	; 0x32
 8004766:	220b      	movs	r2, #11
 8004768:	4818      	ldr	r0, [pc, #96]	; (80047cc <main+0x3744>)
 800476a:	f007 f873 	bl	800b854 <HAL_UART_Transmit>



					if(Tempdata[6] == 48){ //0
 800476e:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <main+0x3724>)
 8004770:	799b      	ldrb	r3, [r3, #6]
 8004772:	2b30      	cmp	r3, #48	; 0x30
 8004774:	d10a      	bne.n	800478c <main+0x3704>
						//output off
						output = 0;
 8004776:	4b16      	ldr	r3, [pc, #88]	; (80047d0 <main+0x3748>)
 8004778:	2200      	movs	r2, #0
 800477a:	701a      	strb	r2, [r3, #0]
						//stop AC DAC
						HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800477c:	2100      	movs	r1, #0
 800477e:	4815      	ldr	r0, [pc, #84]	; (80047d4 <main+0x374c>)
 8004780:	f003 fbaa 	bl	8007ed8 <HAL_DAC_Stop_DMA>
						// stop DC DAC
						HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
 8004784:	2100      	movs	r1, #0
 8004786:	4813      	ldr	r0, [pc, #76]	; (80047d4 <main+0x374c>)
 8004788:	f003 fb8b 	bl	8007ea2 <HAL_DAC_Stop>
					}
					if(Tempdata[6] == 49){ //1
 800478c:	4b07      	ldr	r3, [pc, #28]	; (80047ac <main+0x3724>)
 800478e:	799b      	ldrb	r3, [r3, #6]
 8004790:	2b31      	cmp	r3, #49	; 0x31
 8004792:	f040 80bd 	bne.w	8004910 <main+0x3888>
						// output on
						output = 1;
 8004796:	4b0e      	ldr	r3, [pc, #56]	; (80047d0 <main+0x3748>)
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
						//Lcd_clear(&lcd);
						menu_mode = 0;
 800479c:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <main+0x3750>)
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
						measurment_mode =0;
 80047a2:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <main+0x3754>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e0b2      	b.n	8004910 <main+0x3888>
 80047aa:	bf00      	nop
 80047ac:	20000580 	.word	0x20000580
 80047b0:	20001534 	.word	0x20001534
 80047b4:	20000014 	.word	0x20000014
 80047b8:	200001c8 	.word	0x200001c8
 80047bc:	20000018 	.word	0x20000018
 80047c0:	200000e4 	.word	0x200000e4
 80047c4:	2000001c 	.word	0x2000001c
 80047c8:	200001c4 	.word	0x200001c4
 80047cc:	200015fc 	.word	0x200015fc
 80047d0:	200000cc 	.word	0x200000cc
 80047d4:	200001b0 	.word	0x200001b0
 80047d8:	200000c9 	.word	0x200000c9
 80047dc:	2000000f 	.word	0x2000000f
					}
				}
				else if(Tempdata[4] == 109){ //m
 80047e0:	4bcc      	ldr	r3, [pc, #816]	; (8004b14 <main+0x3a8c>)
 80047e2:	791b      	ldrb	r3, [r3, #4]
 80047e4:	2b6d      	cmp	r3, #109	; 0x6d
 80047e6:	f040 8093 	bne.w	8004910 <main+0x3888>
					// request measurement

					send_measurment = 1;
 80047ea:	4bcb      	ldr	r3, [pc, #812]	; (8004b18 <main+0x3a90>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	701a      	strb	r2, [r3, #0]


					if(Tempdata[6] == 116){ //t
 80047f0:	4bc8      	ldr	r3, [pc, #800]	; (8004b14 <main+0x3a8c>)
 80047f2:	799b      	ldrb	r3, [r3, #6]
 80047f4:	2b74      	cmp	r3, #116	; 0x74
 80047f6:	d118      	bne.n	800482a <main+0x37a2>
						//type
						parameter_t = 1;
 80047f8:	f107 0363 	add.w	r3, r7, #99	; 0x63
 80047fc:	2201      	movs	r2, #1
 80047fe:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 8004800:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8004804:	2200      	movs	r2, #0
 8004806:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 8004808:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 8004810:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8004814:	2200      	movs	r2, #0
 8004816:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 8004818:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 8004820:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004824:	2200      	movs	r2, #0
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	e072      	b.n	8004910 <main+0x3888>

					}
					else if(Tempdata[6] == 97){ //a
 800482a:	4bba      	ldr	r3, [pc, #744]	; (8004b14 <main+0x3a8c>)
 800482c:	799b      	ldrb	r3, [r3, #6]
 800482e:	2b61      	cmp	r3, #97	; 0x61
 8004830:	d118      	bne.n	8004864 <main+0x37dc>
						// Amplitude
						parameter_a = 1;
 8004832:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 800483a:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 800483e:	2200      	movs	r2, #0
 8004840:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 8004842:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8004846:	2200      	movs	r2, #0
 8004848:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 800484a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 8004852:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 800485a:	f107 0363 	add.w	r3, r7, #99	; 0x63
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	e055      	b.n	8004910 <main+0x3888>
					}
					else if(Tempdata[6] == 111){ //o
 8004864:	4bab      	ldr	r3, [pc, #684]	; (8004b14 <main+0x3a8c>)
 8004866:	799b      	ldrb	r3, [r3, #6]
 8004868:	2b6f      	cmp	r3, #111	; 0x6f
 800486a:	d118      	bne.n	800489e <main+0x3816>
						//offset
						parameter_o = 1;
 800486c:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004870:	2201      	movs	r2, #1
 8004872:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 8004874:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 800487c:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 8004884:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 800488c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 8004894:	f107 0363 	add.w	r3, r7, #99	; 0x63
 8004898:	2200      	movs	r2, #0
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e038      	b.n	8004910 <main+0x3888>
					}
					else if(Tempdata[6] == 102){ //f
 800489e:	4b9d      	ldr	r3, [pc, #628]	; (8004b14 <main+0x3a8c>)
 80048a0:	799b      	ldrb	r3, [r3, #6]
 80048a2:	2b66      	cmp	r3, #102	; 0x66
 80048a4:	d118      	bne.n	80048d8 <main+0x3850>
						// frequency
						parameter_f = 1;
 80048a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 80048ae:	f107 0362 	add.w	r3, r7, #98	; 0x62
 80048b2:	2200      	movs	r2, #0
 80048b4:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 80048b6:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
						parameter_d = 0;
 80048be:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 80048c6:	f107 0361 	add.w	r3, r7, #97	; 0x61
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 80048ce:	f107 0363 	add.w	r3, r7, #99	; 0x63
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e01b      	b.n	8004910 <main+0x3888>
					}
					else if(Tempdata[6] == 100){ //d
 80048d8:	4b8e      	ldr	r3, [pc, #568]	; (8004b14 <main+0x3a8c>)
 80048da:	799b      	ldrb	r3, [r3, #6]
 80048dc:	2b64      	cmp	r3, #100	; 0x64
 80048de:	d117      	bne.n	8004910 <main+0x3888>
						//Duty Cycle
						parameter_d = 1;
 80048e0:	f107 035f 	add.w	r3, r7, #95	; 0x5f
 80048e4:	2201      	movs	r2, #1
 80048e6:	701a      	strb	r2, [r3, #0]
						parameter_a = 0;
 80048e8:	f107 0362 	add.w	r3, r7, #98	; 0x62
 80048ec:	2200      	movs	r2, #0
 80048ee:	701a      	strb	r2, [r3, #0]
						parameter_c = 0;
 80048f0:	f107 035e 	add.w	r3, r7, #94	; 0x5e
 80048f4:	2200      	movs	r2, #0
 80048f6:	701a      	strb	r2, [r3, #0]
						parameter_f = 0;
 80048f8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
						parameter_o = 0;
 8004900:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]
						parameter_t = 0;
 8004908:	f107 0363 	add.w	r3, r7, #99	; 0x63
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
					}
				}
				flag = 0;
 8004910:	4b82      	ldr	r3, [pc, #520]	; (8004b1c <main+0x3a94>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]




		// Handles DC and AC measurements based on timer interrupt//////////////
		if(DC_measure && timer_interrupt && measurment_mode){
 8004916:	f897 39c7 	ldrb.w	r3, [r7, #2503]	; 0x9c7
 800491a:	2b00      	cmp	r3, #0
 800491c:	f000 80e1 	beq.w	8004ae2 <main+0x3a5a>
 8004920:	4b7f      	ldr	r3, [pc, #508]	; (8004b20 <main+0x3a98>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f000 80dc 	beq.w	8004ae2 <main+0x3a5a>
 800492a:	4b7e      	ldr	r3, [pc, #504]	; (8004b24 <main+0x3a9c>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 80d7 	beq.w	8004ae2 <main+0x3a5a>

			if(DCidx > 99){
 8004934:	f897 39c6 	ldrb.w	r3, [r7, #2502]	; 0x9c6
 8004938:	2b63      	cmp	r3, #99	; 0x63
 800493a:	f240 80a6 	bls.w	8004a8a <main+0x3a02>

				for(uint8_t c = 0; c<100;c++){
 800493e:	2300      	movs	r3, #0
 8004940:	f887 398d 	strb.w	r3, [r7, #2445]	; 0x98d
 8004944:	e010      	b.n	8004968 <main+0x38e0>
					DC_CS = DC_CS + DC_value[c];
 8004946:	f897 298d 	ldrb.w	r2, [r7, #2445]	; 0x98d
 800494a:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 800494e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004952:	461a      	mov	r2, r3
 8004954:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 8004958:	4413      	add	r3, r2
 800495a:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
				for(uint8_t c = 0; c<100;c++){
 800495e:	f897 398d 	ldrb.w	r3, [r7, #2445]	; 0x98d
 8004962:	3301      	adds	r3, #1
 8004964:	f887 398d 	strb.w	r3, [r7, #2445]	; 0x98d
 8004968:	f897 398d 	ldrb.w	r3, [r7, #2445]	; 0x98d
 800496c:	2b63      	cmp	r3, #99	; 0x63
 800496e:	d9ea      	bls.n	8004946 <main+0x38be>
				}

				DC_avg = DC_CS/100;
 8004970:	f8d7 39bc 	ldr.w	r3, [r7, #2492]	; 0x9bc
 8004974:	4a6c      	ldr	r2, [pc, #432]	; (8004b28 <main+0x3aa0>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f8a7 397a 	strh.w	r3, [r7, #2426]	; 0x97a

				DC_CS = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	f8c7 39bc 	str.w	r3, [r7, #2492]	; 0x9bc
				DCidx = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	f887 39c6 	strb.w	r3, [r7, #2502]	; 0x9c6


				scaled_dc_avg = (DC_avg*3300)/(2800);
 800498c:	f8b7 397a 	ldrh.w	r3, [r7, #2426]	; 0x97a
 8004990:	f640 42e4 	movw	r2, #3300	; 0xce4
 8004994:	fb02 f303 	mul.w	r3, r2, r3
 8004998:	4a64      	ldr	r2, [pc, #400]	; (8004b2c <main+0x3aa4>)
 800499a:	fb82 1203 	smull	r1, r2, r2, r3
 800499e:	1292      	asrs	r2, r2, #10
 80049a0:	17db      	asrs	r3, r3, #31
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	f8a7 3978 	strh.w	r3, [r7, #2424]	; 0x978


				//// ASSIGN values to uart array but dont send /////
				DC_disp_offset[0] = 0x40;
 80049a8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80049ac:	2240      	movs	r2, #64	; 0x40
 80049ae:	701a      	strb	r2, [r3, #0]
				DC_disp_offset[1] = 44;
 80049b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80049b4:	222c      	movs	r2, #44	; 0x2c
 80049b6:	705a      	strb	r2, [r3, #1]
				DC_disp_offset[2] = 109;
 80049b8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80049bc:	226d      	movs	r2, #109	; 0x6d
 80049be:	709a      	strb	r2, [r3, #2]
				DC_disp_offset[3] = 44;
 80049c0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80049c4:	222c      	movs	r2, #44	; 0x2c
 80049c6:	70da      	strb	r2, [r3, #3]
				DC_disp_offset[4] = 111;//o
 80049c8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80049cc:	226f      	movs	r2, #111	; 0x6f
 80049ce:	711a      	strb	r2, [r3, #4]
				DC_disp_offset[5] = 44;//,
 80049d0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80049d4:	222c      	movs	r2, #44	; 0x2c
 80049d6:	715a      	strb	r2, [r3, #5]
				DC_disp_offset[6] = (scaled_dc_avg/1000) + 48;
 80049d8:	f8b7 3978 	ldrh.w	r3, [r7, #2424]	; 0x978
 80049dc:	4a54      	ldr	r2, [pc, #336]	; (8004b30 <main+0x3aa8>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	3330      	adds	r3, #48	; 0x30
 80049ea:	b2da      	uxtb	r2, r3
 80049ec:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80049f0:	719a      	strb	r2, [r3, #6]
				DC_disp_offset[7] = (scaled_dc_avg/100) % 10 + 48;
 80049f2:	f8b7 3978 	ldrh.w	r3, [r7, #2424]	; 0x978
 80049f6:	4a4c      	ldr	r2, [pc, #304]	; (8004b28 <main+0x3aa0>)
 80049f8:	fba2 2303 	umull	r2, r3, r2, r3
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	4b4c      	ldr	r3, [pc, #304]	; (8004b34 <main+0x3aac>)
 8004a02:	fba3 1302 	umull	r1, r3, r3, r2
 8004a06:	08d9      	lsrs	r1, r3, #3
 8004a08:	460b      	mov	r3, r1
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	440b      	add	r3, r1
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	3330      	adds	r3, #48	; 0x30
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004a1e:	71da      	strb	r2, [r3, #7]
				DC_disp_offset[8] = (scaled_dc_avg/10) % 10 + 48;
 8004a20:	f8b7 3978 	ldrh.w	r3, [r7, #2424]	; 0x978
 8004a24:	4a43      	ldr	r2, [pc, #268]	; (8004b34 <main+0x3aac>)
 8004a26:	fba2 2303 	umull	r2, r3, r2, r3
 8004a2a:	08db      	lsrs	r3, r3, #3
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	4b41      	ldr	r3, [pc, #260]	; (8004b34 <main+0x3aac>)
 8004a30:	fba3 1302 	umull	r1, r3, r3, r2
 8004a34:	08d9      	lsrs	r1, r3, #3
 8004a36:	460b      	mov	r3, r1
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3330      	adds	r3, #48	; 0x30
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004a4c:	721a      	strb	r2, [r3, #8]
				DC_disp_offset[9] = (scaled_dc_avg/1) % 10 + 48;
 8004a4e:	f8b7 2978 	ldrh.w	r2, [r7, #2424]	; 0x978
 8004a52:	4b38      	ldr	r3, [pc, #224]	; (8004b34 <main+0x3aac>)
 8004a54:	fba3 1302 	umull	r1, r3, r3, r2
 8004a58:	08d9      	lsrs	r1, r3, #3
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	3330      	adds	r3, #48	; 0x30
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004a70:	725a      	strb	r2, [r3, #9]
				DC_disp_offset[10] = 44;//,
 8004a72:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004a76:	222c      	movs	r2, #44	; 0x2c
 8004a78:	729a      	strb	r2, [r3, #10]
				DC_disp_offset[11] = 33;//!
 8004a7a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004a7e:	2221      	movs	r2, #33	; 0x21
 8004a80:	72da      	strb	r2, [r3, #11]
				DC_disp_offset[12] = 10;//\n
 8004a82:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8004a86:	220a      	movs	r2, #10
 8004a88:	731a      	strb	r2, [r3, #12]
				//				Lcd_string(&lcd, "V");


			}

			if(send_measurment == 1){
 8004a8a:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <main+0x3a90>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d109      	bne.n	8004aa6 <main+0x3a1e>
				HAL_UART_Transmit(&huart2, DC_disp_offset, 13, 50);
 8004a92:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8004a96:	2332      	movs	r3, #50	; 0x32
 8004a98:	220d      	movs	r2, #13
 8004a9a:	4827      	ldr	r0, [pc, #156]	; (8004b38 <main+0x3ab0>)
 8004a9c:	f006 feda 	bl	800b854 <HAL_UART_Transmit>
				send_measurment = 0;
 8004aa0:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <main+0x3a90>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]

			}
			HAL_ADC_Start(&hadc3);
 8004aa6:	4825      	ldr	r0, [pc, #148]	; (8004b3c <main+0x3ab4>)
 8004aa8:	f001 fddc 	bl	8006664 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc3, 20);
 8004aac:	2114      	movs	r1, #20
 8004aae:	4823      	ldr	r0, [pc, #140]	; (8004b3c <main+0x3ab4>)
 8004ab0:	f001 ff24 	bl	80068fc <HAL_ADC_PollForConversion>
			DC_value[DCidx] = HAL_ADC_GetValue(&hadc3);
 8004ab4:	4821      	ldr	r0, [pc, #132]	; (8004b3c <main+0x3ab4>)
 8004ab6:	f002 f823 	bl	8006b00 <HAL_ADC_GetValue>
 8004aba:	4603      	mov	r3, r0
 8004abc:	f897 29c6 	ldrb.w	r2, [r7, #2502]	; 0x9c6
 8004ac0:	b299      	uxth	r1, r3
 8004ac2:	f607 03a8 	addw	r3, r7, #2216	; 0x8a8
 8004ac6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			HAL_ADC_Stop(&hadc3);
 8004aca:	481c      	ldr	r0, [pc, #112]	; (8004b3c <main+0x3ab4>)
 8004acc:	f001 fee0 	bl	8006890 <HAL_ADC_Stop>
			DCidx ++ ;
 8004ad0:	f897 39c6 	ldrb.w	r3, [r7, #2502]	; 0x9c6
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	f887 39c6 	strb.w	r3, [r7, #2502]	; 0x9c6
			timer_interrupt = 0;
 8004ada:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <main+0x3a98>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	e2d5      	b.n	800508e <main+0x4006>

			//DC_measure = 0;

		}

		else if(AC_measure && timer_interrupt && measurment_mode){
 8004ae2:	f8b7 39c4 	ldrh.w	r3, [r7, #2500]	; 0x9c4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 82d1 	beq.w	800508e <main+0x4006>
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <main+0x3a98>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 82cc 	beq.w	800508e <main+0x4006>
 8004af6:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <main+0x3a9c>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 82c7 	beq.w	800508e <main+0x4006>

			if(ACidx > 999){
 8004b00:	f8b7 39c2 	ldrh.w	r3, [r7, #2498]	; 0x9c2
 8004b04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b08:	f0c0 8254 	bcc.w	8004fb4 <main+0x3f2c>

				for(uint16_t c = 0; c<1000;c++){
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f8a7 398a 	strh.w	r3, [r7, #2442]	; 0x98a
 8004b12:	e026      	b.n	8004b62 <main+0x3ada>
 8004b14:	20000580 	.word	0x20000580
 8004b18:	20001683 	.word	0x20001683
 8004b1c:	200001c4 	.word	0x200001c4
 8004b20:	2000168c 	.word	0x2000168c
 8004b24:	2000000f 	.word	0x2000000f
 8004b28:	51eb851f 	.word	0x51eb851f
 8004b2c:	5d9f7391 	.word	0x5d9f7391
 8004b30:	10624dd3 	.word	0x10624dd3
 8004b34:	cccccccd 	.word	0xcccccccd
 8004b38:	200015fc 	.word	0x200015fc
 8004b3c:	200002dc 	.word	0x200002dc
					AC_CS = AC_CS + AC_value[c];
 8004b40:	f8b7 298a 	ldrh.w	r2, [r7, #2442]	; 0x98a
 8004b44:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004b48:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 8004b52:	4413      	add	r3, r2
 8004b54:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
				for(uint16_t c = 0; c<1000;c++){
 8004b58:	f8b7 398a 	ldrh.w	r3, [r7, #2442]	; 0x98a
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f8a7 398a 	strh.w	r3, [r7, #2442]	; 0x98a
 8004b62:	f8b7 398a 	ldrh.w	r3, [r7, #2442]	; 0x98a
 8004b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b6a:	d3e9      	bcc.n	8004b40 <main+0x3ab8>
				}
				AC_avg = (AC_CS/1000)*0.95;
 8004b6c:	f8d7 39b8 	ldr.w	r3, [r7, #2488]	; 0x9b8
 8004b70:	4a43      	ldr	r2, [pc, #268]	; (8004c80 <main+0x3bf8>)
 8004b72:	fba2 2303 	umull	r2, r3, r2, r3
 8004b76:	099b      	lsrs	r3, r3, #6
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fb fccb 	bl	8000514 <__aeabi_ui2d>
 8004b7e:	a33c      	add	r3, pc, #240	; (adr r3, 8004c70 <main+0x3be8>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb fd40 	bl	8000608 <__aeabi_dmul>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	460c      	mov	r4, r1
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	4621      	mov	r1, r4
 8004b90:	f7fb fffc 	bl	8000b8c <__aeabi_d2uiz>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f8a7 3976 	strh.w	r3, [r7, #2422]	; 0x976
				AC_CS = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 39b8 	str.w	r3, [r7, #2488]	; 0x9b8
				ACidx = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f8a7 39c2 	strh.w	r3, [r7, #2498]	; 0x9c2
				AC_max = AC_value[0];
 8004ba6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004baa:	881b      	ldrh	r3, [r3, #0]
 8004bac:	f8a7 39b6 	strh.w	r3, [r7, #2486]	; 0x9b6
				for( uint16_t q = 0; q < 999; q ++){
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8a7 3988 	strh.w	r3, [r7, #2440]	; 0x988
 8004bb6:	e018      	b.n	8004bea <main+0x3b62>
					if(AC_value[q+1] > AC_max){
 8004bb8:	f8b7 3988 	ldrh.w	r3, [r7, #2440]	; 0x988
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004bc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004bc6:	f8b7 29b6 	ldrh.w	r2, [r7, #2486]	; 0x9b6
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d208      	bcs.n	8004be0 <main+0x3b58>
						AC_max = AC_value[q+1];
 8004bce:	f8b7 3988 	ldrh.w	r3, [r7, #2440]	; 0x988
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004bd8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004bdc:	f8a7 39b6 	strh.w	r3, [r7, #2486]	; 0x9b6
				for( uint16_t q = 0; q < 999; q ++){
 8004be0:	f8b7 3988 	ldrh.w	r3, [r7, #2440]	; 0x988
 8004be4:	3301      	adds	r3, #1
 8004be6:	f8a7 3988 	strh.w	r3, [r7, #2440]	; 0x988
 8004bea:	f8b7 3988 	ldrh.w	r3, [r7, #2440]	; 0x988
 8004bee:	f240 32e6 	movw	r2, #998	; 0x3e6
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d9e0      	bls.n	8004bb8 <main+0x3b30>
					}
				}
				AC_pk_pk = 2*(AC_max - AC_avg) *0.90;
 8004bf6:	f8b7 29b6 	ldrh.w	r2, [r7, #2486]	; 0x9b6
 8004bfa:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	; 0x976
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fb fc96 	bl	8000534 <__aeabi_i2d>
 8004c08:	a31b      	add	r3, pc, #108	; (adr r3, 8004c78 <main+0x3bf0>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f7fb fcfb 	bl	8000608 <__aeabi_dmul>
 8004c12:	4603      	mov	r3, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	4618      	mov	r0, r3
 8004c18:	4621      	mov	r1, r4
 8004c1a:	f7fb ffb7 	bl	8000b8c <__aeabi_d2uiz>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	f8a7 3974 	strh.w	r3, [r7, #2420]	; 0x974

				for(uint16_t s = 0; s < 999; s++){
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8a7 3986 	strh.w	r3, [r7, #2438]	; 0x986
 8004c2a:	e05d      	b.n	8004ce8 <main+0x3c60>
					if ((AC_value[s+1] > AC_avg) && (AC_value[s] < AC_avg)){
 8004c2c:	f8b7 3986 	ldrh.w	r3, [r7, #2438]	; 0x986
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004c36:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c3a:	f8b7 2976 	ldrh.w	r2, [r7, #2422]	; 0x976
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d24d      	bcs.n	8004cde <main+0x3c56>
 8004c42:	f8b7 2986 	ldrh.w	r2, [r7, #2438]	; 0x986
 8004c46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004c4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004c4e:	f8b7 2976 	ldrh.w	r2, [r7, #2422]	; 0x976
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d943      	bls.n	8004cde <main+0x3c56>

						if(count == 0){
 8004c56:	f897 39af 	ldrb.w	r3, [r7, #2479]	; 0x9af
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d112      	bne.n	8004c84 <main+0x3bfc>
							f1 = s;
 8004c5e:	f8b7 3986 	ldrh.w	r3, [r7, #2438]	; 0x986
 8004c62:	f8a7 39ac 	strh.w	r3, [r7, #2476]	; 0x9ac
							count = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 39af 	strb.w	r3, [r7, #2479]	; 0x9af
 8004c6c:	e037      	b.n	8004cde <main+0x3c56>
 8004c6e:	bf00      	nop
 8004c70:	66666666 	.word	0x66666666
 8004c74:	3fee6666 	.word	0x3fee6666
 8004c78:	cccccccd 	.word	0xcccccccd
 8004c7c:	3feccccc 	.word	0x3feccccc
 8004c80:	10624dd3 	.word	0x10624dd3
						}
						else if (count == 1){
 8004c84:	f897 39af 	ldrb.w	r3, [r7, #2479]	; 0x9af
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d128      	bne.n	8004cde <main+0x3c56>
							f2 = s;
 8004c8c:	f8b7 3986 	ldrh.w	r3, [r7, #2438]	; 0x986
 8004c90:	f8a7 397e 	strh.w	r3, [r7, #2430]	; 0x97e
							count = 2;
 8004c94:	2302      	movs	r3, #2
 8004c96:	f887 39af 	strb.w	r3, [r7, #2479]	; 0x9af
							AC_freq = 1/((f2-f1)*0.0001);
 8004c9a:	f8b7 297e 	ldrh.w	r2, [r7, #2430]	; 0x97e
 8004c9e:	f8b7 39ac 	ldrh.w	r3, [r7, #2476]	; 0x9ac
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7fb fc45 	bl	8000534 <__aeabi_i2d>
 8004caa:	a3e3      	add	r3, pc, #908	; (adr r3, 8005038 <main+0x3fb0>)
 8004cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb0:	f7fb fcaa 	bl	8000608 <__aeabi_dmul>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4623      	mov	r3, r4
 8004cbc:	f04f 0000 	mov.w	r0, #0
 8004cc0:	49d7      	ldr	r1, [pc, #860]	; (8005020 <main+0x3f98>)
 8004cc2:	f7fb fdcb 	bl	800085c <__aeabi_ddiv>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	460c      	mov	r4, r1
 8004cca:	4618      	mov	r0, r3
 8004ccc:	4621      	mov	r1, r4
 8004cce:	f7fb ff5d 	bl	8000b8c <__aeabi_d2uiz>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	f8c7 39b0 	str.w	r3, [r7, #2480]	; 0x9b0
							count = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 39af 	strb.w	r3, [r7, #2479]	; 0x9af
				for(uint16_t s = 0; s < 999; s++){
 8004cde:	f8b7 3986 	ldrh.w	r3, [r7, #2438]	; 0x986
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	f8a7 3986 	strh.w	r3, [r7, #2438]	; 0x986
 8004ce8:	f8b7 3986 	ldrh.w	r3, [r7, #2438]	; 0x986
 8004cec:	f240 32e6 	movw	r2, #998	; 0x3e6
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d99b      	bls.n	8004c2c <main+0x3ba4>
				}
				////////Assign values to uart array but not sending them//////

				//// AMPLITUDE/////

				AC_disp_pk_pk[0] = 64;//@
 8004cf4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004cf8:	2240      	movs	r2, #64	; 0x40
 8004cfa:	701a      	strb	r2, [r3, #0]
				AC_disp_pk_pk[1] = 44;//,
 8004cfc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d00:	222c      	movs	r2, #44	; 0x2c
 8004d02:	705a      	strb	r2, [r3, #1]
				AC_disp_pk_pk[2] = 109;//m
 8004d04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d08:	226d      	movs	r2, #109	; 0x6d
 8004d0a:	709a      	strb	r2, [r3, #2]
				AC_disp_pk_pk[3] = 44;//,
 8004d0c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d10:	222c      	movs	r2, #44	; 0x2c
 8004d12:	70da      	strb	r2, [r3, #3]
				AC_disp_pk_pk[4] = 97;//a
 8004d14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d18:	2261      	movs	r2, #97	; 0x61
 8004d1a:	711a      	strb	r2, [r3, #4]
				AC_disp_pk_pk[5] = 44;//,
 8004d1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d20:	222c      	movs	r2, #44	; 0x2c
 8004d22:	715a      	strb	r2, [r3, #5]
				AC_disp_pk_pk[6] = (AC_pk_pk/1000) + 48;
 8004d24:	f8b7 3974 	ldrh.w	r3, [r7, #2420]	; 0x974
 8004d28:	4abe      	ldr	r2, [pc, #760]	; (8005024 <main+0x3f9c>)
 8004d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	3330      	adds	r3, #48	; 0x30
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d3c:	719a      	strb	r2, [r3, #6]
				AC_disp_pk_pk[7] = (AC_pk_pk/100) %10 + 48;
 8004d3e:	f8b7 3974 	ldrh.w	r3, [r7, #2420]	; 0x974
 8004d42:	4ab9      	ldr	r2, [pc, #740]	; (8005028 <main+0x3fa0>)
 8004d44:	fba2 2303 	umull	r2, r3, r2, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	4bb7      	ldr	r3, [pc, #732]	; (800502c <main+0x3fa4>)
 8004d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d52:	08d9      	lsrs	r1, r3, #3
 8004d54:	460b      	mov	r3, r1
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	3330      	adds	r3, #48	; 0x30
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d6a:	71da      	strb	r2, [r3, #7]
				AC_disp_pk_pk[8] = (AC_pk_pk/10) %10 + 48;
 8004d6c:	f8b7 3974 	ldrh.w	r3, [r7, #2420]	; 0x974
 8004d70:	4aae      	ldr	r2, [pc, #696]	; (800502c <main+0x3fa4>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	08db      	lsrs	r3, r3, #3
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	4bac      	ldr	r3, [pc, #688]	; (800502c <main+0x3fa4>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	08d9      	lsrs	r1, r3, #3
 8004d82:	460b      	mov	r3, r1
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3330      	adds	r3, #48	; 0x30
 8004d92:	b2da      	uxtb	r2, r3
 8004d94:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004d98:	721a      	strb	r2, [r3, #8]
				AC_disp_pk_pk[9] = (AC_pk_pk/1) %10 + 48;
 8004d9a:	f8b7 2974 	ldrh.w	r2, [r7, #2420]	; 0x974
 8004d9e:	4ba3      	ldr	r3, [pc, #652]	; (800502c <main+0x3fa4>)
 8004da0:	fba3 1302 	umull	r1, r3, r3, r2
 8004da4:	08d9      	lsrs	r1, r3, #3
 8004da6:	460b      	mov	r3, r1
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	3330      	adds	r3, #48	; 0x30
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004dbc:	725a      	strb	r2, [r3, #9]
				AC_disp_pk_pk[10] = 44;//,
 8004dbe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004dc2:	222c      	movs	r2, #44	; 0x2c
 8004dc4:	729a      	strb	r2, [r3, #10]
				AC_disp_pk_pk[11] = 33;//!
 8004dc6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004dca:	2221      	movs	r2, #33	; 0x21
 8004dcc:	72da      	strb	r2, [r3, #11]
				AC_disp_pk_pk[12] = 10;//\n
 8004dce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004dd2:	220a      	movs	r2, #10
 8004dd4:	731a      	strb	r2, [r3, #12]

				/////offset/////////////

				AC_disp_offset[0] = 64;//@
 8004dd6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004dda:	2240      	movs	r2, #64	; 0x40
 8004ddc:	701a      	strb	r2, [r3, #0]
				AC_disp_offset[1] = 44;//,
 8004dde:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004de2:	222c      	movs	r2, #44	; 0x2c
 8004de4:	705a      	strb	r2, [r3, #1]
				AC_disp_offset[2] = 109;//m
 8004de6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004dea:	226d      	movs	r2, #109	; 0x6d
 8004dec:	709a      	strb	r2, [r3, #2]
				AC_disp_offset[3] = 44;//,
 8004dee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004df2:	222c      	movs	r2, #44	; 0x2c
 8004df4:	70da      	strb	r2, [r3, #3]
				AC_disp_offset[4] = 111;//o
 8004df6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004dfa:	226f      	movs	r2, #111	; 0x6f
 8004dfc:	711a      	strb	r2, [r3, #4]
				AC_disp_offset[5] = 44;//,
 8004dfe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004e02:	222c      	movs	r2, #44	; 0x2c
 8004e04:	715a      	strb	r2, [r3, #5]
				AC_disp_offset[6] = (AC_avg/1000) %10 + 48;
 8004e06:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	; 0x976
 8004e0a:	4a86      	ldr	r2, [pc, #536]	; (8005024 <main+0x3f9c>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	099b      	lsrs	r3, r3, #6
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	4b85      	ldr	r3, [pc, #532]	; (800502c <main+0x3fa4>)
 8004e16:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1a:	08d9      	lsrs	r1, r3, #3
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	3330      	adds	r3, #48	; 0x30
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004e32:	719a      	strb	r2, [r3, #6]
				AC_disp_offset[7] = (AC_avg/100) %10 + 48;
 8004e34:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	; 0x976
 8004e38:	4a7b      	ldr	r2, [pc, #492]	; (8005028 <main+0x3fa0>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	4b7a      	ldr	r3, [pc, #488]	; (800502c <main+0x3fa4>)
 8004e44:	fba3 1302 	umull	r1, r3, r3, r2
 8004e48:	08d9      	lsrs	r1, r3, #3
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	3330      	adds	r3, #48	; 0x30
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004e60:	71da      	strb	r2, [r3, #7]
				AC_disp_offset[8] = (AC_avg/10) %10 + 48;
 8004e62:	f8b7 3976 	ldrh.w	r3, [r7, #2422]	; 0x976
 8004e66:	4a71      	ldr	r2, [pc, #452]	; (800502c <main+0x3fa4>)
 8004e68:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6c:	08db      	lsrs	r3, r3, #3
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	4b6e      	ldr	r3, [pc, #440]	; (800502c <main+0x3fa4>)
 8004e72:	fba3 1302 	umull	r1, r3, r3, r2
 8004e76:	08d9      	lsrs	r1, r3, #3
 8004e78:	460b      	mov	r3, r1
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	440b      	add	r3, r1
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	3330      	adds	r3, #48	; 0x30
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004e8e:	721a      	strb	r2, [r3, #8]
				AC_disp_offset[9] = (AC_avg/1) %10 + 48;
 8004e90:	f8b7 2976 	ldrh.w	r2, [r7, #2422]	; 0x976
 8004e94:	4b65      	ldr	r3, [pc, #404]	; (800502c <main+0x3fa4>)
 8004e96:	fba3 1302 	umull	r1, r3, r3, r2
 8004e9a:	08d9      	lsrs	r1, r3, #3
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	3330      	adds	r3, #48	; 0x30
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004eb2:	725a      	strb	r2, [r3, #9]
				AC_disp_offset[10] = 44;//,
 8004eb4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004eb8:	222c      	movs	r2, #44	; 0x2c
 8004eba:	729a      	strb	r2, [r3, #10]
				AC_disp_offset[11] = 33;//!
 8004ebc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004ec0:	2221      	movs	r2, #33	; 0x21
 8004ec2:	72da      	strb	r2, [r3, #11]
				AC_disp_offset[12] = 10;//\n
 8004ec4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004ec8:	220a      	movs	r2, #10
 8004eca:	731a      	strb	r2, [r3, #12]



				////// FREQUENCY /////////

				AC_disp_frequency[0] = 64;//@
 8004ecc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ed0:	2240      	movs	r2, #64	; 0x40
 8004ed2:	701a      	strb	r2, [r3, #0]
				AC_disp_frequency[1] = 44;//,
 8004ed4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ed8:	222c      	movs	r2, #44	; 0x2c
 8004eda:	705a      	strb	r2, [r3, #1]
				AC_disp_frequency[2] = 109;//m
 8004edc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ee0:	226d      	movs	r2, #109	; 0x6d
 8004ee2:	709a      	strb	r2, [r3, #2]
				AC_disp_frequency[3] = 44;//,
 8004ee4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ee8:	222c      	movs	r2, #44	; 0x2c
 8004eea:	70da      	strb	r2, [r3, #3]
				AC_disp_frequency[4] = 102;//f
 8004eec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ef0:	2266      	movs	r2, #102	; 0x66
 8004ef2:	711a      	strb	r2, [r3, #4]
				AC_disp_frequency[5] = 44;//,
 8004ef4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004ef8:	222c      	movs	r2, #44	; 0x2c
 8004efa:	715a      	strb	r2, [r3, #5]
				AC_disp_frequency[6] = (AC_freq/1000) %10 + 48;
 8004efc:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 8004f00:	4a48      	ldr	r2, [pc, #288]	; (8005024 <main+0x3f9c>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	0999      	lsrs	r1, r3, #6
 8004f08:	4b48      	ldr	r3, [pc, #288]	; (800502c <main+0x3fa4>)
 8004f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f0e:	08da      	lsrs	r2, r3, #3
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	005b      	lsls	r3, r3, #1
 8004f18:	1aca      	subs	r2, r1, r3
 8004f1a:	b2d3      	uxtb	r3, r2
 8004f1c:	3330      	adds	r3, #48	; 0x30
 8004f1e:	b2da      	uxtb	r2, r3
 8004f20:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004f24:	719a      	strb	r2, [r3, #6]
				AC_disp_frequency[7] = (AC_freq/100) %10 + 48;
 8004f26:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	; (8005028 <main+0x3fa0>)
 8004f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f30:	0959      	lsrs	r1, r3, #5
 8004f32:	4b3e      	ldr	r3, [pc, #248]	; (800502c <main+0x3fa4>)
 8004f34:	fba3 2301 	umull	r2, r3, r3, r1
 8004f38:	08da      	lsrs	r2, r3, #3
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	1aca      	subs	r2, r1, r3
 8004f44:	b2d3      	uxtb	r3, r2
 8004f46:	3330      	adds	r3, #48	; 0x30
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004f4e:	71da      	strb	r2, [r3, #7]
				AC_disp_frequency[8] = (AC_freq/10) %10 + 48;
 8004f50:	f8d7 39b0 	ldr.w	r3, [r7, #2480]	; 0x9b0
 8004f54:	4a35      	ldr	r2, [pc, #212]	; (800502c <main+0x3fa4>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	08d9      	lsrs	r1, r3, #3
 8004f5c:	4b33      	ldr	r3, [pc, #204]	; (800502c <main+0x3fa4>)
 8004f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f62:	08da      	lsrs	r2, r3, #3
 8004f64:	4613      	mov	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	4413      	add	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	1aca      	subs	r2, r1, r3
 8004f6e:	b2d3      	uxtb	r3, r2
 8004f70:	3330      	adds	r3, #48	; 0x30
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004f78:	721a      	strb	r2, [r3, #8]
				AC_disp_frequency[9] = (AC_freq/1) %10 + 48;
 8004f7a:	f8d7 19b0 	ldr.w	r1, [r7, #2480]	; 0x9b0
 8004f7e:	4b2b      	ldr	r3, [pc, #172]	; (800502c <main+0x3fa4>)
 8004f80:	fba3 2301 	umull	r2, r3, r3, r1
 8004f84:	08da      	lsrs	r2, r3, #3
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	1aca      	subs	r2, r1, r3
 8004f90:	b2d3      	uxtb	r3, r2
 8004f92:	3330      	adds	r3, #48	; 0x30
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004f9a:	725a      	strb	r2, [r3, #9]
				AC_disp_frequency[10] = 44;//,
 8004f9c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004fa0:	222c      	movs	r2, #44	; 0x2c
 8004fa2:	729a      	strb	r2, [r3, #10]
				AC_disp_frequency[11] = 33;//!
 8004fa4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004fa8:	2221      	movs	r2, #33	; 0x21
 8004faa:	72da      	strb	r2, [r3, #11]
				AC_disp_frequency[12] = 10;//\n
 8004fac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004fb0:	220a      	movs	r2, #10
 8004fb2:	731a      	strb	r2, [r3, #12]
				//////////////////////////////////////////////////////////


			}

			if(parameter_a){
 8004fb4:	f107 0362 	add.w	r3, r7, #98	; 0x62
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00d      	beq.n	8004fdc <main+0x3f54>


				if(send_measurment == 1){
 8004fc0:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <main+0x3fa8>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d109      	bne.n	8004fdc <main+0x3f54>
					HAL_UART_Transmit(&huart2, AC_disp_pk_pk, 13, 50);
 8004fc8:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004fcc:	2332      	movs	r3, #50	; 0x32
 8004fce:	220d      	movs	r2, #13
 8004fd0:	4818      	ldr	r0, [pc, #96]	; (8005034 <main+0x3fac>)
 8004fd2:	f006 fc3f 	bl	800b854 <HAL_UART_Transmit>
					send_measurment = 0;
 8004fd6:	4b16      	ldr	r3, [pc, #88]	; (8005030 <main+0x3fa8>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]
				}

			}
			if(parameter_o){
 8004fdc:	f107 0361 	add.w	r3, r7, #97	; 0x61
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00d      	beq.n	8005004 <main+0x3f7c>


				if(send_measurment == 1){
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <main+0x3fa8>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d109      	bne.n	8005004 <main+0x3f7c>
					HAL_UART_Transmit(&huart2, AC_disp_offset, 13, 50);
 8004ff0:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8004ff4:	2332      	movs	r3, #50	; 0x32
 8004ff6:	220d      	movs	r2, #13
 8004ff8:	480e      	ldr	r0, [pc, #56]	; (8005034 <main+0x3fac>)
 8004ffa:	f006 fc2b 	bl	800b854 <HAL_UART_Transmit>
					send_measurment = 0;
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <main+0x3fa8>)
 8005000:	2200      	movs	r2, #0
 8005002:	701a      	strb	r2, [r3, #0]
				}

			}
			if(parameter_f){
 8005004:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d021      	beq.n	8005054 <main+0x3fcc>


				if(send_measurment == 1){
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <main+0x3fa8>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d11d      	bne.n	8005054 <main+0x3fcc>
 8005018:	e012      	b.n	8005040 <main+0x3fb8>
 800501a:	bf00      	nop
 800501c:	f3af 8000 	nop.w
 8005020:	3ff00000 	.word	0x3ff00000
 8005024:	10624dd3 	.word	0x10624dd3
 8005028:	51eb851f 	.word	0x51eb851f
 800502c:	cccccccd 	.word	0xcccccccd
 8005030:	20001683 	.word	0x20001683
 8005034:	200015fc 	.word	0x200015fc
 8005038:	eb1c432d 	.word	0xeb1c432d
 800503c:	3f1a36e2 	.word	0x3f1a36e2
					HAL_UART_Transmit(&huart2, AC_disp_frequency, 13, 50);
 8005040:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8005044:	2332      	movs	r3, #50	; 0x32
 8005046:	220d      	movs	r2, #13
 8005048:	48a5      	ldr	r0, [pc, #660]	; (80052e0 <main+0x4258>)
 800504a:	f006 fc03 	bl	800b854 <HAL_UART_Transmit>
					send_measurment = 0;
 800504e:	4ba5      	ldr	r3, [pc, #660]	; (80052e4 <main+0x425c>)
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
				}

			}

			HAL_ADC_Start(&hadc3);
 8005054:	48a4      	ldr	r0, [pc, #656]	; (80052e8 <main+0x4260>)
 8005056:	f001 fb05 	bl	8006664 <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc3, 20);
 800505a:	2114      	movs	r1, #20
 800505c:	48a2      	ldr	r0, [pc, #648]	; (80052e8 <main+0x4260>)
 800505e:	f001 fc4d 	bl	80068fc <HAL_ADC_PollForConversion>
			AC_value[ACidx] = HAL_ADC_GetValue(&hadc3);
 8005062:	48a1      	ldr	r0, [pc, #644]	; (80052e8 <main+0x4260>)
 8005064:	f001 fd4c 	bl	8006b00 <HAL_ADC_GetValue>
 8005068:	4603      	mov	r3, r0
 800506a:	f8b7 29c2 	ldrh.w	r2, [r7, #2498]	; 0x9c2
 800506e:	b299      	uxth	r1, r3
 8005070:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005074:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			HAL_ADC_Stop(&hadc3);
 8005078:	489b      	ldr	r0, [pc, #620]	; (80052e8 <main+0x4260>)
 800507a:	f001 fc09 	bl	8006890 <HAL_ADC_Stop>
			ACidx++;
 800507e:	f8b7 39c2 	ldrh.w	r3, [r7, #2498]	; 0x9c2
 8005082:	3301      	adds	r3, #1
 8005084:	f8a7 39c2 	strh.w	r3, [r7, #2498]	; 0x9c2
			timer_interrupt = 0;
 8005088:	4b98      	ldr	r3, [pc, #608]	; (80052ec <main+0x4264>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
		}

		///////////////// OUTPUT MODE /////////////////////

		// DC output
		if(signal_d && output){
 800508e:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d036      	beq.n	8005108 <main+0x4080>
 800509a:	4b95      	ldr	r3, [pc, #596]	; (80052f0 <main+0x4268>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d032      	beq.n	8005108 <main+0x4080>

			HAL_TIM_Base_Start(&htim2);
 80050a2:	4894      	ldr	r0, [pc, #592]	; (80052f4 <main+0x426c>)
 80050a4:	f005 f948 	bl	800a338 <HAL_TIM_Base_Start>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80050a8:	2100      	movs	r1, #0
 80050aa:	4893      	ldr	r0, [pc, #588]	; (80052f8 <main+0x4270>)
 80050ac:	f002 ffa8 	bl	8008000 <HAL_DAC_Start>
			DAC_DC_val = (DAC_DC_offset/1000)*(4096)/3.3;
 80050b0:	f607 1394 	addw	r3, r7, #2452	; 0x994
 80050b4:	ed93 7a00 	vldr	s14, [r3]
 80050b8:	eddf 6a90 	vldr	s13, [pc, #576]	; 80052fc <main+0x4274>
 80050bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050c0:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005300 <main+0x4278>
 80050c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050c8:	ee17 0a90 	vmov	r0, s15
 80050cc:	f7fb fa44 	bl	8000558 <__aeabi_f2d>
 80050d0:	a37d      	add	r3, pc, #500	; (adr r3, 80052c8 <main+0x4240>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	f7fb fbc1 	bl	800085c <__aeabi_ddiv>
 80050da:	4603      	mov	r3, r0
 80050dc:	460c      	mov	r4, r1
 80050de:	4618      	mov	r0, r3
 80050e0:	4621      	mov	r1, r4
 80050e2:	f7fb fd73 	bl	8000bcc <__aeabi_d2f>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f507 6217 	add.w	r2, r7, #2416	; 0x970
 80050ec:	6013      	str	r3, [r2, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_DC_val);
 80050ee:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80050f2:	edd3 7a00 	vldr	s15, [r3]
 80050f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050fa:	ee17 3a90 	vmov	r3, s15
 80050fe:	2200      	movs	r2, #0
 8005100:	2100      	movs	r1, #0
 8005102:	487d      	ldr	r0, [pc, #500]	; (80052f8 <main+0x4270>)
 8005104:	f002 ff57 	bl	8007fb6 <HAL_DAC_SetValue>

		}

		//AC output

		if(signal_s && output){
 8005108:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d07b      	beq.n	800520c <main+0x4184>
 8005114:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <main+0x4268>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d077      	beq.n	800520c <main+0x4184>

			HAL_TIM_Base_Start(&htim2);
 800511c:	4875      	ldr	r0, [pc, #468]	; (80052f4 <main+0x426c>)
 800511e:	f005 f90b 	bl	800a338 <HAL_TIM_Base_Start>
			//HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1); //?????????????

			for (int i=0;i<1000;i++)
 8005122:	2300      	movs	r3, #0
 8005124:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 8005128:	e062      	b.n	80051f0 <main+0x4168>
			{
				//sine_val_DAC[i] = DAC_offset_output+(((sin(i*2*PI/1000) + 1)* DAC_amplitude_output/3.3 *(4096/2)));
				sine_val_DAC[i] = (DAC_offset_output*4096/3300)+((sin(i*2*PI/1000))*((DAC_amplitude_output/2)*4096/3300));
 800512a:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800512e:	edd3 7a00 	vldr	s15, [r3]
 8005132:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005300 <main+0x4278>
 8005136:	ee67 7a87 	vmul.f32	s15, s15, s14
 800513a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8005304 <main+0x427c>
 800513e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005142:	ee16 0a90 	vmov	r0, s13
 8005146:	f7fb fa07 	bl	8000558 <__aeabi_f2d>
 800514a:	4604      	mov	r4, r0
 800514c:	460d      	mov	r5, r1
 800514e:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f7fb f9ed 	bl	8000534 <__aeabi_i2d>
 800515a:	a35d      	add	r3, pc, #372	; (adr r3, 80052d0 <main+0x4248>)
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f7fb fa52 	bl	8000608 <__aeabi_dmul>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	f04f 0200 	mov.w	r2, #0
 8005170:	4b65      	ldr	r3, [pc, #404]	; (8005308 <main+0x4280>)
 8005172:	f7fb fb73 	bl	800085c <__aeabi_ddiv>
 8005176:	4602      	mov	r2, r0
 8005178:	460b      	mov	r3, r1
 800517a:	ec43 2b17 	vmov	d7, r2, r3
 800517e:	eeb0 0a47 	vmov.f32	s0, s14
 8005182:	eef0 0a67 	vmov.f32	s1, s15
 8005186:	f008 f9bb 	bl	800d500 <sin>
 800518a:	ec59 8b10 	vmov	r8, r9, d0
 800518e:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8005192:	ed93 7a00 	vldr	s14, [r3]
 8005196:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800519a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800519e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005300 <main+0x4278>
 80051a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80051a6:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005304 <main+0x427c>
 80051aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80051ae:	ee16 0a90 	vmov	r0, s13
 80051b2:	f7fb f9d1 	bl	8000558 <__aeabi_f2d>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4640      	mov	r0, r8
 80051bc:	4649      	mov	r1, r9
 80051be:	f7fb fa23 	bl	8000608 <__aeabi_dmul>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7fb f867 	bl	800029c <__adddf3>
 80051ce:	4603      	mov	r3, r0
 80051d0:	460c      	mov	r4, r1
 80051d2:	4618      	mov	r0, r3
 80051d4:	4621      	mov	r1, r4
 80051d6:	f7fb fcd9 	bl	8000b8c <__aeabi_d2uiz>
 80051da:	4601      	mov	r1, r0
 80051dc:	4a4b      	ldr	r2, [pc, #300]	; (800530c <main+0x4284>)
 80051de:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80051e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0;i<1000;i++)
 80051e6:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80051ea:	3301      	adds	r3, #1
 80051ec:	f8c7 3980 	str.w	r3, [r7, #2432]	; 0x980
 80051f0:	f8d7 3980 	ldr.w	r3, [r7, #2432]	; 0x980
 80051f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051f8:	db97      	blt.n	800512a <main+0x40a2>
			}
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine_val_DAC, 1000, DAC_ALIGN_12B_R);
 80051fa:	2300      	movs	r3, #0
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005202:	4a42      	ldr	r2, [pc, #264]	; (800530c <main+0x4284>)
 8005204:	2100      	movs	r1, #0
 8005206:	483c      	ldr	r0, [pc, #240]	; (80052f8 <main+0x4270>)
 8005208:	f002 ff46 	bl	8008098 <HAL_DAC_Start_DMA>

			//////////////////////////////////////////////////////////

		}

		if (signal_p && output) {
 800520c:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	f43c a850 	beq.w	80012ba <main+0x232>
 800521a:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <main+0x4268>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f43c a84b 	beq.w	80012ba <main+0x232>

			HAL_TIM_Base_Start(&htim2);
 8005224:	4833      	ldr	r0, [pc, #204]	; (80052f4 <main+0x426c>)
 8005226:	f005 f887 	bl	800a338 <HAL_TIM_Base_Start>
			//HAL_DAC_Stop(&hdac1, DAC1_CHANNEL_1);
			//HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
			//TIM2->EGR = ((TIM2->EGR)|0b01);
			//TIM2->ARR = (72e6/(100000)) - 1;
			TIM2 -> ARR = ((72e6/(1000*DAC_frequency_output/10)) - 1);
 800522a:	f8b7 399a 	ldrh.w	r3, [r7, #2458]	; 0x99a
 800522e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005232:	fb02 f303 	mul.w	r3, r2, r3
 8005236:	4a36      	ldr	r2, [pc, #216]	; (8005310 <main+0x4288>)
 8005238:	fb82 1203 	smull	r1, r2, r2, r3
 800523c:	1092      	asrs	r2, r2, #2
 800523e:	17db      	asrs	r3, r3, #31
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	4618      	mov	r0, r3
 8005244:	f7fb f976 	bl	8000534 <__aeabi_i2d>
 8005248:	4603      	mov	r3, r0
 800524a:	460c      	mov	r4, r1
 800524c:	461a      	mov	r2, r3
 800524e:	4623      	mov	r3, r4
 8005250:	a121      	add	r1, pc, #132	; (adr r1, 80052d8 <main+0x4250>)
 8005252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005256:	f7fb fb01 	bl	800085c <__aeabi_ddiv>
 800525a:	4603      	mov	r3, r0
 800525c:	460c      	mov	r4, r1
 800525e:	4618      	mov	r0, r3
 8005260:	4621      	mov	r1, r4
 8005262:	f04f 0200 	mov.w	r2, #0
 8005266:	4b2b      	ldr	r3, [pc, #172]	; (8005314 <main+0x428c>)
 8005268:	f7fb f816 	bl	8000298 <__aeabi_dsub>
 800526c:	4603      	mov	r3, r0
 800526e:	460c      	mov	r4, r1
 8005270:	461a      	mov	r2, r3
 8005272:	4623      	mov	r3, r4
 8005274:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8005278:	4610      	mov	r0, r2
 800527a:	4619      	mov	r1, r3
 800527c:	f7fb fc86 	bl	8000b8c <__aeabi_d2uiz>
 8005280:	4603      	mov	r3, r0
 8005282:	62e3      	str	r3, [r4, #44]	; 0x2c
			//TIM2->EGR = ((TIM2->EGR)|0b01);
			//HAL_TIM_Base_Stop(&htim2);
			Pulse(DutyCycle, Amplitude_pulse, Offset_pulse);
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <main+0x4290>)
 8005286:	edd3 7a00 	vldr	s15, [r3]
 800528a:	4b24      	ldr	r3, [pc, #144]	; (800531c <main+0x4294>)
 800528c:	ed93 7a00 	vldr	s14, [r3]
 8005290:	4b23      	ldr	r3, [pc, #140]	; (8005320 <main+0x4298>)
 8005292:	edd3 6a00 	vldr	s13, [r3]
 8005296:	eeb0 1a66 	vmov.f32	s2, s13
 800529a:	eef0 0a47 	vmov.f32	s1, s14
 800529e:	eeb0 0a67 	vmov.f32	s0, s15
 80052a2:	f7fb fe69 	bl	8000f78 <Pulse>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, Pulse_array, 100, DAC_ALIGN_12B_R);
 80052a6:	2300      	movs	r3, #0
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	2364      	movs	r3, #100	; 0x64
 80052ac:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <main+0x429c>)
 80052ae:	2100      	movs	r1, #0
 80052b0:	4811      	ldr	r0, [pc, #68]	; (80052f8 <main+0x4270>)
 80052b2:	f002 fef1 	bl	8008098 <HAL_DAC_Start_DMA>
			LCD_scroll_count++;
 80052b6:	f8b7 398e 	ldrh.w	r3, [r7, #2446]	; 0x98e
 80052ba:	3301      	adds	r3, #1
 80052bc:	f8a7 398e 	strh.w	r3, [r7, #2446]	; 0x98e
		buttonbounce();
 80052c0:	f7fb bffb 	b.w	80012ba <main+0x232>
 80052c4:	f3af 8000 	nop.w
 80052c8:	66666666 	.word	0x66666666
 80052cc:	400a6666 	.word	0x400a6666
 80052d0:	4d12d84a 	.word	0x4d12d84a
 80052d4:	400921fb 	.word	0x400921fb
 80052d8:	00000000 	.word	0x00000000
 80052dc:	41912a88 	.word	0x41912a88
 80052e0:	200015fc 	.word	0x200015fc
 80052e4:	20001683 	.word	0x20001683
 80052e8:	200002dc 	.word	0x200002dc
 80052ec:	2000168c 	.word	0x2000168c
 80052f0:	200000cc 	.word	0x200000cc
 80052f4:	20000534 	.word	0x20000534
 80052f8:	200001b0 	.word	0x200001b0
 80052fc:	447a0000 	.word	0x447a0000
 8005300:	45800000 	.word	0x45800000
 8005304:	454e4000 	.word	0x454e4000
 8005308:	408f4000 	.word	0x408f4000
 800530c:	20000594 	.word	0x20000594
 8005310:	66666667 	.word	0x66666667
 8005314:	3ff00000 	.word	0x3ff00000
 8005318:	20000014 	.word	0x20000014
 800531c:	20000018 	.word	0x20000018
 8005320:	2000001c 	.word	0x2000001c
 8005324:	20000348 	.word	0x20000348

08005328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b0a6      	sub	sp, #152	; 0x98
 800532c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800532e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005332:	2228      	movs	r2, #40	; 0x28
 8005334:	2100      	movs	r1, #0
 8005336:	4618      	mov	r0, r3
 8005338:	f007 fcd2 	bl	800cce0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800533c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	609a      	str	r2, [r3, #8]
 8005348:	60da      	str	r2, [r3, #12]
 800534a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	2258      	movs	r2, #88	; 0x58
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f007 fcc4 	bl	800cce0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005358:	2302      	movs	r3, #2
 800535a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800535c:	2301      	movs	r3, #1
 800535e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005360:	2310      	movs	r3, #16
 8005362:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005366:	2302      	movs	r3, #2
 8005368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800536c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005374:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8005378:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800537c:	2300      	movs	r3, #0
 800537e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005382:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005386:	4618      	mov	r0, r3
 8005388:	f003 fc14 	bl	8008bb4 <HAL_RCC_OscConfig>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8005392:	f000 fc49 	bl	8005c28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005396:	230f      	movs	r3, #15
 8005398:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800539a:	2302      	movs	r3, #2
 800539c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800539e:	2300      	movs	r3, #0
 80053a0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80053a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053a8:	2300      	movs	r3, #0
 80053aa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80053ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80053b0:	2102      	movs	r1, #2
 80053b2:	4618      	mov	r0, r3
 80053b4:	f004 fb14 	bl	80099e0 <HAL_RCC_ClockConfig>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80053be:	f000 fc33 	bl	8005c28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 80053c2:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <SystemClock_Config+0xcc>)
 80053c4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC34|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80053ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053ce:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053d8:	1d3b      	adds	r3, r7, #4
 80053da:	4618      	mov	r0, r3
 80053dc:	f004 fd36 	bl	8009e4c <HAL_RCCEx_PeriphCLKConfig>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d001      	beq.n	80053ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80053e6:	f000 fc1f 	bl	8005c28 <Error_Handler>
  }
}
 80053ea:	bf00      	nop
 80053ec:	3798      	adds	r7, #152	; 0x98
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	00101102 	.word	0x00101102

080053f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b08a      	sub	sp, #40	; 0x28
 80053fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80053fe:	f107 031c 	add.w	r3, r7, #28
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	605a      	str	r2, [r3, #4]
 8005408:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800540a:	1d3b      	adds	r3, r7, #4
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	609a      	str	r2, [r3, #8]
 8005414:	60da      	str	r2, [r3, #12]
 8005416:	611a      	str	r2, [r3, #16]
 8005418:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config 
  */
  hadc3.Instance = ADC3;
 800541a:	4b2d      	ldr	r3, [pc, #180]	; (80054d0 <MX_ADC3_Init+0xd8>)
 800541c:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <MX_ADC3_Init+0xdc>)
 800541e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <MX_ADC3_Init+0xd8>)
 8005422:	2200      	movs	r2, #0
 8005424:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005426:	4b2a      	ldr	r3, [pc, #168]	; (80054d0 <MX_ADC3_Init+0xd8>)
 8005428:	2200      	movs	r2, #0
 800542a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800542c:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <MX_ADC3_Init+0xd8>)
 800542e:	2200      	movs	r2, #0
 8005430:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8005432:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <MX_ADC3_Init+0xd8>)
 8005434:	2201      	movs	r2, #1
 8005436:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <MX_ADC3_Init+0xd8>)
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005440:	4b23      	ldr	r3, [pc, #140]	; (80054d0 <MX_ADC3_Init+0xd8>)
 8005442:	2200      	movs	r2, #0
 8005444:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005446:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <MX_ADC3_Init+0xd8>)
 8005448:	2201      	movs	r2, #1
 800544a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800544c:	4b20      	ldr	r3, [pc, #128]	; (80054d0 <MX_ADC3_Init+0xd8>)
 800544e:	2200      	movs	r2, #0
 8005450:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8005452:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <MX_ADC3_Init+0xd8>)
 8005454:	2201      	movs	r2, #1
 8005456:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8005458:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <MX_ADC3_Init+0xd8>)
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005460:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <MX_ADC3_Init+0xd8>)
 8005462:	2204      	movs	r2, #4
 8005464:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8005466:	4b1a      	ldr	r3, [pc, #104]	; (80054d0 <MX_ADC3_Init+0xd8>)
 8005468:	2200      	movs	r2, #0
 800546a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800546c:	4b18      	ldr	r3, [pc, #96]	; (80054d0 <MX_ADC3_Init+0xd8>)
 800546e:	2200      	movs	r2, #0
 8005470:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005472:	4817      	ldr	r0, [pc, #92]	; (80054d0 <MX_ADC3_Init+0xd8>)
 8005474:	f000 fefc 	bl	8006270 <HAL_ADC_Init>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800547e:	f000 fbd3 	bl	8005c28 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005482:	2300      	movs	r3, #0
 8005484:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8005486:	f107 031c 	add.w	r3, r7, #28
 800548a:	4619      	mov	r1, r3
 800548c:	4810      	ldr	r0, [pc, #64]	; (80054d0 <MX_ADC3_Init+0xd8>)
 800548e:	f002 f965 	bl	800775c <HAL_ADCEx_MultiModeConfigChannel>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8005498:	f000 fbc6 	bl	8005c28 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800549c:	2301      	movs	r3, #1
 800549e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80054a0:	2301      	movs	r3, #1
 80054a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80054b4:	1d3b      	adds	r3, r7, #4
 80054b6:	4619      	mov	r1, r3
 80054b8:	4805      	ldr	r0, [pc, #20]	; (80054d0 <MX_ADC3_Init+0xd8>)
 80054ba:	f001 fe63 	bl	8007184 <HAL_ADC_ConfigChannel>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80054c4:	f000 fbb0 	bl	8005c28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80054c8:	bf00      	nop
 80054ca:	3728      	adds	r7, #40	; 0x28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	200002dc 	.word	0x200002dc
 80054d4:	50000400 	.word	0x50000400

080054d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80054de:	1d3b      	adds	r3, r7, #4
 80054e0:	2200      	movs	r2, #0
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	605a      	str	r2, [r3, #4]
 80054e6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80054e8:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <MX_DAC1_Init+0x4c>)
 80054ea:	4a0f      	ldr	r2, [pc, #60]	; (8005528 <MX_DAC1_Init+0x50>)
 80054ec:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80054ee:	480d      	ldr	r0, [pc, #52]	; (8005524 <MX_DAC1_Init+0x4c>)
 80054f0:	f002 fcb5 	bl	8007e5e <HAL_DAC_Init>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 80054fa:	f000 fb95 	bl	8005c28 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80054fe:	2324      	movs	r3, #36	; 0x24
 8005500:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8005502:	2302      	movs	r3, #2
 8005504:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005506:	1d3b      	adds	r3, r7, #4
 8005508:	2200      	movs	r2, #0
 800550a:	4619      	mov	r1, r3
 800550c:	4805      	ldr	r0, [pc, #20]	; (8005524 <MX_DAC1_Init+0x4c>)
 800550e:	f002 fe71 	bl	80081f4 <HAL_DAC_ConfigChannel>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8005518:	f000 fb86 	bl	8005c28 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800551c:	bf00      	nop
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	200001b0 	.word	0x200001b0
 8005528:	40007400 	.word	0x40007400

0800552c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b09a      	sub	sp, #104	; 0x68
 8005530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005532:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	605a      	str	r2, [r3, #4]
 800553c:	609a      	str	r2, [r3, #8]
 800553e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005540:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	605a      	str	r2, [r3, #4]
 800554a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800554c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	605a      	str	r2, [r3, #4]
 8005556:	609a      	str	r2, [r3, #8]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	611a      	str	r2, [r3, #16]
 800555c:	615a      	str	r2, [r3, #20]
 800555e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005560:	1d3b      	adds	r3, r7, #4
 8005562:	222c      	movs	r2, #44	; 0x2c
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f007 fbba 	bl	800cce0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800556c:	4b43      	ldr	r3, [pc, #268]	; (800567c <MX_TIM1_Init+0x150>)
 800556e:	4a44      	ldr	r2, [pc, #272]	; (8005680 <MX_TIM1_Init+0x154>)
 8005570:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3599;
 8005572:	4b42      	ldr	r3, [pc, #264]	; (800567c <MX_TIM1_Init+0x150>)
 8005574:	f640 620f 	movw	r2, #3599	; 0xe0f
 8005578:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800557a:	4b40      	ldr	r3, [pc, #256]	; (800567c <MX_TIM1_Init+0x150>)
 800557c:	2200      	movs	r2, #0
 800557e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8005580:	4b3e      	ldr	r3, [pc, #248]	; (800567c <MX_TIM1_Init+0x150>)
 8005582:	2201      	movs	r2, #1
 8005584:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005586:	4b3d      	ldr	r3, [pc, #244]	; (800567c <MX_TIM1_Init+0x150>)
 8005588:	2200      	movs	r2, #0
 800558a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800558c:	4b3b      	ldr	r3, [pc, #236]	; (800567c <MX_TIM1_Init+0x150>)
 800558e:	2200      	movs	r2, #0
 8005590:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005592:	4b3a      	ldr	r3, [pc, #232]	; (800567c <MX_TIM1_Init+0x150>)
 8005594:	2200      	movs	r2, #0
 8005596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005598:	4838      	ldr	r0, [pc, #224]	; (800567c <MX_TIM1_Init+0x150>)
 800559a:	f004 fe75 	bl	800a288 <HAL_TIM_Base_Init>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80055a4:	f000 fb40 	bl	8005c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055ac:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80055ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80055b2:	4619      	mov	r1, r3
 80055b4:	4831      	ldr	r0, [pc, #196]	; (800567c <MX_TIM1_Init+0x150>)
 80055b6:	f005 fa7b 	bl	800aab0 <HAL_TIM_ConfigClockSource>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80055c0:	f000 fb32 	bl	8005c28 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80055c4:	482d      	ldr	r0, [pc, #180]	; (800567c <MX_TIM1_Init+0x150>)
 80055c6:	f004 ff1f 	bl	800a408 <HAL_TIM_OC_Init>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80055d0:	f000 fb2a 	bl	8005c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80055d4:	2300      	movs	r3, #0
 80055d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80055d8:	2300      	movs	r3, #0
 80055da:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80055dc:	2300      	movs	r3, #0
 80055de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80055e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80055e4:	4619      	mov	r1, r3
 80055e6:	4825      	ldr	r0, [pc, #148]	; (800567c <MX_TIM1_Init+0x150>)
 80055e8:	f005 ffb6 	bl	800b558 <HAL_TIMEx_MasterConfigSynchronization>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80055f2:	f000 fb19 	bl	8005c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80055f6:	2310      	movs	r3, #16
 80055f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80055fe:	2300      	movs	r3, #0
 8005600:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005602:	2300      	movs	r3, #0
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005606:	2300      	movs	r3, #0
 8005608:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800560a:	2300      	movs	r3, #0
 800560c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800560e:	2300      	movs	r3, #0
 8005610:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005612:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005616:	2200      	movs	r2, #0
 8005618:	4619      	mov	r1, r3
 800561a:	4818      	ldr	r0, [pc, #96]	; (800567c <MX_TIM1_Init+0x150>)
 800561c:	f005 f9ce 	bl	800a9bc <HAL_TIM_OC_ConfigChannel>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005626:	f000 faff 	bl	8005c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800562a:	2300      	movs	r3, #0
 800562c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800562e:	2300      	movs	r3, #0
 8005630:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800563a:	2300      	movs	r3, #0
 800563c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800563e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005642:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005648:	2300      	movs	r3, #0
 800564a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800564c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005656:	2300      	movs	r3, #0
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800565a:	1d3b      	adds	r3, r7, #4
 800565c:	4619      	mov	r1, r3
 800565e:	4807      	ldr	r0, [pc, #28]	; (800567c <MX_TIM1_Init+0x150>)
 8005660:	f006 f806 	bl	800b670 <HAL_TIMEx_ConfigBreakDeadTime>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800566a:	f000 fadd 	bl	8005c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800566e:	4803      	ldr	r0, [pc, #12]	; (800567c <MX_TIM1_Init+0x150>)
 8005670:	f000 fbf8 	bl	8005e64 <HAL_TIM_MspPostInit>

}
 8005674:	bf00      	nop
 8005676:	3768      	adds	r7, #104	; 0x68
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	200004e4 	.word	0x200004e4
 8005680:	40012c00 	.word	0x40012c00

08005684 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b088      	sub	sp, #32
 8005688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800568a:	f107 0310 	add.w	r3, r7, #16
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	605a      	str	r2, [r3, #4]
 8005694:	609a      	str	r2, [r3, #8]
 8005696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005698:	1d3b      	adds	r3, r7, #4
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	605a      	str	r2, [r3, #4]
 80056a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056a2:	4b1d      	ldr	r3, [pc, #116]	; (8005718 <MX_TIM2_Init+0x94>)
 80056a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80056aa:	4b1b      	ldr	r3, [pc, #108]	; (8005718 <MX_TIM2_Init+0x94>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056b0:	4b19      	ldr	r3, [pc, #100]	; (8005718 <MX_TIM2_Init+0x94>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80056b6:	4b18      	ldr	r3, [pc, #96]	; (8005718 <MX_TIM2_Init+0x94>)
 80056b8:	2263      	movs	r2, #99	; 0x63
 80056ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056bc:	4b16      	ldr	r3, [pc, #88]	; (8005718 <MX_TIM2_Init+0x94>)
 80056be:	2200      	movs	r2, #0
 80056c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <MX_TIM2_Init+0x94>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80056c8:	4813      	ldr	r0, [pc, #76]	; (8005718 <MX_TIM2_Init+0x94>)
 80056ca:	f004 fddd 	bl	800a288 <HAL_TIM_Base_Init>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80056d4:	f000 faa8 	bl	8005c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80056de:	f107 0310 	add.w	r3, r7, #16
 80056e2:	4619      	mov	r1, r3
 80056e4:	480c      	ldr	r0, [pc, #48]	; (8005718 <MX_TIM2_Init+0x94>)
 80056e6:	f005 f9e3 	bl	800aab0 <HAL_TIM_ConfigClockSource>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80056f0:	f000 fa9a 	bl	8005c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80056f4:	2320      	movs	r3, #32
 80056f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	4619      	mov	r1, r3
 8005700:	4805      	ldr	r0, [pc, #20]	; (8005718 <MX_TIM2_Init+0x94>)
 8005702:	f005 ff29 	bl	800b558 <HAL_TIMEx_MasterConfigSynchronization>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800570c:	f000 fa8c 	bl	8005c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005710:	bf00      	nop
 8005712:	3720      	adds	r7, #32
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000534 	.word	0x20000534

0800571c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005720:	4b14      	ldr	r3, [pc, #80]	; (8005774 <MX_USART2_UART_Init+0x58>)
 8005722:	4a15      	ldr	r2, [pc, #84]	; (8005778 <MX_USART2_UART_Init+0x5c>)
 8005724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005726:	4b13      	ldr	r3, [pc, #76]	; (8005774 <MX_USART2_UART_Init+0x58>)
 8005728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800572c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800572e:	4b11      	ldr	r3, [pc, #68]	; (8005774 <MX_USART2_UART_Init+0x58>)
 8005730:	2200      	movs	r2, #0
 8005732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <MX_USART2_UART_Init+0x58>)
 8005736:	2200      	movs	r2, #0
 8005738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800573a:	4b0e      	ldr	r3, [pc, #56]	; (8005774 <MX_USART2_UART_Init+0x58>)
 800573c:	2200      	movs	r2, #0
 800573e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005740:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <MX_USART2_UART_Init+0x58>)
 8005742:	220c      	movs	r2, #12
 8005744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <MX_USART2_UART_Init+0x58>)
 8005748:	2200      	movs	r2, #0
 800574a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800574c:	4b09      	ldr	r3, [pc, #36]	; (8005774 <MX_USART2_UART_Init+0x58>)
 800574e:	2200      	movs	r2, #0
 8005750:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005752:	4b08      	ldr	r3, [pc, #32]	; (8005774 <MX_USART2_UART_Init+0x58>)
 8005754:	2200      	movs	r2, #0
 8005756:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <MX_USART2_UART_Init+0x58>)
 800575a:	2200      	movs	r2, #0
 800575c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800575e:	4805      	ldr	r0, [pc, #20]	; (8005774 <MX_USART2_UART_Init+0x58>)
 8005760:	f006 f82a 	bl	800b7b8 <HAL_UART_Init>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800576a:	f000 fa5d 	bl	8005c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	200015fc 	.word	0x200015fc
 8005778:	40004400 	.word	0x40004400

0800577c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005782:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <MX_DMA_Init+0x38>)
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4a0b      	ldr	r2, [pc, #44]	; (80057b4 <MX_DMA_Init+0x38>)
 8005788:	f043 0301 	orr.w	r3, r3, #1
 800578c:	6153      	str	r3, [r2, #20]
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <MX_DMA_Init+0x38>)
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	607b      	str	r3, [r7, #4]
 8005798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	200d      	movs	r0, #13
 80057a0:	f002 fb27 	bl	8007df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80057a4:	200d      	movs	r0, #13
 80057a6:	f002 fb40 	bl	8007e2a <HAL_NVIC_EnableIRQ>

}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40021000 	.word	0x40021000

080057b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057be:	f107 0314 	add.w	r3, r7, #20
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	605a      	str	r2, [r3, #4]
 80057c8:	609a      	str	r2, [r3, #8]
 80057ca:	60da      	str	r2, [r3, #12]
 80057cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80057ce:	4b66      	ldr	r3, [pc, #408]	; (8005968 <MX_GPIO_Init+0x1b0>)
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4a65      	ldr	r2, [pc, #404]	; (8005968 <MX_GPIO_Init+0x1b0>)
 80057d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80057d8:	6153      	str	r3, [r2, #20]
 80057da:	4b63      	ldr	r3, [pc, #396]	; (8005968 <MX_GPIO_Init+0x1b0>)
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80057e6:	4b60      	ldr	r3, [pc, #384]	; (8005968 <MX_GPIO_Init+0x1b0>)
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	4a5f      	ldr	r2, [pc, #380]	; (8005968 <MX_GPIO_Init+0x1b0>)
 80057ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057f0:	6153      	str	r3, [r2, #20]
 80057f2:	4b5d      	ldr	r3, [pc, #372]	; (8005968 <MX_GPIO_Init+0x1b0>)
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057fe:	4b5a      	ldr	r3, [pc, #360]	; (8005968 <MX_GPIO_Init+0x1b0>)
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	4a59      	ldr	r2, [pc, #356]	; (8005968 <MX_GPIO_Init+0x1b0>)
 8005804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005808:	6153      	str	r3, [r2, #20]
 800580a:	4b57      	ldr	r3, [pc, #348]	; (8005968 <MX_GPIO_Init+0x1b0>)
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	60bb      	str	r3, [r7, #8]
 8005814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005816:	4b54      	ldr	r3, [pc, #336]	; (8005968 <MX_GPIO_Init+0x1b0>)
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	4a53      	ldr	r2, [pc, #332]	; (8005968 <MX_GPIO_Init+0x1b0>)
 800581c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005820:	6153      	str	r3, [r2, #20]
 8005822:	4b51      	ldr	r3, [pc, #324]	; (8005968 <MX_GPIO_Init+0x1b0>)
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582a:	607b      	str	r3, [r7, #4]
 800582c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800582e:	2200      	movs	r2, #0
 8005830:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8005834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005838:	f003 f980 	bl	8008b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800583c:	2200      	movs	r2, #0
 800583e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8005842:	484a      	ldr	r0, [pc, #296]	; (800596c <MX_GPIO_Init+0x1b4>)
 8005844:	f003 f97a 	bl	8008b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_4|GPIO_PIN_5 
 8005848:	2200      	movs	r2, #0
 800584a:	f640 01f4 	movw	r1, #2292	; 0x8f4
 800584e:	4848      	ldr	r0, [pc, #288]	; (8005970 <MX_GPIO_Init+0x1b8>)
 8005850:	f003 f974 	bl	8008b3c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005854:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800585a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800585e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005864:	f107 0314 	add.w	r3, r7, #20
 8005868:	4619      	mov	r1, r3
 800586a:	4840      	ldr	r0, [pc, #256]	; (800596c <MX_GPIO_Init+0x1b4>)
 800586c:	f002 ffc4 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005870:	2320      	movs	r3, #32
 8005872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005874:	2301      	movs	r3, #1
 8005876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005878:	2301      	movs	r3, #1
 800587a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800587c:	2300      	movs	r3, #0
 800587e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005880:	f107 0314 	add.w	r3, r7, #20
 8005884:	4619      	mov	r1, r3
 8005886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800588a:	f002 ffb5 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 800588e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005892:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005894:	2311      	movs	r3, #17
 8005896:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005898:	2301      	movs	r3, #1
 800589a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800589c:	2300      	movs	r3, #0
 800589e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058a0:	f107 0314 	add.w	r3, r7, #20
 80058a4:	4619      	mov	r1, r3
 80058a6:	4831      	ldr	r0, [pc, #196]	; (800596c <MX_GPIO_Init+0x1b4>)
 80058a8:	f002 ffa6 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11;
 80058ac:	f640 0304 	movw	r3, #2052	; 0x804
 80058b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80058b2:	2311      	movs	r3, #17
 80058b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058b6:	2301      	movs	r3, #1
 80058b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058ba:	2300      	movs	r3, #0
 80058bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058be:	f107 0314 	add.w	r3, r7, #20
 80058c2:	4619      	mov	r1, r3
 80058c4:	482a      	ldr	r0, [pc, #168]	; (8005970 <MX_GPIO_Init+0x1b8>)
 80058c6:	f002 ff97 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80058d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058d4:	2301      	movs	r3, #1
 80058d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058d8:	f107 0314 	add.w	r3, r7, #20
 80058dc:	4619      	mov	r1, r3
 80058de:	4823      	ldr	r0, [pc, #140]	; (800596c <MX_GPIO_Init+0x1b4>)
 80058e0:	f002 ff8a 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80058e4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80058e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80058ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80058f0:	2301      	movs	r3, #1
 80058f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058f4:	f107 0314 	add.w	r3, r7, #20
 80058f8:	4619      	mov	r1, r3
 80058fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058fe:	f002 ff7b 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005902:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005908:	2311      	movs	r3, #17
 800590a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800590c:	2301      	movs	r3, #1
 800590e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005910:	2300      	movs	r3, #0
 8005912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005914:	f107 0314 	add.w	r3, r7, #20
 8005918:	4619      	mov	r1, r3
 800591a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800591e:	f002 ff6b 	bl	80087f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005922:	23f0      	movs	r3, #240	; 0xf0
 8005924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005926:	2301      	movs	r3, #1
 8005928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800592a:	2300      	movs	r3, #0
 800592c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800592e:	2300      	movs	r3, #0
 8005930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005932:	f107 0314 	add.w	r3, r7, #20
 8005936:	4619      	mov	r1, r3
 8005938:	480d      	ldr	r0, [pc, #52]	; (8005970 <MX_GPIO_Init+0x1b8>)
 800593a:	f002 ff5d 	bl	80087f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800593e:	2200      	movs	r2, #0
 8005940:	2100      	movs	r1, #0
 8005942:	2017      	movs	r0, #23
 8005944:	f002 fa55 	bl	8007df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005948:	2017      	movs	r0, #23
 800594a:	f002 fa6e 	bl	8007e2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800594e:	2200      	movs	r2, #0
 8005950:	2100      	movs	r1, #0
 8005952:	2028      	movs	r0, #40	; 0x28
 8005954:	f002 fa4d 	bl	8007df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005958:	2028      	movs	r0, #40	; 0x28
 800595a:	f002 fa66 	bl	8007e2a <HAL_NVIC_EnableIRQ>

}
 800595e:	bf00      	nop
 8005960:	3728      	adds	r7, #40	; 0x28
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000
 800596c:	48000800 	.word	0x48000800
 8005970:	48000400 	.word	0x48000400

08005974 <buttonbounce>:

/* USER CODE BEGIN 4 */
void buttonbounce(){
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
	//middle start
	pinstate_m = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8005978:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800597c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005980:	f003 f8c4 	bl	8008b0c <HAL_GPIO_ReadPin>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	4b96      	ldr	r3, [pc, #600]	; (8005be4 <buttonbounce+0x270>)
 800598a:	701a      	strb	r2, [r3, #0]
	if (buttonState_m == 0)
 800598c:	4b96      	ldr	r3, [pc, #600]	; (8005be8 <buttonbounce+0x274>)
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d114      	bne.n	80059be <buttonbounce+0x4a>
	{
		if ((pinstate_m == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast_m) >= 10))
 8005994:	4b93      	ldr	r3, [pc, #588]	; (8005be4 <buttonbounce+0x270>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d12b      	bne.n	80059f4 <buttonbounce+0x80>
 800599c:	f000 fc1c 	bl	80061d8 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b92      	ldr	r3, [pc, #584]	; (8005bec <buttonbounce+0x278>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b09      	cmp	r3, #9
 80059aa:	d923      	bls.n	80059f4 <buttonbounce+0x80>
		{
			// button pushed down
			buttonState_m = 1;
 80059ac:	4b8e      	ldr	r3, [pc, #568]	; (8005be8 <buttonbounce+0x274>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	701a      	strb	r2, [r3, #0]
			tLast_m = HAL_GetTick();
 80059b2:	f000 fc11 	bl	80061d8 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	4b8c      	ldr	r3, [pc, #560]	; (8005bec <buttonbounce+0x278>)
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	e01a      	b.n	80059f4 <buttonbounce+0x80>
		}
	}
	else if (buttonState_m == 1)
 80059be:	4b8a      	ldr	r3, [pc, #552]	; (8005be8 <buttonbounce+0x274>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d116      	bne.n	80059f4 <buttonbounce+0x80>
	{
		if ((pinstate_m == GPIO_PIN_SET) && ((HAL_GetTick() - tLast_m) >= 10))
 80059c6:	4b87      	ldr	r3, [pc, #540]	; (8005be4 <buttonbounce+0x270>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d112      	bne.n	80059f4 <buttonbounce+0x80>
 80059ce:	f000 fc03 	bl	80061d8 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	4b85      	ldr	r3, [pc, #532]	; (8005bec <buttonbounce+0x278>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b09      	cmp	r3, #9
 80059dc:	d90a      	bls.n	80059f4 <buttonbounce+0x80>
		{
			// button released
			press = 1;
 80059de:	4b84      	ldr	r3, [pc, #528]	; (8005bf0 <buttonbounce+0x27c>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
			//									menu_mode = 0;
			//									measurment_mode = 1;
			//									//dalk eerder display_mode, los ander measurment_mode's
			//								}
			// Lcd_clear(&lcd);
			buttonState_m = 0;
 80059e4:	4b80      	ldr	r3, [pc, #512]	; (8005be8 <buttonbounce+0x274>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
			tLast_m = HAL_GetTick();
 80059ea:	f000 fbf5 	bl	80061d8 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	4b7e      	ldr	r3, [pc, #504]	; (8005bec <buttonbounce+0x278>)
 80059f2:	601a      	str	r2, [r3, #0]
	}

	// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, display_state-1);
	//middle end
	//left start
	pinstate_l = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 80059f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059fc:	f003 f886 	bl	8008b0c <HAL_GPIO_ReadPin>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	4b7b      	ldr	r3, [pc, #492]	; (8005bf4 <buttonbounce+0x280>)
 8005a06:	701a      	strb	r2, [r3, #0]
	if (buttonState_l == 0)
 8005a08:	4b7b      	ldr	r3, [pc, #492]	; (8005bf8 <buttonbounce+0x284>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d114      	bne.n	8005a3a <buttonbounce+0xc6>
	{
		if ((pinstate_l == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast_l) >= 10))
 8005a10:	4b78      	ldr	r3, [pc, #480]	; (8005bf4 <buttonbounce+0x280>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d12b      	bne.n	8005a70 <buttonbounce+0xfc>
 8005a18:	f000 fbde 	bl	80061d8 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	4b77      	ldr	r3, [pc, #476]	; (8005bfc <buttonbounce+0x288>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	2b09      	cmp	r3, #9
 8005a26:	d923      	bls.n	8005a70 <buttonbounce+0xfc>
		{
			// button pushed down
			buttonState_l = 1;
 8005a28:	4b73      	ldr	r3, [pc, #460]	; (8005bf8 <buttonbounce+0x284>)
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	701a      	strb	r2, [r3, #0]
			tLast_l = HAL_GetTick();
 8005a2e:	f000 fbd3 	bl	80061d8 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	4b71      	ldr	r3, [pc, #452]	; (8005bfc <buttonbounce+0x288>)
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	e01a      	b.n	8005a70 <buttonbounce+0xfc>
		}
	}
	else if (buttonState_l == 1)
 8005a3a:	4b6f      	ldr	r3, [pc, #444]	; (8005bf8 <buttonbounce+0x284>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d116      	bne.n	8005a70 <buttonbounce+0xfc>
	{
		if ((pinstate_l == GPIO_PIN_SET) && ((HAL_GetTick() - tLast_l) >= 10))
 8005a42:	4b6c      	ldr	r3, [pc, #432]	; (8005bf4 <buttonbounce+0x280>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d112      	bne.n	8005a70 <buttonbounce+0xfc>
 8005a4a:	f000 fbc5 	bl	80061d8 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4b6a      	ldr	r3, [pc, #424]	; (8005bfc <buttonbounce+0x288>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b09      	cmp	r3, #9
 8005a58:	d90a      	bls.n	8005a70 <buttonbounce+0xfc>
		{
			// button released
			// press = 1;
			press = 1;
 8005a5a:	4b65      	ldr	r3, [pc, #404]	; (8005bf0 <buttonbounce+0x27c>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
			// HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
			buttonState_l = 0;
 8005a60:	4b65      	ldr	r3, [pc, #404]	; (8005bf8 <buttonbounce+0x284>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
			tLast_l = HAL_GetTick();
 8005a66:	f000 fbb7 	bl	80061d8 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	4b63      	ldr	r3, [pc, #396]	; (8005bfc <buttonbounce+0x288>)
 8005a6e:	601a      	str	r2, [r3, #0]
		}
	}
	//left end
	//right start
	pinstate_r = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8005a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a78:	f003 f848 	bl	8008b0c <HAL_GPIO_ReadPin>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	461a      	mov	r2, r3
 8005a80:	4b5f      	ldr	r3, [pc, #380]	; (8005c00 <buttonbounce+0x28c>)
 8005a82:	701a      	strb	r2, [r3, #0]
	if (buttonState_r == 0)
 8005a84:	4b5f      	ldr	r3, [pc, #380]	; (8005c04 <buttonbounce+0x290>)
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d114      	bne.n	8005ab6 <buttonbounce+0x142>
	{
		if ((pinstate_r == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast_r) >= 10))
 8005a8c:	4b5c      	ldr	r3, [pc, #368]	; (8005c00 <buttonbounce+0x28c>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d12b      	bne.n	8005aec <buttonbounce+0x178>
 8005a94:	f000 fba0 	bl	80061d8 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	4b5b      	ldr	r3, [pc, #364]	; (8005c08 <buttonbounce+0x294>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b09      	cmp	r3, #9
 8005aa2:	d923      	bls.n	8005aec <buttonbounce+0x178>
		{
			// button pushed down
			buttonState_r = 1;
 8005aa4:	4b57      	ldr	r3, [pc, #348]	; (8005c04 <buttonbounce+0x290>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	701a      	strb	r2, [r3, #0]
			tLast_r = HAL_GetTick();
 8005aaa:	f000 fb95 	bl	80061d8 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	4b55      	ldr	r3, [pc, #340]	; (8005c08 <buttonbounce+0x294>)
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e01a      	b.n	8005aec <buttonbounce+0x178>
		}
	}
	else if (buttonState_r == 1)
 8005ab6:	4b53      	ldr	r3, [pc, #332]	; (8005c04 <buttonbounce+0x290>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d116      	bne.n	8005aec <buttonbounce+0x178>
	{
		if ((pinstate_r == GPIO_PIN_SET) && ((HAL_GetTick() - tLast_r) >= 10))
 8005abe:	4b50      	ldr	r3, [pc, #320]	; (8005c00 <buttonbounce+0x28c>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d112      	bne.n	8005aec <buttonbounce+0x178>
 8005ac6:	f000 fb87 	bl	80061d8 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	4b4e      	ldr	r3, [pc, #312]	; (8005c08 <buttonbounce+0x294>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b09      	cmp	r3, #9
 8005ad4:	d90a      	bls.n	8005aec <buttonbounce+0x178>
		{
			// button released
			//  press = 1;
			press = 1;
 8005ad6:	4b46      	ldr	r3, [pc, #280]	; (8005bf0 <buttonbounce+0x27c>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	701a      	strb	r2, [r3, #0]
			// HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
			buttonState_r = 0;
 8005adc:	4b49      	ldr	r3, [pc, #292]	; (8005c04 <buttonbounce+0x290>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
			tLast_r = HAL_GetTick();
 8005ae2:	f000 fb79 	bl	80061d8 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	4b47      	ldr	r3, [pc, #284]	; (8005c08 <buttonbounce+0x294>)
 8005aea:	601a      	str	r2, [r3, #0]
		}
	}
	// right end
	// up start
	pinstate_u = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8005aec:	2180      	movs	r1, #128	; 0x80
 8005aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005af2:	f003 f80b 	bl	8008b0c <HAL_GPIO_ReadPin>
 8005af6:	4603      	mov	r3, r0
 8005af8:	461a      	mov	r2, r3
 8005afa:	4b44      	ldr	r3, [pc, #272]	; (8005c0c <buttonbounce+0x298>)
 8005afc:	701a      	strb	r2, [r3, #0]
	if (buttonState_u == 0)
 8005afe:	4b44      	ldr	r3, [pc, #272]	; (8005c10 <buttonbounce+0x29c>)
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d114      	bne.n	8005b30 <buttonbounce+0x1bc>
	{
		if ((pinstate_u == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast_u) >= 10))
 8005b06:	4b41      	ldr	r3, [pc, #260]	; (8005c0c <buttonbounce+0x298>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d12b      	bne.n	8005b66 <buttonbounce+0x1f2>
 8005b0e:	f000 fb63 	bl	80061d8 <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	4b3f      	ldr	r3, [pc, #252]	; (8005c14 <buttonbounce+0x2a0>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b09      	cmp	r3, #9
 8005b1c:	d923      	bls.n	8005b66 <buttonbounce+0x1f2>
		{
			// button pushed down
			buttonState_u = 1;
 8005b1e:	4b3c      	ldr	r3, [pc, #240]	; (8005c10 <buttonbounce+0x29c>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]
			tLast_u = HAL_GetTick();
 8005b24:	f000 fb58 	bl	80061d8 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	4b3a      	ldr	r3, [pc, #232]	; (8005c14 <buttonbounce+0x2a0>)
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e01a      	b.n	8005b66 <buttonbounce+0x1f2>
		}
	}
	else if (buttonState_u == 1)
 8005b30:	4b37      	ldr	r3, [pc, #220]	; (8005c10 <buttonbounce+0x29c>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d116      	bne.n	8005b66 <buttonbounce+0x1f2>
	{
		if ((pinstate_u == GPIO_PIN_SET) && ((HAL_GetTick() - tLast_u) >= 10))
 8005b38:	4b34      	ldr	r3, [pc, #208]	; (8005c0c <buttonbounce+0x298>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d112      	bne.n	8005b66 <buttonbounce+0x1f2>
 8005b40:	f000 fb4a 	bl	80061d8 <HAL_GetTick>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b33      	ldr	r3, [pc, #204]	; (8005c14 <buttonbounce+0x2a0>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	2b09      	cmp	r3, #9
 8005b4e:	d90a      	bls.n	8005b66 <buttonbounce+0x1f2>
		{
			// button released
			// press = 1;
			press = 1;
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <buttonbounce+0x27c>)
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
			// HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
			buttonState_u = 0;
 8005b56:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <buttonbounce+0x29c>)
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
			tLast_u = HAL_GetTick();
 8005b5c:	f000 fb3c 	bl	80061d8 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b2c      	ldr	r3, [pc, #176]	; (8005c14 <buttonbounce+0x2a0>)
 8005b64:	601a      	str	r2, [r3, #0]
		}
	}
	// up end
	// down start
	pinstate_d = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);
 8005b66:	2180      	movs	r1, #128	; 0x80
 8005b68:	482b      	ldr	r0, [pc, #172]	; (8005c18 <buttonbounce+0x2a4>)
 8005b6a:	f002 ffcf 	bl	8008b0c <HAL_GPIO_ReadPin>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	461a      	mov	r2, r3
 8005b72:	4b2a      	ldr	r3, [pc, #168]	; (8005c1c <buttonbounce+0x2a8>)
 8005b74:	701a      	strb	r2, [r3, #0]
	if (buttonState_d == 0)
 8005b76:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <buttonbounce+0x2ac>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d114      	bne.n	8005ba8 <buttonbounce+0x234>
	{
		if ((pinstate_d == GPIO_PIN_RESET) && ((HAL_GetTick() - tLast_d) >= 10))
 8005b7e:	4b27      	ldr	r3, [pc, #156]	; (8005c1c <buttonbounce+0x2a8>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d12b      	bne.n	8005bde <buttonbounce+0x26a>
 8005b86:	f000 fb27 	bl	80061d8 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4b25      	ldr	r3, [pc, #148]	; (8005c24 <buttonbounce+0x2b0>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	2b09      	cmp	r3, #9
 8005b94:	d923      	bls.n	8005bde <buttonbounce+0x26a>
		{
			// button pushed down
			buttonState_d = 1;
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <buttonbounce+0x2ac>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
			tLast_d = HAL_GetTick();
 8005b9c:	f000 fb1c 	bl	80061d8 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	4b20      	ldr	r3, [pc, #128]	; (8005c24 <buttonbounce+0x2b0>)
 8005ba4:	601a      	str	r2, [r3, #0]
			tLast_d = HAL_GetTick();

		}
	}
	// down end
}
 8005ba6:	e01a      	b.n	8005bde <buttonbounce+0x26a>
	else if (buttonState_d == 1)
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <buttonbounce+0x2ac>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d116      	bne.n	8005bde <buttonbounce+0x26a>
		if ((pinstate_d == GPIO_PIN_SET) && ((HAL_GetTick() - tLast_d) >= 100))
 8005bb0:	4b1a      	ldr	r3, [pc, #104]	; (8005c1c <buttonbounce+0x2a8>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d112      	bne.n	8005bde <buttonbounce+0x26a>
 8005bb8:	f000 fb0e 	bl	80061d8 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <buttonbounce+0x2b0>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b63      	cmp	r3, #99	; 0x63
 8005bc6:	d90a      	bls.n	8005bde <buttonbounce+0x26a>
			press = 1;
 8005bc8:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <buttonbounce+0x27c>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]
			buttonState_d = 0;
 8005bce:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <buttonbounce+0x2ac>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
			tLast_d = HAL_GetTick();
 8005bd4:	f000 fb00 	bl	80061d8 <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <buttonbounce+0x2b0>)
 8005bdc:	601a      	str	r2, [r3, #0]
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	200002d9 	.word	0x200002d9
 8005be8:	200000c4 	.word	0x200000c4
 8005bec:	200000b0 	.word	0x200000b0
 8005bf0:	20000010 	.word	0x20000010
 8005bf4:	200000e0 	.word	0x200000e0
 8005bf8:	200000c5 	.word	0x200000c5
 8005bfc:	200000b4 	.word	0x200000b4
 8005c00:	20000331 	.word	0x20000331
 8005c04:	200000c6 	.word	0x200000c6
 8005c08:	200000b8 	.word	0x200000b8
 8005c0c:	20001680 	.word	0x20001680
 8005c10:	200000c7 	.word	0x200000c7
 8005c14:	200000bc 	.word	0x200000bc
 8005c18:	48000800 	.word	0x48000800
 8005c1c:	2000032f 	.word	0x2000032f
 8005c20:	200000c8 	.word	0x200000c8
 8005c24:	200000c0 	.word	0x200000c0

08005c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005c2c:	bf00      	nop
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <HAL_MspInit+0x44>)
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	4a0e      	ldr	r2, [pc, #56]	; (8005c7c <HAL_MspInit+0x44>)
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	6193      	str	r3, [r2, #24]
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <HAL_MspInit+0x44>)
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	607b      	str	r3, [r7, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <HAL_MspInit+0x44>)
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <HAL_MspInit+0x44>)
 8005c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c60:	61d3      	str	r3, [r2, #28]
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_MspInit+0x44>)
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8005c6e:	2007      	movs	r0, #7
 8005c70:	f002 f8b4 	bl	8007ddc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c74:	bf00      	nop
 8005c76:	3708      	adds	r7, #8
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40021000 	.word	0x40021000

08005c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	; 0x28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c88:	f107 0314 	add.w	r3, r7, #20
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	609a      	str	r2, [r3, #8]
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a19      	ldr	r2, [pc, #100]	; (8005d04 <HAL_ADC_MspInit+0x84>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d12b      	bne.n	8005cfa <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 8005ca2:	4b19      	ldr	r3, [pc, #100]	; (8005d08 <HAL_ADC_MspInit+0x88>)
 8005ca4:	695b      	ldr	r3, [r3, #20]
 8005ca6:	4a18      	ldr	r2, [pc, #96]	; (8005d08 <HAL_ADC_MspInit+0x88>)
 8005ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cac:	6153      	str	r3, [r2, #20]
 8005cae:	4b16      	ldr	r3, [pc, #88]	; (8005d08 <HAL_ADC_MspInit+0x88>)
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cba:	4b13      	ldr	r3, [pc, #76]	; (8005d08 <HAL_ADC_MspInit+0x88>)
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	4a12      	ldr	r2, [pc, #72]	; (8005d08 <HAL_ADC_MspInit+0x88>)
 8005cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cc4:	6153      	str	r3, [r2, #20]
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <HAL_ADC_MspInit+0x88>)
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration    
    PB1     ------> ADC3_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cde:	f107 0314 	add.w	r3, r7, #20
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	4809      	ldr	r0, [pc, #36]	; (8005d0c <HAL_ADC_MspInit+0x8c>)
 8005ce6:	f002 fd87 	bl	80087f8 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8005cea:	2200      	movs	r2, #0
 8005cec:	2100      	movs	r1, #0
 8005cee:	202f      	movs	r0, #47	; 0x2f
 8005cf0:	f002 f87f 	bl	8007df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8005cf4:	202f      	movs	r0, #47	; 0x2f
 8005cf6:	f002 f898 	bl	8007e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005cfa:	bf00      	nop
 8005cfc:	3728      	adds	r7, #40	; 0x28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	50000400 	.word	0x50000400
 8005d08:	40021000 	.word	0x40021000
 8005d0c:	48000400 	.word	0x48000400

08005d10 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	; 0x28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d18:	f107 0314 	add.w	r3, r7, #20
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	605a      	str	r2, [r3, #4]
 8005d22:	609a      	str	r2, [r3, #8]
 8005d24:	60da      	str	r2, [r3, #12]
 8005d26:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2c      	ldr	r2, [pc, #176]	; (8005de0 <HAL_DAC_MspInit+0xd0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d152      	bne.n	8005dd8 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005d32:	4b2c      	ldr	r3, [pc, #176]	; (8005de4 <HAL_DAC_MspInit+0xd4>)
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4a2b      	ldr	r2, [pc, #172]	; (8005de4 <HAL_DAC_MspInit+0xd4>)
 8005d38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d3c:	61d3      	str	r3, [r2, #28]
 8005d3e:	4b29      	ldr	r3, [pc, #164]	; (8005de4 <HAL_DAC_MspInit+0xd4>)
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d46:	613b      	str	r3, [r7, #16]
 8005d48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d4a:	4b26      	ldr	r3, [pc, #152]	; (8005de4 <HAL_DAC_MspInit+0xd4>)
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <HAL_DAC_MspInit+0xd4>)
 8005d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d54:	6153      	str	r3, [r2, #20]
 8005d56:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <HAL_DAC_MspInit+0xd4>)
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005d62:	2310      	movs	r3, #16
 8005d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d66:	2303      	movs	r3, #3
 8005d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d6e:	f107 0314 	add.w	r3, r7, #20
 8005d72:	4619      	mov	r1, r3
 8005d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d78:	f002 fd3e 	bl	80087f8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8005d7c:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <HAL_DAC_MspInit+0xdc>)
 8005d80:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d82:	4b19      	ldr	r3, [pc, #100]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005d84:	2210      	movs	r2, #16
 8005d86:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d88:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005d8e:	4b16      	ldr	r3, [pc, #88]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005d90:	2280      	movs	r2, #128	; 0x80
 8005d92:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005d94:	4b14      	ldr	r3, [pc, #80]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d9a:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005d9c:	4b12      	ldr	r3, [pc, #72]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005d9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005da2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005da4:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005da6:	2220      	movs	r2, #32
 8005da8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005daa:	4b0f      	ldr	r3, [pc, #60]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005db0:	480d      	ldr	r0, [pc, #52]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005db2:	f002 faf6 	bl	80083a2 <HAL_DMA_Init>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d001      	beq.n	8005dc0 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8005dbc:	f7ff ff34 	bl	8005c28 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_DAC_MspInit+0xe0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a0a      	ldr	r2, [pc, #40]	; (8005df0 <HAL_DAC_MspInit+0xe0>)
 8005dc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005dca:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a06      	ldr	r2, [pc, #24]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005dd0:	609a      	str	r2, [r3, #8]
 8005dd2:	4a05      	ldr	r2, [pc, #20]	; (8005de8 <HAL_DAC_MspInit+0xd8>)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005dd8:	bf00      	nop
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	40007400 	.word	0x40007400
 8005de4:	40021000 	.word	0x40021000
 8005de8:	20000290 	.word	0x20000290
 8005dec:	40020030 	.word	0x40020030
 8005df0:	40010000 	.word	0x40010000

08005df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <HAL_TIM_Base_MspInit+0x68>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d114      	bne.n	8005e30 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005e06:	4b16      	ldr	r3, [pc, #88]	; (8005e60 <HAL_TIM_Base_MspInit+0x6c>)
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	4a15      	ldr	r2, [pc, #84]	; (8005e60 <HAL_TIM_Base_MspInit+0x6c>)
 8005e0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e10:	6193      	str	r3, [r2, #24]
 8005e12:	4b13      	ldr	r3, [pc, #76]	; (8005e60 <HAL_TIM_Base_MspInit+0x6c>)
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e1a:	60fb      	str	r3, [r7, #12]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005e1e:	2200      	movs	r2, #0
 8005e20:	2100      	movs	r1, #0
 8005e22:	201b      	movs	r0, #27
 8005e24:	f001 ffe5 	bl	8007df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8005e28:	201b      	movs	r0, #27
 8005e2a:	f001 fffe 	bl	8007e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005e2e:	e010      	b.n	8005e52 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e38:	d10b      	bne.n	8005e52 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <HAL_TIM_Base_MspInit+0x6c>)
 8005e3c:	69db      	ldr	r3, [r3, #28]
 8005e3e:	4a08      	ldr	r2, [pc, #32]	; (8005e60 <HAL_TIM_Base_MspInit+0x6c>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	61d3      	str	r3, [r2, #28]
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <HAL_TIM_Base_MspInit+0x6c>)
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	60bb      	str	r3, [r7, #8]
 8005e50:	68bb      	ldr	r3, [r7, #8]
}
 8005e52:	bf00      	nop
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	40012c00 	.word	0x40012c00
 8005e60:	40021000 	.word	0x40021000

08005e64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e6c:	f107 030c 	add.w	r3, r7, #12
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	605a      	str	r2, [r3, #4]
 8005e76:	609a      	str	r2, [r3, #8]
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a11      	ldr	r2, [pc, #68]	; (8005ec8 <HAL_TIM_MspPostInit+0x64>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d11b      	bne.n	8005ebe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e86:	4b11      	ldr	r3, [pc, #68]	; (8005ecc <HAL_TIM_MspPostInit+0x68>)
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	4a10      	ldr	r2, [pc, #64]	; (8005ecc <HAL_TIM_MspPostInit+0x68>)
 8005e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e90:	6153      	str	r3, [r2, #20]
 8005e92:	4b0e      	ldr	r3, [pc, #56]	; (8005ecc <HAL_TIM_MspPostInit+0x68>)
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e9a:	60bb      	str	r3, [r7, #8]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005eb2:	f107 030c 	add.w	r3, r7, #12
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4805      	ldr	r0, [pc, #20]	; (8005ed0 <HAL_TIM_MspPostInit+0x6c>)
 8005eba:	f002 fc9d 	bl	80087f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005ebe:	bf00      	nop
 8005ec0:	3720      	adds	r7, #32
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	40012c00 	.word	0x40012c00
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	48000800 	.word	0x48000800

08005ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08a      	sub	sp, #40	; 0x28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005edc:	f107 0314 	add.w	r3, r7, #20
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	605a      	str	r2, [r3, #4]
 8005ee6:	609a      	str	r2, [r3, #8]
 8005ee8:	60da      	str	r2, [r3, #12]
 8005eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a1b      	ldr	r2, [pc, #108]	; (8005f60 <HAL_UART_MspInit+0x8c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d130      	bne.n	8005f58 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ef6:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <HAL_UART_MspInit+0x90>)
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	4a1a      	ldr	r2, [pc, #104]	; (8005f64 <HAL_UART_MspInit+0x90>)
 8005efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f00:	61d3      	str	r3, [r2, #28]
 8005f02:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <HAL_UART_MspInit+0x90>)
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0a:	613b      	str	r3, [r7, #16]
 8005f0c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <HAL_UART_MspInit+0x90>)
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	4a14      	ldr	r2, [pc, #80]	; (8005f64 <HAL_UART_MspInit+0x90>)
 8005f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f18:	6153      	str	r3, [r2, #20]
 8005f1a:	4b12      	ldr	r3, [pc, #72]	; (8005f64 <HAL_UART_MspInit+0x90>)
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f22:	60fb      	str	r3, [r7, #12]
 8005f24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005f26:	230c      	movs	r3, #12
 8005f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f32:	2300      	movs	r3, #0
 8005f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f36:	2307      	movs	r3, #7
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f3a:	f107 0314 	add.w	r3, r7, #20
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f44:	f002 fc58 	bl	80087f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	2026      	movs	r0, #38	; 0x26
 8005f4e:	f001 ff50 	bl	8007df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f52:	2026      	movs	r0, #38	; 0x26
 8005f54:	f001 ff69 	bl	8007e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005f58:	bf00      	nop
 8005f5a:	3728      	adds	r7, #40	; 0x28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40004400 	.word	0x40004400
 8005f64:	40021000 	.word	0x40021000

08005f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f76:	b480      	push	{r7}
 8005f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f7a:	e7fe      	b.n	8005f7a <HardFault_Handler+0x4>

08005f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f80:	e7fe      	b.n	8005f80 <MemManage_Handler+0x4>

08005f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f82:	b480      	push	{r7}
 8005f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f86:	e7fe      	b.n	8005f86 <BusFault_Handler+0x4>

08005f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f8c:	e7fe      	b.n	8005f8c <UsageFault_Handler+0x4>

08005f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f92:	bf00      	nop
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fa0:	bf00      	nop
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005faa:	b480      	push	{r7}
 8005fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005fae:	bf00      	nop
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005fbc:	f000 f8f8 	bl	80061b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005fc0:	bf00      	nop
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005fc8:	4802      	ldr	r0, [pc, #8]	; (8005fd4 <DMA1_Channel3_IRQHandler+0x10>)
 8005fca:	f002 fb07 	bl	80085dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005fce:	bf00      	nop
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000290 	.word	0x20000290

08005fd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
	//	{
	//		tickD = HAL_GetTick();
	//		buttonD = 1;
	//	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8005fdc:	2080      	movs	r0, #128	; 0x80
 8005fde:	f002 fdc5 	bl	8008b6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005fe2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005fe6:	f002 fdc1 	bl	8008b6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8005fea:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005fee:	f002 fdbd 	bl	8008b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005ff2:	bf00      	nop
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	timer_interrupt = 1;
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <TIM1_CC_IRQHandler+0x14>)
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006002:	4803      	ldr	r0, [pc, #12]	; (8006010 <TIM1_CC_IRQHandler+0x18>)
 8006004:	f004 fbba 	bl	800a77c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006008:	bf00      	nop
 800600a:	bd80      	pop	{r7, pc}
 800600c:	2000168c 	.word	0x2000168c
 8006010:	200004e4 	.word	0x200004e4

08006014 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006018:	4802      	ldr	r0, [pc, #8]	; (8006024 <USART2_IRQHandler+0x10>)
 800601a:	f005 fcfd 	bl	800ba18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800601e:	bf00      	nop
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	200015fc 	.word	0x200015fc

08006028 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
//		tick = HAL_GetTick();
//		button = 1;
//	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800602c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006030:	f002 fd9c 	bl	8008b6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006034:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006038:	f002 fd98 	bl	8008b6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800603c:	bf00      	nop
 800603e:	bd80      	pop	{r7, pc}

08006040 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8006044:	4802      	ldr	r0, [pc, #8]	; (8006050 <ADC3_IRQHandler+0x10>)
 8006046:	f000 fd69 	bl	8006b1c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800604a:	bf00      	nop
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	200002dc 	.word	0x200002dc

08006054 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800605c:	4b11      	ldr	r3, [pc, #68]	; (80060a4 <_sbrk+0x50>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d102      	bne.n	800606a <_sbrk+0x16>
		heap_end = &end;
 8006064:	4b0f      	ldr	r3, [pc, #60]	; (80060a4 <_sbrk+0x50>)
 8006066:	4a10      	ldr	r2, [pc, #64]	; (80060a8 <_sbrk+0x54>)
 8006068:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800606a:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <_sbrk+0x50>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006070:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <_sbrk+0x50>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4413      	add	r3, r2
 8006078:	466a      	mov	r2, sp
 800607a:	4293      	cmp	r3, r2
 800607c:	d907      	bls.n	800608e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800607e:	f006 fe05 	bl	800cc8c <__errno>
 8006082:	4602      	mov	r2, r0
 8006084:	230c      	movs	r3, #12
 8006086:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8006088:	f04f 33ff 	mov.w	r3, #4294967295
 800608c:	e006      	b.n	800609c <_sbrk+0x48>
	}

	heap_end += incr;
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <_sbrk+0x50>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4413      	add	r3, r2
 8006096:	4a03      	ldr	r2, [pc, #12]	; (80060a4 <_sbrk+0x50>)
 8006098:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800609a:	68fb      	ldr	r3, [r7, #12]
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	200000d4 	.word	0x200000d4
 80060a8:	20001698 	.word	0x20001698

080060ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060b0:	4b06      	ldr	r3, [pc, #24]	; (80060cc <SystemInit+0x20>)
 80060b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b6:	4a05      	ldr	r2, [pc, #20]	; (80060cc <SystemInit+0x20>)
 80060b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80060bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060c0:	bf00      	nop
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	e000ed00 	.word	0xe000ed00

080060d0 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80060d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006108 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80060d4:	480d      	ldr	r0, [pc, #52]	; (800610c <LoopForever+0x6>)
  ldr r1, =_edata
 80060d6:	490e      	ldr	r1, [pc, #56]	; (8006110 <LoopForever+0xa>)
  ldr r2, =_sidata
 80060d8:	4a0e      	ldr	r2, [pc, #56]	; (8006114 <LoopForever+0xe>)
  movs r3, #0
 80060da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060dc:	e002      	b.n	80060e4 <LoopCopyDataInit>

080060de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060e2:	3304      	adds	r3, #4

080060e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060e8:	d3f9      	bcc.n	80060de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060ea:	4a0b      	ldr	r2, [pc, #44]	; (8006118 <LoopForever+0x12>)
  ldr r4, =_ebss
 80060ec:	4c0b      	ldr	r4, [pc, #44]	; (800611c <LoopForever+0x16>)
  movs r3, #0
 80060ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060f0:	e001      	b.n	80060f6 <LoopFillZerobss>

080060f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060f4:	3204      	adds	r2, #4

080060f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060f8:	d3fb      	bcc.n	80060f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80060fa:	f7ff ffd7 	bl	80060ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060fe:	f006 fdcb 	bl	800cc98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006102:	f7fa ffc1 	bl	8001088 <main>

08006106 <LoopForever>:

LoopForever:
    b LoopForever
 8006106:	e7fe      	b.n	8006106 <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006108:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800610c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006110:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8006114:	0800e8e8 	.word	0x0800e8e8
  ldr r2, =_sbss
 8006118:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800611c:	20001698 	.word	0x20001698

08006120 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006120:	e7fe      	b.n	8006120 <ADC1_2_IRQHandler>
	...

08006124 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006128:	4b08      	ldr	r3, [pc, #32]	; (800614c <HAL_Init+0x28>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a07      	ldr	r2, [pc, #28]	; (800614c <HAL_Init+0x28>)
 800612e:	f043 0310 	orr.w	r3, r3, #16
 8006132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006134:	2003      	movs	r0, #3
 8006136:	f001 fe51 	bl	8007ddc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800613a:	2000      	movs	r0, #0
 800613c:	f000 f808 	bl	8006150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006140:	f7ff fd7a 	bl	8005c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	40022000 	.word	0x40022000

08006150 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006158:	4b12      	ldr	r3, [pc, #72]	; (80061a4 <HAL_InitTick+0x54>)
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	4b12      	ldr	r3, [pc, #72]	; (80061a8 <HAL_InitTick+0x58>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	4619      	mov	r1, r3
 8006162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006166:	fbb3 f3f1 	udiv	r3, r3, r1
 800616a:	fbb2 f3f3 	udiv	r3, r2, r3
 800616e:	4618      	mov	r0, r3
 8006170:	f001 fe69 	bl	8007e46 <HAL_SYSTICK_Config>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e00e      	b.n	800619c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b0f      	cmp	r3, #15
 8006182:	d80a      	bhi.n	800619a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006184:	2200      	movs	r2, #0
 8006186:	6879      	ldr	r1, [r7, #4]
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	f001 fe31 	bl	8007df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006190:	4a06      	ldr	r2, [pc, #24]	; (80061ac <HAL_InitTick+0x5c>)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	e000      	b.n	800619c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
}
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	20000020 	.word	0x20000020
 80061a8:	20000028 	.word	0x20000028
 80061ac:	20000024 	.word	0x20000024

080061b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061b0:	b480      	push	{r7}
 80061b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061b4:	4b06      	ldr	r3, [pc, #24]	; (80061d0 <HAL_IncTick+0x20>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_IncTick+0x24>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4413      	add	r3, r2
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <HAL_IncTick+0x24>)
 80061c2:	6013      	str	r3, [r2, #0]
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	20000028 	.word	0x20000028
 80061d4:	20001690 	.word	0x20001690

080061d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
  return uwTick;  
 80061dc:	4b03      	ldr	r3, [pc, #12]	; (80061ec <HAL_GetTick+0x14>)
 80061de:	681b      	ldr	r3, [r3, #0]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20001690 	.word	0x20001690

080061f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80061f8:	f7ff ffee 	bl	80061d8 <HAL_GetTick>
 80061fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006208:	d005      	beq.n	8006216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800620a:	4b09      	ldr	r3, [pc, #36]	; (8006230 <HAL_Delay+0x40>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006216:	bf00      	nop
 8006218:	f7ff ffde 	bl	80061d8 <HAL_GetTick>
 800621c:	4602      	mov	r2, r0
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	1ad3      	subs	r3, r2, r3
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	429a      	cmp	r2, r3
 8006226:	d8f7      	bhi.n	8006218 <HAL_Delay+0x28>
  {
  }
}
 8006228:	bf00      	nop
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	20000028 	.word	0x20000028

08006234 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8006250:	bf00      	nop
 8006252:	370c      	adds	r7, #12
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b09a      	sub	sp, #104	; 0x68
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e1e3      	b.n	8006658 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	f003 0310 	and.w	r3, r3, #16
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d176      	bne.n	8006390 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d152      	bne.n	8006350 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f7ff fcdb 	bl	8005c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d13b      	bne.n	8006350 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 fb95 	bl	8007a08 <ADC_Disable>
 80062de:	4603      	mov	r3, r0
 80062e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	f003 0310 	and.w	r3, r3, #16
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d12f      	bne.n	8006350 <HAL_ADC_Init+0xe0>
 80062f0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d12b      	bne.n	8006350 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006300:	f023 0302 	bic.w	r3, r3, #2
 8006304:	f043 0202 	orr.w	r2, r3, #2
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800631a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800632a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800632c:	4b92      	ldr	r3, [pc, #584]	; (8006578 <HAL_ADC_Init+0x308>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a92      	ldr	r2, [pc, #584]	; (800657c <HAL_ADC_Init+0x30c>)
 8006332:	fba2 2303 	umull	r2, r3, r2, r3
 8006336:	0c9a      	lsrs	r2, r3, #18
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006342:	e002      	b.n	800634a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	3b01      	subs	r3, #1
 8006348:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f9      	bne.n	8006344 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d007      	beq.n	800636e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8006368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636c:	d110      	bne.n	8006390 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006372:	f023 0312 	bic.w	r3, r3, #18
 8006376:	f043 0210 	orr.w	r2, r3, #16
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006382:	f043 0201 	orr.w	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	f003 0310 	and.w	r3, r3, #16
 8006398:	2b00      	cmp	r3, #0
 800639a:	f040 8150 	bne.w	800663e <HAL_ADC_Init+0x3ce>
 800639e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f040 814b 	bne.w	800663e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f040 8143 	bne.w	800663e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80063c0:	f043 0202 	orr.w	r2, r3, #2
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063d0:	d004      	beq.n	80063dc <HAL_ADC_Init+0x16c>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a6a      	ldr	r2, [pc, #424]	; (8006580 <HAL_ADC_Init+0x310>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d101      	bne.n	80063e0 <HAL_ADC_Init+0x170>
 80063dc:	4b69      	ldr	r3, [pc, #420]	; (8006584 <HAL_ADC_Init+0x314>)
 80063de:	e000      	b.n	80063e2 <HAL_ADC_Init+0x172>
 80063e0:	4b69      	ldr	r3, [pc, #420]	; (8006588 <HAL_ADC_Init+0x318>)
 80063e2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ec:	d102      	bne.n	80063f4 <HAL_ADC_Init+0x184>
 80063ee:	4b64      	ldr	r3, [pc, #400]	; (8006580 <HAL_ADC_Init+0x310>)
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	e01a      	b.n	800642a <HAL_ADC_Init+0x1ba>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a61      	ldr	r2, [pc, #388]	; (8006580 <HAL_ADC_Init+0x310>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d103      	bne.n	8006406 <HAL_ADC_Init+0x196>
 80063fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e011      	b.n	800642a <HAL_ADC_Init+0x1ba>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a60      	ldr	r2, [pc, #384]	; (800658c <HAL_ADC_Init+0x31c>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d102      	bne.n	8006416 <HAL_ADC_Init+0x1a6>
 8006410:	4b5f      	ldr	r3, [pc, #380]	; (8006590 <HAL_ADC_Init+0x320>)
 8006412:	60fb      	str	r3, [r7, #12]
 8006414:	e009      	b.n	800642a <HAL_ADC_Init+0x1ba>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a5d      	ldr	r2, [pc, #372]	; (8006590 <HAL_ADC_Init+0x320>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d102      	bne.n	8006426 <HAL_ADC_Init+0x1b6>
 8006420:	4b5a      	ldr	r3, [pc, #360]	; (800658c <HAL_ADC_Init+0x31c>)
 8006422:	60fb      	str	r3, [r7, #12]
 8006424:	e001      	b.n	800642a <HAL_ADC_Init+0x1ba>
 8006426:	2300      	movs	r3, #0
 8006428:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	2b01      	cmp	r3, #1
 8006436:	d108      	bne.n	800644a <HAL_ADC_Init+0x1da>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b01      	cmp	r3, #1
 8006444:	d101      	bne.n	800644a <HAL_ADC_Init+0x1da>
 8006446:	2301      	movs	r3, #1
 8006448:	e000      	b.n	800644c <HAL_ADC_Init+0x1dc>
 800644a:	2300      	movs	r3, #0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d11c      	bne.n	800648a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006450:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8006452:	2b00      	cmp	r3, #0
 8006454:	d010      	beq.n	8006478 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 0303 	and.w	r3, r3, #3
 800645e:	2b01      	cmp	r3, #1
 8006460:	d107      	bne.n	8006472 <HAL_ADC_Init+0x202>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b01      	cmp	r3, #1
 800646c:	d101      	bne.n	8006472 <HAL_ADC_Init+0x202>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <HAL_ADC_Init+0x204>
 8006472:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8006474:	2b00      	cmp	r3, #0
 8006476:	d108      	bne.n	800648a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8006478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	431a      	orrs	r2, r3
 8006486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006488:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7e5b      	ldrb	r3, [r3, #25]
 800648e:	035b      	lsls	r3, r3, #13
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006494:	2a01      	cmp	r2, #1
 8006496:	d002      	beq.n	800649e <HAL_ADC_Init+0x22e>
 8006498:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800649c:	e000      	b.n	80064a0 <HAL_ADC_Init+0x230>
 800649e:	2200      	movs	r2, #0
 80064a0:	431a      	orrs	r2, r3
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	431a      	orrs	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80064b0:	4313      	orrs	r3, r2
 80064b2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d11b      	bne.n	80064f6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	7e5b      	ldrb	r3, [r3, #25]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d109      	bne.n	80064da <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	3b01      	subs	r3, #1
 80064cc:	045a      	lsls	r2, r3, #17
 80064ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d6:	663b      	str	r3, [r7, #96]	; 0x60
 80064d8:	e00d      	b.n	80064f6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064e2:	f043 0220 	orr.w	r2, r3, #32
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d054      	beq.n	80065a8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a22      	ldr	r2, [pc, #136]	; (800658c <HAL_ADC_Init+0x31c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_ADC_Init+0x2a2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a20      	ldr	r2, [pc, #128]	; (8006590 <HAL_ADC_Init+0x320>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d140      	bne.n	8006594 <HAL_ADC_Init+0x324>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 800651a:	d02a      	beq.n	8006572 <HAL_ADC_Init+0x302>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006524:	d022      	beq.n	800656c <HAL_ADC_Init+0x2fc>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800652e:	d01a      	beq.n	8006566 <HAL_ADC_Init+0x2f6>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8006538:	d012      	beq.n	8006560 <HAL_ADC_Init+0x2f0>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653e:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8006542:	d00a      	beq.n	800655a <HAL_ADC_Init+0x2ea>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 800654c:	d002      	beq.n	8006554 <HAL_ADC_Init+0x2e4>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006552:	e023      	b.n	800659c <HAL_ADC_Init+0x32c>
 8006554:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006558:	e020      	b.n	800659c <HAL_ADC_Init+0x32c>
 800655a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800655e:	e01d      	b.n	800659c <HAL_ADC_Init+0x32c>
 8006560:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006564:	e01a      	b.n	800659c <HAL_ADC_Init+0x32c>
 8006566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800656a:	e017      	b.n	800659c <HAL_ADC_Init+0x32c>
 800656c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8006570:	e014      	b.n	800659c <HAL_ADC_Init+0x32c>
 8006572:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8006576:	e011      	b.n	800659c <HAL_ADC_Init+0x32c>
 8006578:	20000020 	.word	0x20000020
 800657c:	431bde83 	.word	0x431bde83
 8006580:	50000100 	.word	0x50000100
 8006584:	50000300 	.word	0x50000300
 8006588:	50000700 	.word	0x50000700
 800658c:	50000400 	.word	0x50000400
 8006590:	50000500 	.word	0x50000500
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065a0:	4313      	orrs	r3, r2
 80065a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065a4:	4313      	orrs	r3, r2
 80065a6:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 030c 	and.w	r3, r3, #12
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d114      	bne.n	80065e0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6812      	ldr	r2, [r2, #0]
 80065c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065c4:	f023 0302 	bic.w	r3, r3, #2
 80065c8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	7e1b      	ldrb	r3, [r3, #24]
 80065ce:	039a      	lsls	r2, r3, #14
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4313      	orrs	r3, r2
 80065da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065dc:	4313      	orrs	r3, r2
 80065de:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <HAL_ADC_Init+0x3f0>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80065f0:	430b      	orrs	r3, r1
 80065f2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d10c      	bne.n	8006616 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	f023 010f 	bic.w	r1, r3, #15
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	1e5a      	subs	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
 8006614:	e007      	b.n	8006626 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 020f 	bic.w	r2, r2, #15
 8006624:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	f023 0303 	bic.w	r3, r3, #3
 8006634:	f043 0201 	orr.w	r2, r3, #1
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	641a      	str	r2, [r3, #64]	; 0x40
 800663c:	e00a      	b.n	8006654 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f023 0312 	bic.w	r3, r3, #18
 8006646:	f043 0210 	orr.w	r2, r3, #16
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800664e:	2301      	movs	r3, #1
 8006650:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8006654:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006658:	4618      	mov	r0, r3
 800665a:	3768      	adds	r7, #104	; 0x68
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	fff0c007 	.word	0xfff0c007

08006664 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800666c:	2300      	movs	r3, #0
 800666e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 80f9 	bne.w	8006872 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_ADC_Start+0x2a>
 800668a:	2302      	movs	r3, #2
 800668c:	e0f4      	b.n	8006878 <HAL_ADC_Start+0x214>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 f952 	bl	8007940 <ADC_Enable>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f040 80e0 	bne.w	8006868 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066b0:	f023 0301 	bic.w	r3, r3, #1
 80066b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066c4:	d004      	beq.n	80066d0 <HAL_ADC_Start+0x6c>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a6d      	ldr	r2, [pc, #436]	; (8006880 <HAL_ADC_Start+0x21c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d106      	bne.n	80066de <HAL_ADC_Start+0x7a>
 80066d0:	4b6c      	ldr	r3, [pc, #432]	; (8006884 <HAL_ADC_Start+0x220>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 031f 	and.w	r3, r3, #31
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d010      	beq.n	80066fe <HAL_ADC_Start+0x9a>
 80066dc:	e005      	b.n	80066ea <HAL_ADC_Start+0x86>
 80066de:	4b6a      	ldr	r3, [pc, #424]	; (8006888 <HAL_ADC_Start+0x224>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 031f 	and.w	r3, r3, #31
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d009      	beq.n	80066fe <HAL_ADC_Start+0x9a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066f2:	d004      	beq.n	80066fe <HAL_ADC_Start+0x9a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a64      	ldr	r2, [pc, #400]	; (800688c <HAL_ADC_Start+0x228>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d115      	bne.n	800672a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006702:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d036      	beq.n	8006786 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006720:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8006728:	e02d      	b.n	8006786 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800673e:	d004      	beq.n	800674a <HAL_ADC_Start+0xe6>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a4e      	ldr	r2, [pc, #312]	; (8006880 <HAL_ADC_Start+0x21c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d10a      	bne.n	8006760 <HAL_ADC_Start+0xfc>
 800674a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	bf14      	ite	ne
 8006758:	2301      	movne	r3, #1
 800675a:	2300      	moveq	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	e008      	b.n	8006772 <HAL_ADC_Start+0x10e>
 8006760:	4b4a      	ldr	r3, [pc, #296]	; (800688c <HAL_ADC_Start+0x228>)
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	bf14      	ite	ne
 800676c:	2301      	movne	r3, #1
 800676e:	2300      	moveq	r3, #0
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b00      	cmp	r3, #0
 8006774:	d007      	beq.n	8006786 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800677e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800678a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006792:	d106      	bne.n	80067a2 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006798:	f023 0206 	bic.w	r2, r3, #6
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	645a      	str	r2, [r3, #68]	; 0x44
 80067a0:	e002      	b.n	80067a8 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	221c      	movs	r2, #28
 80067b6:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067c0:	d004      	beq.n	80067cc <HAL_ADC_Start+0x168>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a2e      	ldr	r2, [pc, #184]	; (8006880 <HAL_ADC_Start+0x21c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d106      	bne.n	80067da <HAL_ADC_Start+0x176>
 80067cc:	4b2d      	ldr	r3, [pc, #180]	; (8006884 <HAL_ADC_Start+0x220>)
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f003 031f 	and.w	r3, r3, #31
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d03e      	beq.n	8006856 <HAL_ADC_Start+0x1f2>
 80067d8:	e005      	b.n	80067e6 <HAL_ADC_Start+0x182>
 80067da:	4b2b      	ldr	r3, [pc, #172]	; (8006888 <HAL_ADC_Start+0x224>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f003 031f 	and.w	r3, r3, #31
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d037      	beq.n	8006856 <HAL_ADC_Start+0x1f2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067ee:	d004      	beq.n	80067fa <HAL_ADC_Start+0x196>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a22      	ldr	r2, [pc, #136]	; (8006880 <HAL_ADC_Start+0x21c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d106      	bne.n	8006808 <HAL_ADC_Start+0x1a4>
 80067fa:	4b22      	ldr	r3, [pc, #136]	; (8006884 <HAL_ADC_Start+0x220>)
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	f003 031f 	and.w	r3, r3, #31
 8006802:	2b05      	cmp	r3, #5
 8006804:	d027      	beq.n	8006856 <HAL_ADC_Start+0x1f2>
 8006806:	e005      	b.n	8006814 <HAL_ADC_Start+0x1b0>
 8006808:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <HAL_ADC_Start+0x224>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 031f 	and.w	r3, r3, #31
 8006810:	2b05      	cmp	r3, #5
 8006812:	d020      	beq.n	8006856 <HAL_ADC_Start+0x1f2>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800681c:	d004      	beq.n	8006828 <HAL_ADC_Start+0x1c4>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a17      	ldr	r2, [pc, #92]	; (8006880 <HAL_ADC_Start+0x21c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d106      	bne.n	8006836 <HAL_ADC_Start+0x1d2>
 8006828:	4b16      	ldr	r3, [pc, #88]	; (8006884 <HAL_ADC_Start+0x220>)
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	f003 031f 	and.w	r3, r3, #31
 8006830:	2b09      	cmp	r3, #9
 8006832:	d010      	beq.n	8006856 <HAL_ADC_Start+0x1f2>
 8006834:	e005      	b.n	8006842 <HAL_ADC_Start+0x1de>
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <HAL_ADC_Start+0x224>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	2b09      	cmp	r3, #9
 8006840:	d009      	beq.n	8006856 <HAL_ADC_Start+0x1f2>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800684a:	d004      	beq.n	8006856 <HAL_ADC_Start+0x1f2>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a0e      	ldr	r2, [pc, #56]	; (800688c <HAL_ADC_Start+0x228>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d10f      	bne.n	8006876 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0204 	orr.w	r2, r2, #4
 8006864:	609a      	str	r2, [r3, #8]
 8006866:	e006      	b.n	8006876 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006870:	e001      	b.n	8006876 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006872:	2302      	movs	r3, #2
 8006874:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006876:	7bfb      	ldrb	r3, [r7, #15]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	50000100 	.word	0x50000100
 8006884:	50000300 	.word	0x50000300
 8006888:	50000700 	.word	0x50000700
 800688c:	50000400 	.word	0x50000400

08006890 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d101      	bne.n	80068aa <HAL_ADC_Stop+0x1a>
 80068a6:	2302      	movs	r3, #2
 80068a8:	e023      	b.n	80068f2 <HAL_ADC_Stop+0x62>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80068b2:	216c      	movs	r1, #108	; 0x6c
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f001 f90d 	bl	8007ad4 <ADC_ConversionStop>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d111      	bne.n	80068e8 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f001 f89f 	bl	8007a08 <ADC_Disable>
 80068ca:	4603      	mov	r3, r0
 80068cc:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	f043 0201 	orr.w	r2, r3, #1
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80068f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
	...

080068fc <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	2b08      	cmp	r3, #8
 8006910:	d102      	bne.n	8006918 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8006912:	2308      	movs	r3, #8
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e03a      	b.n	800698e <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006920:	d004      	beq.n	800692c <HAL_ADC_PollForConversion+0x30>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a72      	ldr	r2, [pc, #456]	; (8006af0 <HAL_ADC_PollForConversion+0x1f4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d101      	bne.n	8006930 <HAL_ADC_PollForConversion+0x34>
 800692c:	4b71      	ldr	r3, [pc, #452]	; (8006af4 <HAL_ADC_PollForConversion+0x1f8>)
 800692e:	e000      	b.n	8006932 <HAL_ADC_PollForConversion+0x36>
 8006930:	4b71      	ldr	r3, [pc, #452]	; (8006af8 <HAL_ADC_PollForConversion+0x1fc>)
 8006932:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 031f 	and.w	r3, r3, #31
 800693c:	2b00      	cmp	r3, #0
 800693e:	d112      	bne.n	8006966 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b01      	cmp	r3, #1
 800694c:	d11d      	bne.n	800698a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f043 0220 	orr.w	r2, r3, #32
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e0bf      	b.n	8006ae6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00b      	beq.n	800698a <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f043 0220 	orr.w	r2, r3, #32
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e0ad      	b.n	8006ae6 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800698a:	230c      	movs	r3, #12
 800698c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006996:	d004      	beq.n	80069a2 <HAL_ADC_PollForConversion+0xa6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a54      	ldr	r2, [pc, #336]	; (8006af0 <HAL_ADC_PollForConversion+0x1f4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d106      	bne.n	80069b0 <HAL_ADC_PollForConversion+0xb4>
 80069a2:	4b54      	ldr	r3, [pc, #336]	; (8006af4 <HAL_ADC_PollForConversion+0x1f8>)
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 031f 	and.w	r3, r3, #31
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d010      	beq.n	80069d0 <HAL_ADC_PollForConversion+0xd4>
 80069ae:	e005      	b.n	80069bc <HAL_ADC_PollForConversion+0xc0>
 80069b0:	4b51      	ldr	r3, [pc, #324]	; (8006af8 <HAL_ADC_PollForConversion+0x1fc>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d009      	beq.n	80069d0 <HAL_ADC_PollForConversion+0xd4>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069c4:	d004      	beq.n	80069d0 <HAL_ADC_PollForConversion+0xd4>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a4c      	ldr	r2, [pc, #304]	; (8006afc <HAL_ADC_PollForConversion+0x200>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d104      	bne.n	80069da <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	e00f      	b.n	80069fa <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069e2:	d004      	beq.n	80069ee <HAL_ADC_PollForConversion+0xf2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a41      	ldr	r2, [pc, #260]	; (8006af0 <HAL_ADC_PollForConversion+0x1f4>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d102      	bne.n	80069f4 <HAL_ADC_PollForConversion+0xf8>
 80069ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80069f2:	e000      	b.n	80069f6 <HAL_ADC_PollForConversion+0xfa>
 80069f4:	4b41      	ldr	r3, [pc, #260]	; (8006afc <HAL_ADC_PollForConversion+0x200>)
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80069fa:	f7ff fbed 	bl	80061d8 <HAL_GetTick>
 80069fe:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006a00:	e021      	b.n	8006a46 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d01d      	beq.n	8006a46 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <HAL_ADC_PollForConversion+0x124>
 8006a10:	f7ff fbe2 	bl	80061d8 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d212      	bcs.n	8006a46 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10b      	bne.n	8006a46 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a32:	f043 0204 	orr.w	r2, r3, #4
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e04f      	b.n	8006ae6 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0d6      	beq.n	8006a02 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d131      	bne.n	8006ad2 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d12c      	bne.n	8006ad2 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b08      	cmp	r3, #8
 8006a84:	d125      	bne.n	8006ad2 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d112      	bne.n	8006aba <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d112      	bne.n	8006ad2 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f043 0201 	orr.w	r2, r3, #1
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8006ab8:	e00b      	b.n	8006ad2 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aca:	f043 0201 	orr.w	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d103      	bne.n	8006ae4 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	50000100 	.word	0x50000100
 8006af4:	50000300 	.word	0x50000300
 8006af8:	50000700 	.word	0x50000700
 8006afc:	50000400 	.word	0x50000400

08006b00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
	...

08006b1c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	d106      	bne.n	8006b4c <HAL_ADC_IRQHandler+0x30>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f003 0304 	and.w	r3, r3, #4
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d00f      	beq.n	8006b6c <HAL_ADC_IRQHandler+0x50>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0308 	and.w	r3, r3, #8
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8006b56:	2b08      	cmp	r3, #8
 8006b58:	f040 80c0 	bne.w	8006cdc <HAL_ADC_IRQHandler+0x1c0>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	f040 80b8 	bne.w	8006cdc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	f003 0310 	and.w	r3, r3, #16
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b8c:	d004      	beq.n	8006b98 <HAL_ADC_IRQHandler+0x7c>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a95      	ldr	r2, [pc, #596]	; (8006de8 <HAL_ADC_IRQHandler+0x2cc>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d106      	bne.n	8006ba6 <HAL_ADC_IRQHandler+0x8a>
 8006b98:	4b94      	ldr	r3, [pc, #592]	; (8006dec <HAL_ADC_IRQHandler+0x2d0>)
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d03e      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x106>
 8006ba4:	e005      	b.n	8006bb2 <HAL_ADC_IRQHandler+0x96>
 8006ba6:	4b92      	ldr	r3, [pc, #584]	; (8006df0 <HAL_ADC_IRQHandler+0x2d4>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d037      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x106>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bba:	d004      	beq.n	8006bc6 <HAL_ADC_IRQHandler+0xaa>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a89      	ldr	r2, [pc, #548]	; (8006de8 <HAL_ADC_IRQHandler+0x2cc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d106      	bne.n	8006bd4 <HAL_ADC_IRQHandler+0xb8>
 8006bc6:	4b89      	ldr	r3, [pc, #548]	; (8006dec <HAL_ADC_IRQHandler+0x2d0>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d027      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x106>
 8006bd2:	e005      	b.n	8006be0 <HAL_ADC_IRQHandler+0xc4>
 8006bd4:	4b86      	ldr	r3, [pc, #536]	; (8006df0 <HAL_ADC_IRQHandler+0x2d4>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	d020      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x106>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006be8:	d004      	beq.n	8006bf4 <HAL_ADC_IRQHandler+0xd8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a7e      	ldr	r2, [pc, #504]	; (8006de8 <HAL_ADC_IRQHandler+0x2cc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d106      	bne.n	8006c02 <HAL_ADC_IRQHandler+0xe6>
 8006bf4:	4b7d      	ldr	r3, [pc, #500]	; (8006dec <HAL_ADC_IRQHandler+0x2d0>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2b09      	cmp	r3, #9
 8006bfe:	d010      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x106>
 8006c00:	e005      	b.n	8006c0e <HAL_ADC_IRQHandler+0xf2>
 8006c02:	4b7b      	ldr	r3, [pc, #492]	; (8006df0 <HAL_ADC_IRQHandler+0x2d4>)
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2b09      	cmp	r3, #9
 8006c0c:	d009      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x106>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c16:	d004      	beq.n	8006c22 <HAL_ADC_IRQHandler+0x106>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a75      	ldr	r2, [pc, #468]	; (8006df4 <HAL_ADC_IRQHandler+0x2d8>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d104      	bne.n	8006c2c <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	e00f      	b.n	8006c4c <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c34:	d004      	beq.n	8006c40 <HAL_ADC_IRQHandler+0x124>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6b      	ldr	r2, [pc, #428]	; (8006de8 <HAL_ADC_IRQHandler+0x2cc>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d102      	bne.n	8006c46 <HAL_ADC_IRQHandler+0x12a>
 8006c40:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006c44:	e000      	b.n	8006c48 <HAL_ADC_IRQHandler+0x12c>
 8006c46:	4b6b      	ldr	r3, [pc, #428]	; (8006df4 <HAL_ADC_IRQHandler+0x2d8>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	613b      	str	r3, [r7, #16]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d139      	bne.n	8006cce <HAL_ADC_IRQHandler+0x1b2>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d134      	bne.n	8006cce <HAL_ADC_IRQHandler+0x1b2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b08      	cmp	r3, #8
 8006c70:	d12d      	bne.n	8006cce <HAL_ADC_IRQHandler+0x1b2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d11a      	bne.n	8006cb6 <HAL_ADC_IRQHandler+0x19a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 020c 	bic.w	r2, r2, #12
 8006c8e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d112      	bne.n	8006cce <HAL_ADC_IRQHandler+0x1b2>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	f043 0201 	orr.w	r2, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	641a      	str	r2, [r3, #64]	; 0x40
 8006cb4:	e00b      	b.n	8006cce <HAL_ADC_IRQHandler+0x1b2>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	f043 0210 	orr.w	r2, r3, #16
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cc6:	f043 0201 	orr.w	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff fab0 	bl	8006234 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	220c      	movs	r2, #12
 8006cda:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d106      	bne.n	8006cf8 <HAL_ADC_IRQHandler+0x1dc>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f003 0320 	and.w	r3, r3, #32
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d00f      	beq.n	8006d18 <HAL_ADC_IRQHandler+0x1fc>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC)) ||   
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	f040 813c 	bne.w	8006f80 <HAL_ADC_IRQHandler+0x464>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOS))   )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d12:	2b40      	cmp	r3, #64	; 0x40
 8006d14:	f040 8134 	bne.w	8006f80 <HAL_ADC_IRQHandler+0x464>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d2c:	d004      	beq.n	8006d38 <HAL_ADC_IRQHandler+0x21c>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a2d      	ldr	r2, [pc, #180]	; (8006de8 <HAL_ADC_IRQHandler+0x2cc>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d106      	bne.n	8006d46 <HAL_ADC_IRQHandler+0x22a>
 8006d38:	4b2c      	ldr	r3, [pc, #176]	; (8006dec <HAL_ADC_IRQHandler+0x2d0>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f003 031f 	and.w	r3, r3, #31
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d03e      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x2a6>
 8006d44:	e005      	b.n	8006d52 <HAL_ADC_IRQHandler+0x236>
 8006d46:	4b2a      	ldr	r3, [pc, #168]	; (8006df0 <HAL_ADC_IRQHandler+0x2d4>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d037      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x2a6>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d5a:	d004      	beq.n	8006d66 <HAL_ADC_IRQHandler+0x24a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a21      	ldr	r2, [pc, #132]	; (8006de8 <HAL_ADC_IRQHandler+0x2cc>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d106      	bne.n	8006d74 <HAL_ADC_IRQHandler+0x258>
 8006d66:	4b21      	ldr	r3, [pc, #132]	; (8006dec <HAL_ADC_IRQHandler+0x2d0>)
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 031f 	and.w	r3, r3, #31
 8006d6e:	2b05      	cmp	r3, #5
 8006d70:	d027      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x2a6>
 8006d72:	e005      	b.n	8006d80 <HAL_ADC_IRQHandler+0x264>
 8006d74:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <HAL_ADC_IRQHandler+0x2d4>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	2b05      	cmp	r3, #5
 8006d7e:	d020      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x2a6>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d88:	d004      	beq.n	8006d94 <HAL_ADC_IRQHandler+0x278>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a16      	ldr	r2, [pc, #88]	; (8006de8 <HAL_ADC_IRQHandler+0x2cc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d106      	bne.n	8006da2 <HAL_ADC_IRQHandler+0x286>
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <HAL_ADC_IRQHandler+0x2d0>)
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	f003 031f 	and.w	r3, r3, #31
 8006d9c:	2b09      	cmp	r3, #9
 8006d9e:	d010      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x2a6>
 8006da0:	e005      	b.n	8006dae <HAL_ADC_IRQHandler+0x292>
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <HAL_ADC_IRQHandler+0x2d4>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	f003 031f 	and.w	r3, r3, #31
 8006daa:	2b09      	cmp	r3, #9
 8006dac:	d009      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x2a6>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006db6:	d004      	beq.n	8006dc2 <HAL_ADC_IRQHandler+0x2a6>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a0d      	ldr	r2, [pc, #52]	; (8006df4 <HAL_ADC_IRQHandler+0x2d8>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d104      	bne.n	8006dcc <HAL_ADC_IRQHandler+0x2b0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	e018      	b.n	8006dfe <HAL_ADC_IRQHandler+0x2e2>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dd4:	d004      	beq.n	8006de0 <HAL_ADC_IRQHandler+0x2c4>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a03      	ldr	r2, [pc, #12]	; (8006de8 <HAL_ADC_IRQHandler+0x2cc>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d10b      	bne.n	8006df8 <HAL_ADC_IRQHandler+0x2dc>
 8006de0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006de4:	e009      	b.n	8006dfa <HAL_ADC_IRQHandler+0x2de>
 8006de6:	bf00      	nop
 8006de8:	50000100 	.word	0x50000100
 8006dec:	50000300 	.word	0x50000300
 8006df0:	50000700 	.word	0x50000700
 8006df4:	50000400 	.word	0x50000400
 8006df8:	4b9d      	ldr	r3, [pc, #628]	; (8007070 <HAL_ADC_IRQHandler+0x554>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	f040 80b2 	bne.w	8006f72 <HAL_ADC_IRQHandler+0x456>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00d      	beq.n	8006e34 <HAL_ADC_IRQHandler+0x318>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f040 80a5 	bne.w	8006f72 <HAL_ADC_IRQHandler+0x456>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f040 809f 	bne.w	8006f72 <HAL_ADC_IRQHandler+0x456>
      {
        /* If End of Sequence is reached, disable interrupts */
        if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	f040 8097 	bne.w	8006f72 <HAL_ADC_IRQHandler+0x456>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e4c:	d004      	beq.n	8006e58 <HAL_ADC_IRQHandler+0x33c>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a88      	ldr	r2, [pc, #544]	; (8007074 <HAL_ADC_IRQHandler+0x558>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d106      	bne.n	8006e66 <HAL_ADC_IRQHandler+0x34a>
 8006e58:	4b87      	ldr	r3, [pc, #540]	; (8007078 <HAL_ADC_IRQHandler+0x55c>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d03e      	beq.n	8006ee2 <HAL_ADC_IRQHandler+0x3c6>
 8006e64:	e005      	b.n	8006e72 <HAL_ADC_IRQHandler+0x356>
 8006e66:	4b85      	ldr	r3, [pc, #532]	; (800707c <HAL_ADC_IRQHandler+0x560>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 031f 	and.w	r3, r3, #31
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d037      	beq.n	8006ee2 <HAL_ADC_IRQHandler+0x3c6>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006e7a:	d004      	beq.n	8006e86 <HAL_ADC_IRQHandler+0x36a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a7c      	ldr	r2, [pc, #496]	; (8007074 <HAL_ADC_IRQHandler+0x558>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d106      	bne.n	8006e94 <HAL_ADC_IRQHandler+0x378>
 8006e86:	4b7c      	ldr	r3, [pc, #496]	; (8007078 <HAL_ADC_IRQHandler+0x55c>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	2b06      	cmp	r3, #6
 8006e90:	d027      	beq.n	8006ee2 <HAL_ADC_IRQHandler+0x3c6>
 8006e92:	e005      	b.n	8006ea0 <HAL_ADC_IRQHandler+0x384>
 8006e94:	4b79      	ldr	r3, [pc, #484]	; (800707c <HAL_ADC_IRQHandler+0x560>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 031f 	and.w	r3, r3, #31
 8006e9c:	2b06      	cmp	r3, #6
 8006e9e:	d020      	beq.n	8006ee2 <HAL_ADC_IRQHandler+0x3c6>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ea8:	d004      	beq.n	8006eb4 <HAL_ADC_IRQHandler+0x398>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a71      	ldr	r2, [pc, #452]	; (8007074 <HAL_ADC_IRQHandler+0x558>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d106      	bne.n	8006ec2 <HAL_ADC_IRQHandler+0x3a6>
 8006eb4:	4b70      	ldr	r3, [pc, #448]	; (8007078 <HAL_ADC_IRQHandler+0x55c>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	2b07      	cmp	r3, #7
 8006ebe:	d010      	beq.n	8006ee2 <HAL_ADC_IRQHandler+0x3c6>
 8006ec0:	e005      	b.n	8006ece <HAL_ADC_IRQHandler+0x3b2>
 8006ec2:	4b6e      	ldr	r3, [pc, #440]	; (800707c <HAL_ADC_IRQHandler+0x560>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 031f 	and.w	r3, r3, #31
 8006eca:	2b07      	cmp	r3, #7
 8006ecc:	d009      	beq.n	8006ee2 <HAL_ADC_IRQHandler+0x3c6>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed6:	d004      	beq.n	8006ee2 <HAL_ADC_IRQHandler+0x3c6>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a64      	ldr	r2, [pc, #400]	; (8007070 <HAL_ADC_IRQHandler+0x554>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d104      	bne.n	8006eec <HAL_ADC_IRQHandler+0x3d0>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e00f      	b.n	8006f0c <HAL_ADC_IRQHandler+0x3f0>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ef4:	d004      	beq.n	8006f00 <HAL_ADC_IRQHandler+0x3e4>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a5e      	ldr	r2, [pc, #376]	; (8007074 <HAL_ADC_IRQHandler+0x558>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d102      	bne.n	8006f06 <HAL_ADC_IRQHandler+0x3ea>
 8006f00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006f04:	e000      	b.n	8006f08 <HAL_ADC_IRQHandler+0x3ec>
 8006f06:	4b5a      	ldr	r3, [pc, #360]	; (8007070 <HAL_ADC_IRQHandler+0x554>)
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	60fb      	str	r3, [r7, #12]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d12d      	bne.n	8006f72 <HAL_ADC_IRQHandler+0x456>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0308 	and.w	r3, r3, #8
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d11a      	bne.n	8006f5a <HAL_ADC_IRQHandler+0x43e>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f32:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f38:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d112      	bne.n	8006f72 <HAL_ADC_IRQHandler+0x456>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	f043 0201 	orr.w	r2, r3, #1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40
 8006f58:	e00b      	b.n	8006f72 <HAL_ADC_IRQHandler+0x456>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	f043 0210 	orr.w	r2, r3, #16
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6a:	f043 0201 	orr.w	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f8de 	bl	8007134 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2260      	movs	r2, #96	; 0x60
 8006f7e:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD1) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD1))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d113      	bne.n	8006fb6 <HAL_ADC_IRQHandler+0x49a>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f98:	2b80      	cmp	r3, #128	; 0x80
 8006f9a:	d10c      	bne.n	8006fb6 <HAL_ADC_IRQHandler+0x49a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7ff f94d 	bl	8006248 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2280      	movs	r2, #128	; 0x80
 8006fb4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD2) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD2))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fc4:	d115      	bne.n	8006ff2 <HAL_ADC_IRQHandler+0x4d6>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd4:	d10d      	bne.n	8006ff2 <HAL_ADC_IRQHandler+0x4d6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f8ba 	bl	800715c <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ff0:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD3) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD3)) 
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007000:	d115      	bne.n	800702e <HAL_ADC_IRQHandler+0x512>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800700c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007010:	d10d      	bne.n	800702e <HAL_ADC_IRQHandler+0x512>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f8a6 	bl	8007170 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800702c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b10      	cmp	r3, #16
 800703a:	d151      	bne.n	80070e0 <HAL_ADC_IRQHandler+0x5c4>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f003 0310 	and.w	r3, r3, #16
 8007046:	2b10      	cmp	r3, #16
 8007048:	d14a      	bne.n	80070e0 <HAL_ADC_IRQHandler+0x5c4>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704e:	2b01      	cmp	r3, #1
 8007050:	d102      	bne.n	8007058 <HAL_ADC_IRQHandler+0x53c>
    {
      overrun_error = 1U;
 8007052:	2301      	movs	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	e02d      	b.n	80070b4 <HAL_ADC_IRQHandler+0x598>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007060:	d004      	beq.n	800706c <HAL_ADC_IRQHandler+0x550>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a03      	ldr	r2, [pc, #12]	; (8007074 <HAL_ADC_IRQHandler+0x558>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d109      	bne.n	8007080 <HAL_ADC_IRQHandler+0x564>
 800706c:	4b02      	ldr	r3, [pc, #8]	; (8007078 <HAL_ADC_IRQHandler+0x55c>)
 800706e:	e008      	b.n	8007082 <HAL_ADC_IRQHandler+0x566>
 8007070:	50000400 	.word	0x50000400
 8007074:	50000100 	.word	0x50000100
 8007078:	50000300 	.word	0x50000300
 800707c:	50000700 	.word	0x50000700
 8007080:	4b2b      	ldr	r3, [pc, #172]	; (8007130 <HAL_ADC_IRQHandler+0x614>)
 8007082:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 031f 	and.w	r3, r3, #31
 800708c:	2b00      	cmp	r3, #0
 800708e:	d109      	bne.n	80070a4 <HAL_ADC_IRQHandler+0x588>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	2b01      	cmp	r3, #1
 800709c:	d10a      	bne.n	80070b4 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 800709e:	2301      	movs	r3, #1
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	e007      	b.n	80070b4 <HAL_ADC_IRQHandler+0x598>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <HAL_ADC_IRQHandler+0x598>
        {
          overrun_error = 1U;  
 80070b0:	2301      	movs	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
        }
      }
    }
    
    if (overrun_error == 1U)
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d10e      	bne.n	80070d8 <HAL_ADC_IRQHandler+0x5bc>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ca:	f043 0202 	orr.w	r2, r3, #2
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff f8c2 	bl	800625c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2210      	movs	r2, #16
 80070de:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JQOVF) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JQOVF))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ee:	d11b      	bne.n	8007128 <HAL_ADC_IRQHandler+0x60c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070fe:	d113      	bne.n	8007128 <HAL_ADC_IRQHandler+0x60c>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007104:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007110:	f043 0208 	orr.w	r2, r3, #8
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007120:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f810 	bl	8007148 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8007128:	bf00      	nop
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	50000700 	.word	0x50000700

08007134 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8007164:	bf00      	nop
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007184:	b480      	push	{r7}
 8007186:	b09b      	sub	sp, #108	; 0x6c
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <HAL_ADC_ConfigChannel+0x22>
 80071a2:	2302      	movs	r3, #2
 80071a4:	e2cb      	b.n	800773e <HAL_ADC_ConfigChannel+0x5ba>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2201      	movs	r2, #1
 80071aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f040 82af 	bne.w	800771c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d81c      	bhi.n	8007200 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685a      	ldr	r2, [r3, #4]
 80071d0:	4613      	mov	r3, r2
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	4413      	add	r3, r2
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	461a      	mov	r2, r3
 80071da:	231f      	movs	r3, #31
 80071dc:	4093      	lsls	r3, r2
 80071de:	43db      	mvns	r3, r3
 80071e0:	4019      	ands	r1, r3
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	4613      	mov	r3, r2
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4413      	add	r3, r2
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	fa00 f203 	lsl.w	r2, r0, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	631a      	str	r2, [r3, #48]	; 0x30
 80071fe:	e063      	b.n	80072c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b09      	cmp	r3, #9
 8007206:	d81e      	bhi.n	8007246 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	4413      	add	r3, r2
 8007218:	005b      	lsls	r3, r3, #1
 800721a:	3b1e      	subs	r3, #30
 800721c:	221f      	movs	r2, #31
 800721e:	fa02 f303 	lsl.w	r3, r2, r3
 8007222:	43db      	mvns	r3, r3
 8007224:	4019      	ands	r1, r3
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	4613      	mov	r3, r2
 8007230:	005b      	lsls	r3, r3, #1
 8007232:	4413      	add	r3, r2
 8007234:	005b      	lsls	r3, r3, #1
 8007236:	3b1e      	subs	r3, #30
 8007238:	fa00 f203 	lsl.w	r2, r0, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	430a      	orrs	r2, r1
 8007242:	635a      	str	r2, [r3, #52]	; 0x34
 8007244:	e040      	b.n	80072c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	2b0e      	cmp	r3, #14
 800724c:	d81e      	bhi.n	800728c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	4413      	add	r3, r2
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	3b3c      	subs	r3, #60	; 0x3c
 8007262:	221f      	movs	r2, #31
 8007264:	fa02 f303 	lsl.w	r3, r2, r3
 8007268:	43db      	mvns	r3, r3
 800726a:	4019      	ands	r1, r3
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	005b      	lsls	r3, r3, #1
 800727c:	3b3c      	subs	r3, #60	; 0x3c
 800727e:	fa00 f203 	lsl.w	r2, r0, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	430a      	orrs	r2, r1
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
 800728a:	e01d      	b.n	80072c8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	4613      	mov	r3, r2
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	4413      	add	r3, r2
 800729c:	005b      	lsls	r3, r3, #1
 800729e:	3b5a      	subs	r3, #90	; 0x5a
 80072a0:	221f      	movs	r2, #31
 80072a2:	fa02 f303 	lsl.w	r3, r2, r3
 80072a6:	43db      	mvns	r3, r3
 80072a8:	4019      	ands	r1, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	4613      	mov	r3, r2
 80072b4:	005b      	lsls	r3, r3, #1
 80072b6:	4413      	add	r3, r2
 80072b8:	005b      	lsls	r3, r3, #1
 80072ba:	3b5a      	subs	r3, #90	; 0x5a
 80072bc:	fa00 f203 	lsl.w	r2, r0, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 030c 	and.w	r3, r3, #12
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f040 80e5 	bne.w	80074a2 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b09      	cmp	r3, #9
 80072de:	d91c      	bls.n	800731a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	6999      	ldr	r1, [r3, #24]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	4613      	mov	r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	4413      	add	r3, r2
 80072f0:	3b1e      	subs	r3, #30
 80072f2:	2207      	movs	r2, #7
 80072f4:	fa02 f303 	lsl.w	r3, r2, r3
 80072f8:	43db      	mvns	r3, r3
 80072fa:	4019      	ands	r1, r3
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	6898      	ldr	r0, [r3, #8]
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4613      	mov	r3, r2
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	4413      	add	r3, r2
 800730a:	3b1e      	subs	r3, #30
 800730c:	fa00 f203 	lsl.w	r2, r0, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	619a      	str	r2, [r3, #24]
 8007318:	e019      	b.n	800734e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	6959      	ldr	r1, [r3, #20]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	4613      	mov	r3, r2
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	4413      	add	r3, r2
 800732a:	2207      	movs	r2, #7
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	43db      	mvns	r3, r3
 8007332:	4019      	ands	r1, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	6898      	ldr	r0, [r3, #8]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	4613      	mov	r3, r2
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	fa00 f203 	lsl.w	r2, r0, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	08db      	lsrs	r3, r3, #3
 800735a:	f003 0303 	and.w	r3, r3, #3
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	fa02 f303 	lsl.w	r3, r2, r3
 8007364:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	3b01      	subs	r3, #1
 800736c:	2b03      	cmp	r3, #3
 800736e:	d84f      	bhi.n	8007410 <HAL_ADC_ConfigChannel+0x28c>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <HAL_ADC_ConfigChannel+0x1f4>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	08007389 	.word	0x08007389
 800737c:	080073ab 	.word	0x080073ab
 8007380:	080073cd 	.word	0x080073cd
 8007384:	080073ef 	.word	0x080073ef
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800738e:	4b9f      	ldr	r3, [pc, #636]	; (800760c <HAL_ADC_ConfigChannel+0x488>)
 8007390:	4013      	ands	r3, r2
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	0691      	lsls	r1, r2, #26
 8007398:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800739a:	430a      	orrs	r2, r1
 800739c:	431a      	orrs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80073a6:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80073a8:	e07e      	b.n	80074a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80073b0:	4b96      	ldr	r3, [pc, #600]	; (800760c <HAL_ADC_ConfigChannel+0x488>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	0691      	lsls	r1, r2, #26
 80073ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073bc:	430a      	orrs	r2, r1
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80073c8:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80073ca:	e06d      	b.n	80074a8 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80073d2:	4b8e      	ldr	r3, [pc, #568]	; (800760c <HAL_ADC_ConfigChannel+0x488>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	0691      	lsls	r1, r2, #26
 80073dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80073de:	430a      	orrs	r2, r1
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80073ea:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80073ec:	e05c      	b.n	80074a8 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80073f4:	4b85      	ldr	r3, [pc, #532]	; (800760c <HAL_ADC_ConfigChannel+0x488>)
 80073f6:	4013      	ands	r3, r2
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	6812      	ldr	r2, [r2, #0]
 80073fc:	0691      	lsls	r1, r2, #26
 80073fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007400:	430a      	orrs	r2, r1
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800740c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800740e:	e04b      	b.n	80074a8 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007416:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	069b      	lsls	r3, r3, #26
 8007420:	429a      	cmp	r2, r3
 8007422:	d107      	bne.n	8007434 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007432:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800743a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	069b      	lsls	r3, r3, #26
 8007444:	429a      	cmp	r2, r3
 8007446:	d107      	bne.n	8007458 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007456:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800745e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	069b      	lsls	r3, r3, #26
 8007468:	429a      	cmp	r2, r3
 800746a:	d107      	bne.n	800747c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800747a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007482:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	069b      	lsls	r3, r3, #26
 800748c:	429a      	cmp	r2, r3
 800748e:	d10a      	bne.n	80074a6 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800749e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80074a0:	e001      	b.n	80074a6 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80074a2:	bf00      	nop
 80074a4:	e000      	b.n	80074a8 <HAL_ADC_ConfigChannel+0x324>
      break;
 80074a6:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f003 0303 	and.w	r3, r3, #3
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d108      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0x344>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d101      	bne.n	80074c8 <HAL_ADC_ConfigChannel+0x344>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e000      	b.n	80074ca <HAL_ADC_ConfigChannel+0x346>
 80074c8:	2300      	movs	r3, #0
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	f040 8131 	bne.w	8007732 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d00f      	beq.n	80074f8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2201      	movs	r2, #1
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	43da      	mvns	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	400a      	ands	r2, r1
 80074f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80074f6:	e049      	b.n	800758c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2201      	movs	r2, #1
 8007506:	409a      	lsls	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b09      	cmp	r3, #9
 8007518:	d91c      	bls.n	8007554 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6999      	ldr	r1, [r3, #24]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	4613      	mov	r3, r2
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	4413      	add	r3, r2
 800752a:	3b1b      	subs	r3, #27
 800752c:	2207      	movs	r2, #7
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	43db      	mvns	r3, r3
 8007534:	4019      	ands	r1, r3
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	6898      	ldr	r0, [r3, #8]
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4613      	mov	r3, r2
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	4413      	add	r3, r2
 8007544:	3b1b      	subs	r3, #27
 8007546:	fa00 f203 	lsl.w	r2, r0, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	619a      	str	r2, [r3, #24]
 8007552:	e01b      	b.n	800758c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6959      	ldr	r1, [r3, #20]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	4613      	mov	r3, r2
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	4413      	add	r3, r2
 8007566:	2207      	movs	r2, #7
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	43db      	mvns	r3, r3
 800756e:	4019      	ands	r1, r3
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	6898      	ldr	r0, [r3, #8]
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	4613      	mov	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4413      	add	r3, r2
 8007580:	fa00 f203 	lsl.w	r2, r0, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007594:	d004      	beq.n	80075a0 <HAL_ADC_ConfigChannel+0x41c>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <HAL_ADC_ConfigChannel+0x48c>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d101      	bne.n	80075a4 <HAL_ADC_ConfigChannel+0x420>
 80075a0:	4b1c      	ldr	r3, [pc, #112]	; (8007614 <HAL_ADC_ConfigChannel+0x490>)
 80075a2:	e000      	b.n	80075a6 <HAL_ADC_ConfigChannel+0x422>
 80075a4:	4b1c      	ldr	r3, [pc, #112]	; (8007618 <HAL_ADC_ConfigChannel+0x494>)
 80075a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b10      	cmp	r3, #16
 80075ae:	d105      	bne.n	80075bc <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80075b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d015      	beq.n	80075e8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80075c0:	2b11      	cmp	r3, #17
 80075c2:	d105      	bne.n	80075d0 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80075c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00b      	beq.n	80075e8 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80075d4:	2b12      	cmp	r3, #18
 80075d6:	f040 80ac 	bne.w	8007732 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80075da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 80a5 	bne.w	8007732 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075f0:	d102      	bne.n	80075f8 <HAL_ADC_ConfigChannel+0x474>
 80075f2:	4b07      	ldr	r3, [pc, #28]	; (8007610 <HAL_ADC_ConfigChannel+0x48c>)
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	e023      	b.n	8007640 <HAL_ADC_ConfigChannel+0x4bc>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a04      	ldr	r2, [pc, #16]	; (8007610 <HAL_ADC_ConfigChannel+0x48c>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d10c      	bne.n	800761c <HAL_ADC_ConfigChannel+0x498>
 8007602:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8007606:	60fb      	str	r3, [r7, #12]
 8007608:	e01a      	b.n	8007640 <HAL_ADC_ConfigChannel+0x4bc>
 800760a:	bf00      	nop
 800760c:	83fff000 	.word	0x83fff000
 8007610:	50000100 	.word	0x50000100
 8007614:	50000300 	.word	0x50000300
 8007618:	50000700 	.word	0x50000700
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a4a      	ldr	r2, [pc, #296]	; (800774c <HAL_ADC_ConfigChannel+0x5c8>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d102      	bne.n	800762c <HAL_ADC_ConfigChannel+0x4a8>
 8007626:	4b4a      	ldr	r3, [pc, #296]	; (8007750 <HAL_ADC_ConfigChannel+0x5cc>)
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	e009      	b.n	8007640 <HAL_ADC_ConfigChannel+0x4bc>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a47      	ldr	r2, [pc, #284]	; (8007750 <HAL_ADC_ConfigChannel+0x5cc>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d102      	bne.n	800763c <HAL_ADC_ConfigChannel+0x4b8>
 8007636:	4b45      	ldr	r3, [pc, #276]	; (800774c <HAL_ADC_ConfigChannel+0x5c8>)
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	e001      	b.n	8007640 <HAL_ADC_ConfigChannel+0x4bc>
 800763c:	2300      	movs	r3, #0
 800763e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b01      	cmp	r3, #1
 800764c:	d108      	bne.n	8007660 <HAL_ADC_ConfigChannel+0x4dc>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b01      	cmp	r3, #1
 800765a:	d101      	bne.n	8007660 <HAL_ADC_ConfigChannel+0x4dc>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <HAL_ADC_ConfigChannel+0x4de>
 8007660:	2300      	movs	r3, #0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d150      	bne.n	8007708 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8007666:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8007668:	2b00      	cmp	r3, #0
 800766a:	d010      	beq.n	800768e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	2b01      	cmp	r3, #1
 8007676:	d107      	bne.n	8007688 <HAL_ADC_ConfigChannel+0x504>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0301 	and.w	r3, r3, #1
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_ADC_ConfigChannel+0x504>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <HAL_ADC_ConfigChannel+0x506>
 8007688:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800768a:	2b00      	cmp	r3, #0
 800768c:	d13c      	bne.n	8007708 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b10      	cmp	r3, #16
 8007694:	d11d      	bne.n	80076d2 <HAL_ADC_ConfigChannel+0x54e>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800769e:	d118      	bne.n	80076d2 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80076a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80076a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076aa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80076ac:	4b29      	ldr	r3, [pc, #164]	; (8007754 <HAL_ADC_ConfigChannel+0x5d0>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a29      	ldr	r2, [pc, #164]	; (8007758 <HAL_ADC_ConfigChannel+0x5d4>)
 80076b2:	fba2 2303 	umull	r2, r3, r2, r3
 80076b6:	0c9a      	lsrs	r2, r3, #18
 80076b8:	4613      	mov	r3, r2
 80076ba:	009b      	lsls	r3, r3, #2
 80076bc:	4413      	add	r3, r2
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80076c2:	e002      	b.n	80076ca <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1f9      	bne.n	80076c4 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80076d0:	e02e      	b.n	8007730 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b11      	cmp	r3, #17
 80076d8:	d10b      	bne.n	80076f2 <HAL_ADC_ConfigChannel+0x56e>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80076e2:	d106      	bne.n	80076f2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80076e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80076ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076ee:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80076f0:	e01e      	b.n	8007730 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	2b12      	cmp	r3, #18
 80076f8:	d11a      	bne.n	8007730 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80076fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007702:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007704:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8007706:	e013      	b.n	8007730 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770c:	f043 0220 	orr.w	r2, r3, #32
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800771a:	e00a      	b.n	8007732 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007720:	f043 0220 	orr.w	r2, r3, #32
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800772e:	e000      	b.n	8007732 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8007730:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800773a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800773e:	4618      	mov	r0, r3
 8007740:	376c      	adds	r7, #108	; 0x6c
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	50000400 	.word	0x50000400
 8007750:	50000500 	.word	0x50000500
 8007754:	20000020 	.word	0x20000020
 8007758:	431bde83 	.word	0x431bde83

0800775c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800775c:	b480      	push	{r7}
 800775e:	b099      	sub	sp, #100	; 0x64
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007766:	2300      	movs	r3, #0
 8007768:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007774:	d102      	bne.n	800777c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8007776:	4b6d      	ldr	r3, [pc, #436]	; (800792c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8007778:	60bb      	str	r3, [r7, #8]
 800777a:	e01a      	b.n	80077b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a6a      	ldr	r2, [pc, #424]	; (800792c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d103      	bne.n	800778e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8007786:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800778a:	60bb      	str	r3, [r7, #8]
 800778c:	e011      	b.n	80077b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a67      	ldr	r2, [pc, #412]	; (8007930 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d102      	bne.n	800779e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007798:	4b66      	ldr	r3, [pc, #408]	; (8007934 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800779a:	60bb      	str	r3, [r7, #8]
 800779c:	e009      	b.n	80077b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a64      	ldr	r2, [pc, #400]	; (8007934 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d102      	bne.n	80077ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80077a8:	4b61      	ldr	r3, [pc, #388]	; (8007930 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80077aa:	60bb      	str	r3, [r7, #8]
 80077ac:	e001      	b.n	80077b2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80077ae:	2300      	movs	r3, #0
 80077b0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0b0      	b.n	800791e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d101      	bne.n	80077ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80077c6:	2302      	movs	r3, #2
 80077c8:	e0a9      	b.n	800791e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f040 808d 	bne.w	80078fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 0304 	and.w	r3, r3, #4
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	f040 8086 	bne.w	80078fc <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077f8:	d004      	beq.n	8007804 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a4b      	ldr	r2, [pc, #300]	; (800792c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d101      	bne.n	8007808 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007804:	4b4c      	ldr	r3, [pc, #304]	; (8007938 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8007806:	e000      	b.n	800780a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007808:	4b4c      	ldr	r3, [pc, #304]	; (800793c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800780a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d040      	beq.n	8007896 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8007814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007816:	689b      	ldr	r3, [r3, #8]
 8007818:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	6859      	ldr	r1, [r3, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007826:	035b      	lsls	r3, r3, #13
 8007828:	430b      	orrs	r3, r1
 800782a:	431a      	orrs	r2, r3
 800782c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800782e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	2b01      	cmp	r3, #1
 800783c:	d108      	bne.n	8007850 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b01      	cmp	r3, #1
 800784a:	d101      	bne.n	8007850 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8007850:	2300      	movs	r3, #0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d15c      	bne.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	2b01      	cmp	r3, #1
 8007860:	d107      	bne.n	8007872 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b01      	cmp	r3, #1
 800786c:	d101      	bne.n	8007872 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8007872:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8007874:	2b00      	cmp	r3, #0
 8007876:	d14b      	bne.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8007878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8007880:	f023 030f 	bic.w	r3, r3, #15
 8007884:	683a      	ldr	r2, [r7, #0]
 8007886:	6811      	ldr	r1, [r2, #0]
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	6892      	ldr	r2, [r2, #8]
 800788c:	430a      	orrs	r2, r1
 800788e:	431a      	orrs	r2, r3
 8007890:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007892:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8007894:	e03c      	b.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007896:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800789e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078a0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	f003 0303 	and.w	r3, r3, #3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d108      	bne.n	80078c2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d101      	bne.n	80078c2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80078be:	2301      	movs	r3, #1
 80078c0:	e000      	b.n	80078c4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80078c2:	2300      	movs	r3, #0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d123      	bne.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	f003 0303 	and.w	r3, r3, #3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d107      	bne.n	80078e4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0301 	and.w	r3, r3, #1
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d101      	bne.n	80078e4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80078e0:	2301      	movs	r3, #1
 80078e2:	e000      	b.n	80078e6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80078e4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d112      	bne.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80078ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80078f2:	f023 030f 	bic.w	r3, r3, #15
 80078f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078f8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80078fa:	e009      	b.n	8007910 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	f043 0220 	orr.w	r2, r3, #32
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800790e:	e000      	b.n	8007912 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8007910:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800791a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800791e:	4618      	mov	r0, r3
 8007920:	3764      	adds	r7, #100	; 0x64
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	50000100 	.word	0x50000100
 8007930:	50000400 	.word	0x50000400
 8007934:	50000500 	.word	0x50000500
 8007938:	50000300 	.word	0x50000300
 800793c:	50000700 	.word	0x50000700

08007940 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007948:	2300      	movs	r3, #0
 800794a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f003 0303 	and.w	r3, r3, #3
 8007956:	2b01      	cmp	r3, #1
 8007958:	d108      	bne.n	800796c <ADC_Enable+0x2c>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <ADC_Enable+0x2c>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <ADC_Enable+0x2e>
 800796c:	2300      	movs	r3, #0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d143      	bne.n	80079fa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689a      	ldr	r2, [r3, #8]
 8007978:	4b22      	ldr	r3, [pc, #136]	; (8007a04 <ADC_Enable+0xc4>)
 800797a:	4013      	ands	r3, r2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007984:	f043 0210 	orr.w	r2, r3, #16
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007990:	f043 0201 	orr.w	r2, r3, #1
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e02f      	b.n	80079fc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f042 0201 	orr.w	r2, r2, #1
 80079aa:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80079ac:	f7fe fc14 	bl	80061d8 <HAL_GetTick>
 80079b0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80079b2:	e01b      	b.n	80079ec <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80079b4:	f7fe fc10 	bl	80061d8 <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d914      	bls.n	80079ec <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d00d      	beq.n	80079ec <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d4:	f043 0210 	orr.w	r2, r3, #16
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e0:	f043 0201 	orr.w	r2, r3, #1
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e007      	b.n	80079fc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d1dc      	bne.n	80079b4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	8000003f 	.word	0x8000003f

08007a08 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d108      	bne.n	8007a34 <ADC_Disable+0x2c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <ADC_Disable+0x2c>
 8007a30:	2301      	movs	r3, #1
 8007a32:	e000      	b.n	8007a36 <ADC_Disable+0x2e>
 8007a34:	2300      	movs	r3, #0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d047      	beq.n	8007aca <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	f003 030d 	and.w	r3, r3, #13
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d10f      	bne.n	8007a68 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689a      	ldr	r2, [r3, #8]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0202 	orr.w	r2, r2, #2
 8007a56:	609a      	str	r2, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8007a60:	f7fe fbba 	bl	80061d8 <HAL_GetTick>
 8007a64:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007a66:	e029      	b.n	8007abc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	f043 0210 	orr.w	r2, r3, #16
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a78:	f043 0201 	orr.w	r2, r3, #1
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e023      	b.n	8007acc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007a84:	f7fe fba8 	bl	80061d8 <HAL_GetTick>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	1ad3      	subs	r3, r2, r3
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d914      	bls.n	8007abc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d10d      	bne.n	8007abc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	f043 0210 	orr.w	r2, r3, #16
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab0:	f043 0201 	orr.w	r2, r3, #1
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e007      	b.n	8007acc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d0dc      	beq.n	8007a84 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f003 030c 	and.w	r3, r3, #12
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 809a 	beq.w	8007c2e <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b04:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b08:	d12a      	bne.n	8007b60 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d126      	bne.n	8007b60 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d122      	bne.n	8007b60 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8007b1a:	230c      	movs	r3, #12
 8007b1c:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8007b1e:	e014      	b.n	8007b4a <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	4a45      	ldr	r2, [pc, #276]	; (8007c38 <ADC_ConversionStop+0x164>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d90d      	bls.n	8007b44 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2c:	f043 0210 	orr.w	r2, r3, #16
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b38:	f043 0201 	orr.w	r2, r3, #1
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e075      	b.n	8007c30 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	3301      	adds	r3, #1
 8007b48:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b54:	2b40      	cmp	r3, #64	; 0x40
 8007b56:	d1e3      	bne.n	8007b20 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2240      	movs	r2, #64	; 0x40
 8007b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b60      	cmp	r3, #96	; 0x60
 8007b64:	d015      	beq.n	8007b92 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	689b      	ldr	r3, [r3, #8]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	d10e      	bne.n	8007b92 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d107      	bne.n	8007b92 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0210 	orr.w	r2, r2, #16
 8007b90:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b0c      	cmp	r3, #12
 8007b96:	d015      	beq.n	8007bc4 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0308 	and.w	r3, r3, #8
 8007ba2:	2b08      	cmp	r3, #8
 8007ba4:	d10e      	bne.n	8007bc4 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d107      	bne.n	8007bc4 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0220 	orr.w	r2, r2, #32
 8007bc2:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b60      	cmp	r3, #96	; 0x60
 8007bc8:	d004      	beq.n	8007bd4 <ADC_ConversionStop+0x100>
 8007bca:	2b6c      	cmp	r3, #108	; 0x6c
 8007bcc:	d105      	bne.n	8007bda <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8007bce:	230c      	movs	r3, #12
 8007bd0:	617b      	str	r3, [r7, #20]
        break;
 8007bd2:	e005      	b.n	8007be0 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	617b      	str	r3, [r7, #20]
        break;
 8007bd8:	e002      	b.n	8007be0 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8007bda:	2304      	movs	r3, #4
 8007bdc:	617b      	str	r3, [r7, #20]
        break;
 8007bde:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8007be0:	f7fe fafa 	bl	80061d8 <HAL_GetTick>
 8007be4:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8007be6:	e01b      	b.n	8007c20 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8007be8:	f7fe faf6 	bl	80061d8 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b0b      	cmp	r3, #11
 8007bf4:	d914      	bls.n	8007c20 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689a      	ldr	r2, [r3, #8]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00d      	beq.n	8007c20 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c08:	f043 0210 	orr.w	r2, r3, #16
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c14:	f043 0201 	orr.w	r2, r3, #1
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e007      	b.n	8007c30 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	4013      	ands	r3, r2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1dc      	bne.n	8007be8 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	000993ff 	.word	0x000993ff

08007c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f003 0307 	and.w	r3, r3, #7
 8007c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c4c:	4b0c      	ldr	r3, [pc, #48]	; (8007c80 <__NVIC_SetPriorityGrouping+0x44>)
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c58:	4013      	ands	r3, r2
 8007c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c6e:	4a04      	ldr	r2, [pc, #16]	; (8007c80 <__NVIC_SetPriorityGrouping+0x44>)
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	60d3      	str	r3, [r2, #12]
}
 8007c74:	bf00      	nop
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr
 8007c80:	e000ed00 	.word	0xe000ed00

08007c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c84:	b480      	push	{r7}
 8007c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c88:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <__NVIC_GetPriorityGrouping+0x18>)
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	0a1b      	lsrs	r3, r3, #8
 8007c8e:	f003 0307 	and.w	r3, r3, #7
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr
 8007c9c:	e000ed00 	.word	0xe000ed00

08007ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	db0b      	blt.n	8007cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	f003 021f 	and.w	r2, r3, #31
 8007cb8:	4907      	ldr	r1, [pc, #28]	; (8007cd8 <__NVIC_EnableIRQ+0x38>)
 8007cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	2001      	movs	r0, #1
 8007cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8007cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007cca:	bf00      	nop
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	e000e100 	.word	0xe000e100

08007cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	6039      	str	r1, [r7, #0]
 8007ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	db0a      	blt.n	8007d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	490c      	ldr	r1, [pc, #48]	; (8007d28 <__NVIC_SetPriority+0x4c>)
 8007cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cfa:	0112      	lsls	r2, r2, #4
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	440b      	add	r3, r1
 8007d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d04:	e00a      	b.n	8007d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	b2da      	uxtb	r2, r3
 8007d0a:	4908      	ldr	r1, [pc, #32]	; (8007d2c <__NVIC_SetPriority+0x50>)
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	f003 030f 	and.w	r3, r3, #15
 8007d12:	3b04      	subs	r3, #4
 8007d14:	0112      	lsls	r2, r2, #4
 8007d16:	b2d2      	uxtb	r2, r2
 8007d18:	440b      	add	r3, r1
 8007d1a:	761a      	strb	r2, [r3, #24]
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	e000e100 	.word	0xe000e100
 8007d2c:	e000ed00 	.word	0xe000ed00

08007d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b089      	sub	sp, #36	; 0x24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f003 0307 	and.w	r3, r3, #7
 8007d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f1c3 0307 	rsb	r3, r3, #7
 8007d4a:	2b04      	cmp	r3, #4
 8007d4c:	bf28      	it	cs
 8007d4e:	2304      	movcs	r3, #4
 8007d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	3304      	adds	r3, #4
 8007d56:	2b06      	cmp	r3, #6
 8007d58:	d902      	bls.n	8007d60 <NVIC_EncodePriority+0x30>
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	3b03      	subs	r3, #3
 8007d5e:	e000      	b.n	8007d62 <NVIC_EncodePriority+0x32>
 8007d60:	2300      	movs	r3, #0
 8007d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d64:	f04f 32ff 	mov.w	r2, #4294967295
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	43da      	mvns	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	401a      	ands	r2, r3
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d78:	f04f 31ff 	mov.w	r1, #4294967295
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d82:	43d9      	mvns	r1, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d88:	4313      	orrs	r3, r2
         );
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3724      	adds	r7, #36	; 0x24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007da8:	d301      	bcc.n	8007dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007daa:	2301      	movs	r3, #1
 8007dac:	e00f      	b.n	8007dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007dae:	4a0a      	ldr	r2, [pc, #40]	; (8007dd8 <SysTick_Config+0x40>)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3b01      	subs	r3, #1
 8007db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007db6:	210f      	movs	r1, #15
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	f7ff ff8e 	bl	8007cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <SysTick_Config+0x40>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007dc6:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <SysTick_Config+0x40>)
 8007dc8:	2207      	movs	r2, #7
 8007dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	e000e010 	.word	0xe000e010

08007ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7ff ff29 	bl	8007c3c <__NVIC_SetPriorityGrouping>
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b086      	sub	sp, #24
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	4603      	mov	r3, r0
 8007dfa:	60b9      	str	r1, [r7, #8]
 8007dfc:	607a      	str	r2, [r7, #4]
 8007dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007e04:	f7ff ff3e 	bl	8007c84 <__NVIC_GetPriorityGrouping>
 8007e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	68b9      	ldr	r1, [r7, #8]
 8007e0e:	6978      	ldr	r0, [r7, #20]
 8007e10:	f7ff ff8e 	bl	8007d30 <NVIC_EncodePriority>
 8007e14:	4602      	mov	r2, r0
 8007e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f7ff ff5d 	bl	8007cdc <__NVIC_SetPriority>
}
 8007e22:	bf00      	nop
 8007e24:	3718      	adds	r7, #24
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	4603      	mov	r3, r0
 8007e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7ff ff31 	bl	8007ca0 <__NVIC_EnableIRQ>
}
 8007e3e:	bf00      	nop
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff ffa2 	bl	8007d98 <SysTick_Config>
 8007e54:	4603      	mov	r3, r0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e014      	b.n	8007e9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	791b      	ldrb	r3, [r3, #4]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d105      	bne.n	8007e86 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7fd ff45 	bl	8005d10 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2202      	movs	r2, #2
 8007e8a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2201      	movs	r2, #1
 8007e96:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6819      	ldr	r1, [r3, #0]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	43da      	mvns	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	400a      	ands	r2, r1
 8007ec2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6819      	ldr	r1, [r3, #0]
 8007eec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	43da      	mvns	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	400a      	ands	r2, r1
 8007efe:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6819      	ldr	r1, [r3, #0]
 8007f06:	2201      	movs	r2, #1
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43da      	mvns	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	400a      	ands	r2, r1
 8007f16:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10f      	bne.n	8007f3e <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fae3 	bl	80084ee <HAL_DMA_Abort>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	e00e      	b.n	8007f5c <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fad3 	bl	80084ee <HAL_DMA_Abort>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007f5a:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2204      	movs	r2, #4
 8007f66:	711a      	strb	r2, [r3, #4]
 8007f68:	e002      	b.n	8007f70 <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8007f7a:	b480      	push	{r7}
 8007f7c:	b083      	sub	sp, #12
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8007f82:	bf00      	nop
 8007f84:	370c      	adds	r7, #12
 8007f86:	46bd      	mov	sp, r7
 8007f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8c:	4770      	bx	lr

08007f8e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b083      	sub	sp, #12
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8007faa:	bf00      	nop
 8007fac:	370c      	adds	r7, #12
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8007fb6:	b480      	push	{r7}
 8007fb8:	b087      	sub	sp, #28
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	60f8      	str	r0, [r7, #12]
 8007fbe:	60b9      	str	r1, [r7, #8]
 8007fc0:	607a      	str	r2, [r7, #4]
 8007fc2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d105      	bne.n	8007fe0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	4413      	add	r3, r2
 8007fda:	3308      	adds	r3, #8
 8007fdc:	617b      	str	r3, [r7, #20]
 8007fde:	e004      	b.n	8007fea <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	3314      	adds	r3, #20
 8007fe8:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	461a      	mov	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	371c      	adds	r7, #28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	795b      	ldrb	r3, [r3, #5]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d101      	bne.n	8008016 <HAL_DAC_Start+0x16>
 8008012:	2302      	movs	r3, #2
 8008014:	e039      	b.n	800808a <HAL_DAC_Start+0x8a>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	6819      	ldr	r1, [r3, #0]
 8008028:	2201      	movs	r2, #1
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	409a      	lsls	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10f      	bne.n	800805c <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008046:	2b3c      	cmp	r3, #60	; 0x3c
 8008048:	d118      	bne.n	800807c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f042 0201 	orr.w	r2, r2, #1
 8008058:	605a      	str	r2, [r3, #4]
 800805a:	e00f      	b.n	800807c <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008066:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 800806a:	d107      	bne.n	800807c <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f042 0202 	orr.w	r2, r2, #2
 800807a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
	...

08008098 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b086      	sub	sp, #24
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	795b      	ldrb	r3, [r3, #5]
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d101      	bne.n	80080b6 <HAL_DAC_Start_DMA+0x1e>
 80080b2:	2302      	movs	r3, #2
 80080b4:	e08e      	b.n	80081d4 <HAL_DAC_Start_DMA+0x13c>
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2202      	movs	r2, #2
 80080c0:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d12a      	bne.n	800811e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	4a43      	ldr	r2, [pc, #268]	; (80081dc <HAL_DAC_Start_DMA+0x144>)
 80080ce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	4a42      	ldr	r2, [pc, #264]	; (80081e0 <HAL_DAC_Start_DMA+0x148>)
 80080d6:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	4a41      	ldr	r2, [pc, #260]	; (80081e4 <HAL_DAC_Start_DMA+0x14c>)
 80080de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	2b04      	cmp	r3, #4
 80080f4:	d009      	beq.n	800810a <HAL_DAC_Start_DMA+0x72>
 80080f6:	2b08      	cmp	r3, #8
 80080f8:	d00c      	beq.n	8008114 <HAL_DAC_Start_DMA+0x7c>
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d000      	beq.n	8008100 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80080fe:	e039      	b.n	8008174 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	3308      	adds	r3, #8
 8008106:	617b      	str	r3, [r7, #20]
        break;
 8008108:	e034      	b.n	8008174 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	330c      	adds	r3, #12
 8008110:	617b      	str	r3, [r7, #20]
        break;
 8008112:	e02f      	b.n	8008174 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3310      	adds	r3, #16
 800811a:	617b      	str	r3, [r7, #20]
        break;
 800811c:	e02a      	b.n	8008174 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	4a31      	ldr	r2, [pc, #196]	; (80081e8 <HAL_DAC_Start_DMA+0x150>)
 8008124:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	4a30      	ldr	r2, [pc, #192]	; (80081ec <HAL_DAC_Start_DMA+0x154>)
 800812c:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	4a2f      	ldr	r2, [pc, #188]	; (80081f0 <HAL_DAC_Start_DMA+0x158>)
 8008134:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008144:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	2b04      	cmp	r3, #4
 800814a:	d009      	beq.n	8008160 <HAL_DAC_Start_DMA+0xc8>
 800814c:	2b08      	cmp	r3, #8
 800814e:	d00c      	beq.n	800816a <HAL_DAC_Start_DMA+0xd2>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d000      	beq.n	8008156 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8008154:	e00e      	b.n	8008174 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	3314      	adds	r3, #20
 800815c:	617b      	str	r3, [r7, #20]
        break;
 800815e:	e009      	b.n	8008174 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	3318      	adds	r3, #24
 8008166:	617b      	str	r3, [r7, #20]
        break;
 8008168:	e004      	b.n	8008174 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	331c      	adds	r3, #28
 8008170:	617b      	str	r3, [r7, #20]
        break;
 8008172:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10f      	bne.n	800819a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008188:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6898      	ldr	r0, [r3, #8]
 800818e:	6879      	ldr	r1, [r7, #4]
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	f000 f94c 	bl	8008430 <HAL_DMA_Start_IT>
 8008198:	e00e      	b.n	80081b8 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80081a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	68d8      	ldr	r0, [r3, #12]
 80081ae:	6879      	ldr	r1, [r7, #4]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	697a      	ldr	r2, [r7, #20]
 80081b4:	f000 f93c 	bl	8008430 <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	2201      	movs	r2, #1
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	409a      	lsls	r2, r3
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	430a      	orrs	r2, r1
 80081d0:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	080082cb 	.word	0x080082cb
 80081e0:	080082ed 	.word	0x080082ed
 80081e4:	08008309 	.word	0x08008309
 80081e8:	08008337 	.word	0x08008337
 80081ec:	08008359 	.word	0x08008359
 80081f0:	08008375 	.word	0x08008375

080081f4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8008200:	2300      	movs	r3, #0
 8008202:	617b      	str	r3, [r7, #20]
 8008204:	2300      	movs	r3, #0
 8008206:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	795b      	ldrb	r3, [r3, #5]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_DAC_ConfigChannel+0x20>
 8008210:	2302      	movs	r3, #2
 8008212:	e036      	b.n	8008282 <HAL_DAC_ConfigChannel+0x8e>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2202      	movs	r2, #2
 800821e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8008228:	f640 72fe 	movw	r2, #4094	; 0xffe
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	fa02 f303 	lsl.w	r3, r2, r3
 8008232:	43db      	mvns	r3, r3
 8008234:	697a      	ldr	r2, [r7, #20]
 8008236:	4013      	ands	r3, r2
 8008238:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	4313      	orrs	r3, r2
 8008244:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	fa02 f303 	lsl.w	r3, r2, r3
 800824e:	697a      	ldr	r2, [r7, #20]
 8008250:	4313      	orrs	r3, r2
 8008252:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6819      	ldr	r1, [r3, #0]
 8008262:	22c0      	movs	r2, #192	; 0xc0
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	fa02 f303 	lsl.w	r3, r2, r3
 800826a:	43da      	mvns	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	400a      	ands	r2, r1
 8008272:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2201      	movs	r2, #1
 8008278:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr

0800828e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f7ff fe4e 	bl	8007f7a <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	711a      	strb	r2, [r3, #4]
}
 80082e4:	bf00      	nop
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80082fa:	68f8      	ldr	r0, [r7, #12]
 80082fc:	f7ff fe47 	bl	8007f8e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8008300:	bf00      	nop
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	f043 0204 	orr.w	r2, r3, #4
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff fe3d 	bl	8007fa2 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	711a      	strb	r2, [r3, #4]
}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff ffa2 	bl	800828e <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2201      	movs	r2, #1
 800834e:	711a      	strb	r2, [r3, #4]
}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008364:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff ff9b 	bl	80082a2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 800836c:	bf00      	nop
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f043 0204 	orr.w	r2, r3, #4
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff ff91 	bl	80082b6 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	711a      	strb	r2, [r3, #4]
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b084      	sub	sp, #16
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e037      	b.n	8008428 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80083ce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80083d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80083dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	69db      	ldr	r3, [r3, #28]
 80083fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	4313      	orrs	r3, r2
 8008400:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f9b8 	bl	8008780 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2201      	movs	r2, #1
 800841a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8008426:	2300      	movs	r3, #0
}  
 8008428:	4618      	mov	r0, r3
 800842a:	3710      	adds	r7, #16
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_DMA_Start_IT+0x20>
 800844c:	2302      	movs	r3, #2
 800844e:	e04a      	b.n	80084e6 <HAL_DMA_Start_IT+0xb6>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800845e:	2b01      	cmp	r3, #1
 8008460:	d13a      	bne.n	80084d8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2202      	movs	r2, #2
 8008466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2200      	movs	r2, #0
 800846e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	68b9      	ldr	r1, [r7, #8]
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 f94b 	bl	8008722 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	2b00      	cmp	r3, #0
 8008492:	d008      	beq.n	80084a6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 020e 	orr.w	r2, r2, #14
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	e00f      	b.n	80084c6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 020a 	orr.w	r2, r2, #10
 80084b4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0204 	bic.w	r2, r2, #4
 80084c4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f042 0201 	orr.w	r2, r2, #1
 80084d4:	601a      	str	r2, [r3, #0]
 80084d6:	e005      	b.n	80084e4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80084e0:	2302      	movs	r3, #2
 80084e2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80084e6:	4618      	mov	r0, r3
 80084e8:	3718      	adds	r7, #24
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d008      	beq.n	8008512 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2204      	movs	r2, #4
 8008504:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e020      	b.n	8008554 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f022 020e 	bic.w	r2, r2, #14
 8008520:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 0201 	bic.w	r2, r2, #1
 8008530:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853a:	2101      	movs	r1, #1
 800853c:	fa01 f202 	lsl.w	r2, r1, r2
 8008540:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008572:	2b02      	cmp	r3, #2
 8008574:	d005      	beq.n	8008582 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2204      	movs	r2, #4
 800857a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	73fb      	strb	r3, [r7, #15]
 8008580:	e027      	b.n	80085d2 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 020e 	bic.w	r2, r2, #14
 8008590:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	681a      	ldr	r2, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f022 0201 	bic.w	r2, r2, #1
 80085a0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	2101      	movs	r1, #1
 80085ac:	fa01 f202 	lsl.w	r2, r1, r2
 80085b0:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
    } 
  }
  return status;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	2204      	movs	r2, #4
 80085fa:	409a      	lsls	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4013      	ands	r3, r2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d024      	beq.n	800864e <HAL_DMA_IRQHandler+0x72>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f003 0304 	and.w	r3, r3, #4
 800860a:	2b00      	cmp	r3, #0
 800860c:	d01f      	beq.n	800864e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0320 	and.w	r3, r3, #32
 8008618:	2b00      	cmp	r3, #0
 800861a:	d107      	bne.n	800862c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0204 	bic.w	r2, r2, #4
 800862a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008634:	2104      	movs	r1, #4
 8008636:	fa01 f202 	lsl.w	r2, r1, r2
 800863a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d06a      	beq.n	800871a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800864c:	e065      	b.n	800871a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	2202      	movs	r2, #2
 8008654:	409a      	lsls	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4013      	ands	r3, r2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d02c      	beq.n	80086b8 <HAL_DMA_IRQHandler+0xdc>
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f003 0302 	and.w	r3, r3, #2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d027      	beq.n	80086b8 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 020a 	bic.w	r2, r2, #10
 8008684:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008696:	2102      	movs	r1, #2
 8008698:	fa01 f202 	lsl.w	r2, r1, r2
 800869c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d035      	beq.n	800871a <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80086b6:	e030      	b.n	800871a <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	2208      	movs	r2, #8
 80086be:	409a      	lsls	r2, r3
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4013      	ands	r3, r2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d028      	beq.n	800871a <HAL_DMA_IRQHandler+0x13e>
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	f003 0308 	and.w	r3, r3, #8
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d023      	beq.n	800871a <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 020e 	bic.w	r2, r2, #14
 80086e0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	2101      	movs	r1, #1
 80086ec:	fa01 f202 	lsl.w	r2, r1, r2
 80086f0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870c:	2b00      	cmp	r3, #0
 800870e:	d004      	beq.n	800871a <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	4798      	blx	r3
    }
  }
}  
 8008718:	e7ff      	b.n	800871a <HAL_DMA_IRQHandler+0x13e>
 800871a:	bf00      	nop
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	60f8      	str	r0, [r7, #12]
 800872a:	60b9      	str	r1, [r7, #8]
 800872c:	607a      	str	r2, [r7, #4]
 800872e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008738:	2101      	movs	r1, #1
 800873a:	fa01 f202 	lsl.w	r2, r1, r2
 800873e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	683a      	ldr	r2, [r7, #0]
 8008746:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b10      	cmp	r3, #16
 800874e:	d108      	bne.n	8008762 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008760:	e007      	b.n	8008772 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	60da      	str	r2, [r3, #12]
}
 8008772:	bf00      	nop
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
	...

08008780 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	461a      	mov	r2, r3
 800878e:	4b14      	ldr	r3, [pc, #80]	; (80087e0 <DMA_CalcBaseAndBitshift+0x60>)
 8008790:	429a      	cmp	r2, r3
 8008792:	d80f      	bhi.n	80087b4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	4b12      	ldr	r3, [pc, #72]	; (80087e4 <DMA_CalcBaseAndBitshift+0x64>)
 800879c:	4413      	add	r3, r2
 800879e:	4a12      	ldr	r2, [pc, #72]	; (80087e8 <DMA_CalcBaseAndBitshift+0x68>)
 80087a0:	fba2 2303 	umull	r2, r3, r2, r3
 80087a4:	091b      	lsrs	r3, r3, #4
 80087a6:	009a      	lsls	r2, r3, #2
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a0f      	ldr	r2, [pc, #60]	; (80087ec <DMA_CalcBaseAndBitshift+0x6c>)
 80087b0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80087b2:	e00e      	b.n	80087d2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	4b0d      	ldr	r3, [pc, #52]	; (80087f0 <DMA_CalcBaseAndBitshift+0x70>)
 80087bc:	4413      	add	r3, r2
 80087be:	4a0a      	ldr	r2, [pc, #40]	; (80087e8 <DMA_CalcBaseAndBitshift+0x68>)
 80087c0:	fba2 2303 	umull	r2, r3, r2, r3
 80087c4:	091b      	lsrs	r3, r3, #4
 80087c6:	009a      	lsls	r2, r3, #2
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a09      	ldr	r2, [pc, #36]	; (80087f4 <DMA_CalcBaseAndBitshift+0x74>)
 80087d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	40020407 	.word	0x40020407
 80087e4:	bffdfff8 	.word	0xbffdfff8
 80087e8:	cccccccd 	.word	0xcccccccd
 80087ec:	40020000 	.word	0x40020000
 80087f0:	bffdfbf8 	.word	0xbffdfbf8
 80087f4:	40020400 	.word	0x40020400

080087f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b087      	sub	sp, #28
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008806:	e160      	b.n	8008aca <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	2101      	movs	r1, #1
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	fa01 f303 	lsl.w	r3, r1, r3
 8008814:	4013      	ands	r3, r2
 8008816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 8152 	beq.w	8008ac4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f003 0303 	and.w	r3, r3, #3
 8008828:	2b01      	cmp	r3, #1
 800882a:	d005      	beq.n	8008838 <HAL_GPIO_Init+0x40>
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f003 0303 	and.w	r3, r3, #3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d130      	bne.n	800889a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	2203      	movs	r2, #3
 8008844:	fa02 f303 	lsl.w	r3, r2, r3
 8008848:	43db      	mvns	r3, r3
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	4013      	ands	r3, r2
 800884e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	005b      	lsls	r3, r3, #1
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4313      	orrs	r3, r2
 8008860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800886e:	2201      	movs	r2, #1
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	43db      	mvns	r3, r3
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4013      	ands	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	091b      	lsrs	r3, r3, #4
 8008884:	f003 0201 	and.w	r2, r3, #1
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	fa02 f303 	lsl.w	r3, r2, r3
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	4313      	orrs	r3, r2
 8008892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f003 0303 	and.w	r3, r3, #3
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d017      	beq.n	80088d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	2203      	movs	r2, #3
 80088b2:	fa02 f303 	lsl.w	r3, r2, r3
 80088b6:	43db      	mvns	r3, r3
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4013      	ands	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	689a      	ldr	r2, [r3, #8]
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	005b      	lsls	r3, r3, #1
 80088c6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ca:	693a      	ldr	r2, [r7, #16]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	f003 0303 	and.w	r3, r3, #3
 80088de:	2b02      	cmp	r3, #2
 80088e0:	d123      	bne.n	800892a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	08da      	lsrs	r2, r3, #3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3208      	adds	r2, #8
 80088ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f003 0307 	and.w	r3, r3, #7
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	220f      	movs	r2, #15
 80088fa:	fa02 f303 	lsl.w	r3, r2, r3
 80088fe:	43db      	mvns	r3, r3
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4013      	ands	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	691a      	ldr	r2, [r3, #16]
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	fa02 f303 	lsl.w	r3, r2, r3
 8008916:	693a      	ldr	r2, [r7, #16]
 8008918:	4313      	orrs	r3, r2
 800891a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	08da      	lsrs	r2, r3, #3
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3208      	adds	r2, #8
 8008924:	6939      	ldr	r1, [r7, #16]
 8008926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	005b      	lsls	r3, r3, #1
 8008934:	2203      	movs	r2, #3
 8008936:	fa02 f303 	lsl.w	r3, r2, r3
 800893a:	43db      	mvns	r3, r3
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4013      	ands	r3, r2
 8008940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f003 0203 	and.w	r2, r3, #3
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	005b      	lsls	r3, r3, #1
 800894e:	fa02 f303 	lsl.w	r3, r2, r3
 8008952:	693a      	ldr	r2, [r7, #16]
 8008954:	4313      	orrs	r3, r2
 8008956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	693a      	ldr	r2, [r7, #16]
 800895c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008966:	2b00      	cmp	r3, #0
 8008968:	f000 80ac 	beq.w	8008ac4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800896c:	4b5e      	ldr	r3, [pc, #376]	; (8008ae8 <HAL_GPIO_Init+0x2f0>)
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	4a5d      	ldr	r2, [pc, #372]	; (8008ae8 <HAL_GPIO_Init+0x2f0>)
 8008972:	f043 0301 	orr.w	r3, r3, #1
 8008976:	6193      	str	r3, [r2, #24]
 8008978:	4b5b      	ldr	r3, [pc, #364]	; (8008ae8 <HAL_GPIO_Init+0x2f0>)
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	f003 0301 	and.w	r3, r3, #1
 8008980:	60bb      	str	r3, [r7, #8]
 8008982:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008984:	4a59      	ldr	r2, [pc, #356]	; (8008aec <HAL_GPIO_Init+0x2f4>)
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	089b      	lsrs	r3, r3, #2
 800898a:	3302      	adds	r3, #2
 800898c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008990:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f003 0303 	and.w	r3, r3, #3
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	220f      	movs	r2, #15
 800899c:	fa02 f303 	lsl.w	r3, r2, r3
 80089a0:	43db      	mvns	r3, r3
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4013      	ands	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80089ae:	d025      	beq.n	80089fc <HAL_GPIO_Init+0x204>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4a4f      	ldr	r2, [pc, #316]	; (8008af0 <HAL_GPIO_Init+0x2f8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d01f      	beq.n	80089f8 <HAL_GPIO_Init+0x200>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a4e      	ldr	r2, [pc, #312]	; (8008af4 <HAL_GPIO_Init+0x2fc>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d019      	beq.n	80089f4 <HAL_GPIO_Init+0x1fc>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a4d      	ldr	r2, [pc, #308]	; (8008af8 <HAL_GPIO_Init+0x300>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d013      	beq.n	80089f0 <HAL_GPIO_Init+0x1f8>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4a4c      	ldr	r2, [pc, #304]	; (8008afc <HAL_GPIO_Init+0x304>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d00d      	beq.n	80089ec <HAL_GPIO_Init+0x1f4>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a4b      	ldr	r2, [pc, #300]	; (8008b00 <HAL_GPIO_Init+0x308>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d007      	beq.n	80089e8 <HAL_GPIO_Init+0x1f0>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4a4a      	ldr	r2, [pc, #296]	; (8008b04 <HAL_GPIO_Init+0x30c>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d101      	bne.n	80089e4 <HAL_GPIO_Init+0x1ec>
 80089e0:	2306      	movs	r3, #6
 80089e2:	e00c      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089e4:	2307      	movs	r3, #7
 80089e6:	e00a      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089e8:	2305      	movs	r3, #5
 80089ea:	e008      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089ec:	2304      	movs	r3, #4
 80089ee:	e006      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089f0:	2303      	movs	r3, #3
 80089f2:	e004      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089f4:	2302      	movs	r3, #2
 80089f6:	e002      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089f8:	2301      	movs	r3, #1
 80089fa:	e000      	b.n	80089fe <HAL_GPIO_Init+0x206>
 80089fc:	2300      	movs	r3, #0
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	f002 0203 	and.w	r2, r2, #3
 8008a04:	0092      	lsls	r2, r2, #2
 8008a06:	4093      	lsls	r3, r2
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008a0e:	4937      	ldr	r1, [pc, #220]	; (8008aec <HAL_GPIO_Init+0x2f4>)
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	089b      	lsrs	r3, r3, #2
 8008a14:	3302      	adds	r3, #2
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a1c:	4b3a      	ldr	r3, [pc, #232]	; (8008b08 <HAL_GPIO_Init+0x310>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	43db      	mvns	r3, r3
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4013      	ands	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d003      	beq.n	8008a40 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008a38:	693a      	ldr	r2, [r7, #16]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008a40:	4a31      	ldr	r2, [pc, #196]	; (8008b08 <HAL_GPIO_Init+0x310>)
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008a46:	4b30      	ldr	r3, [pc, #192]	; (8008b08 <HAL_GPIO_Init+0x310>)
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	43db      	mvns	r3, r3
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4013      	ands	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008a6a:	4a27      	ldr	r2, [pc, #156]	; (8008b08 <HAL_GPIO_Init+0x310>)
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a70:	4b25      	ldr	r3, [pc, #148]	; (8008b08 <HAL_GPIO_Init+0x310>)
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008a94:	4a1c      	ldr	r2, [pc, #112]	; (8008b08 <HAL_GPIO_Init+0x310>)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a9a:	4b1b      	ldr	r3, [pc, #108]	; (8008b08 <HAL_GPIO_Init+0x310>)
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	43db      	mvns	r3, r3
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4013      	ands	r3, r2
 8008aa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008abe:	4a12      	ldr	r2, [pc, #72]	; (8008b08 <HAL_GPIO_Init+0x310>)
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f47f ae97 	bne.w	8008808 <HAL_GPIO_Init+0x10>
  }
}
 8008ada:	bf00      	nop
 8008adc:	371c      	adds	r7, #28
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop
 8008ae8:	40021000 	.word	0x40021000
 8008aec:	40010000 	.word	0x40010000
 8008af0:	48000400 	.word	0x48000400
 8008af4:	48000800 	.word	0x48000800
 8008af8:	48000c00 	.word	0x48000c00
 8008afc:	48001000 	.word	0x48001000
 8008b00:	48001400 	.word	0x48001400
 8008b04:	48001800 	.word	0x48001800
 8008b08:	40010400 	.word	0x40010400

08008b0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691a      	ldr	r2, [r3, #16]
 8008b1c:	887b      	ldrh	r3, [r7, #2]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008b24:	2301      	movs	r3, #1
 8008b26:	73fb      	strb	r3, [r7, #15]
 8008b28:	e001      	b.n	8008b2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b083      	sub	sp, #12
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	807b      	strh	r3, [r7, #2]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b4c:	787b      	ldrb	r3, [r7, #1]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008b52:	887a      	ldrh	r2, [r7, #2]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008b58:	e002      	b.n	8008b60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008b5a:	887a      	ldrh	r2, [r7, #2]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008b76:	4b08      	ldr	r3, [pc, #32]	; (8008b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b78:	695a      	ldr	r2, [r3, #20]
 8008b7a:	88fb      	ldrh	r3, [r7, #6]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d006      	beq.n	8008b90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008b82:	4a05      	ldr	r2, [pc, #20]	; (8008b98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008b84:	88fb      	ldrh	r3, [r7, #6]
 8008b86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f806 	bl	8008b9c <HAL_GPIO_EXTI_Callback>
  }
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	40010400 	.word	0x40010400

08008b9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
	...

08008bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	1d3b      	adds	r3, r7, #4
 8008bbe:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bc0:	1d3b      	adds	r3, r7, #4
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d102      	bne.n	8008bce <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f000 bf01 	b.w	80099d0 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bce:	1d3b      	adds	r3, r7, #4
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 0301 	and.w	r3, r3, #1
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 8160 	beq.w	8008e9e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008bde:	4bae      	ldr	r3, [pc, #696]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	f003 030c 	and.w	r3, r3, #12
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d00c      	beq.n	8008c04 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008bea:	4bab      	ldr	r3, [pc, #684]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f003 030c 	and.w	r3, r3, #12
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d159      	bne.n	8008caa <HAL_RCC_OscConfig+0xf6>
 8008bf6:	4ba8      	ldr	r3, [pc, #672]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c02:	d152      	bne.n	8008caa <HAL_RCC_OscConfig+0xf6>
 8008c04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c08:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c0c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008c10:	fa93 f3a3 	rbit	r3, r3
 8008c14:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008c18:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c1c:	fab3 f383 	clz	r3, r3
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	095b      	lsrs	r3, r3, #5
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f043 0301 	orr.w	r3, r3, #1
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d102      	bne.n	8008c36 <HAL_RCC_OscConfig+0x82>
 8008c30:	4b99      	ldr	r3, [pc, #612]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	e015      	b.n	8008c62 <HAL_RCC_OscConfig+0xae>
 8008c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c3a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8008c42:	fa93 f3a3 	rbit	r3, r3
 8008c46:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008c4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008c4e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8008c52:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8008c56:	fa93 f3a3 	rbit	r3, r3
 8008c5a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008c5e:	4b8e      	ldr	r3, [pc, #568]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008c66:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008c6a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8008c6e:	fa92 f2a2 	rbit	r2, r2
 8008c72:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8008c76:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8008c7a:	fab2 f282 	clz	r2, r2
 8008c7e:	b2d2      	uxtb	r2, r2
 8008c80:	f042 0220 	orr.w	r2, r2, #32
 8008c84:	b2d2      	uxtb	r2, r2
 8008c86:	f002 021f 	and.w	r2, r2, #31
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8008c90:	4013      	ands	r3, r2
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 8102 	beq.w	8008e9c <HAL_RCC_OscConfig+0x2e8>
 8008c98:	1d3b      	adds	r3, r7, #4
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f040 80fc 	bne.w	8008e9c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	f000 be93 	b.w	80099d0 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008caa:	1d3b      	adds	r3, r7, #4
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cb4:	d106      	bne.n	8008cc4 <HAL_RCC_OscConfig+0x110>
 8008cb6:	4b78      	ldr	r3, [pc, #480]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a77      	ldr	r2, [pc, #476]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cc0:	6013      	str	r3, [r2, #0]
 8008cc2:	e030      	b.n	8008d26 <HAL_RCC_OscConfig+0x172>
 8008cc4:	1d3b      	adds	r3, r7, #4
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d10c      	bne.n	8008ce8 <HAL_RCC_OscConfig+0x134>
 8008cce:	4b72      	ldr	r3, [pc, #456]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a71      	ldr	r2, [pc, #452]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cd8:	6013      	str	r3, [r2, #0]
 8008cda:	4b6f      	ldr	r3, [pc, #444]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a6e      	ldr	r2, [pc, #440]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ce4:	6013      	str	r3, [r2, #0]
 8008ce6:	e01e      	b.n	8008d26 <HAL_RCC_OscConfig+0x172>
 8008ce8:	1d3b      	adds	r3, r7, #4
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cf2:	d10c      	bne.n	8008d0e <HAL_RCC_OscConfig+0x15a>
 8008cf4:	4b68      	ldr	r3, [pc, #416]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a67      	ldr	r2, [pc, #412]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008cfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008cfe:	6013      	str	r3, [r2, #0]
 8008d00:	4b65      	ldr	r3, [pc, #404]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a64      	ldr	r2, [pc, #400]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d0a:	6013      	str	r3, [r2, #0]
 8008d0c:	e00b      	b.n	8008d26 <HAL_RCC_OscConfig+0x172>
 8008d0e:	4b62      	ldr	r3, [pc, #392]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a61      	ldr	r2, [pc, #388]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	4b5f      	ldr	r3, [pc, #380]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a5e      	ldr	r2, [pc, #376]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d24:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d26:	1d3b      	adds	r3, r7, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d059      	beq.n	8008de4 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d30:	f7fd fa52 	bl	80061d8 <HAL_GetTick>
 8008d34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d38:	e00a      	b.n	8008d50 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d3a:	f7fd fa4d 	bl	80061d8 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	2b64      	cmp	r3, #100	; 0x64
 8008d48:	d902      	bls.n	8008d50 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	f000 be40 	b.w	80099d0 <HAL_RCC_OscConfig+0xe1c>
 8008d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d54:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d58:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8008d5c:	fa93 f3a3 	rbit	r3, r3
 8008d60:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8008d64:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d68:	fab3 f383 	clz	r3, r3
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	095b      	lsrs	r3, r3, #5
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	f043 0301 	orr.w	r3, r3, #1
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d102      	bne.n	8008d82 <HAL_RCC_OscConfig+0x1ce>
 8008d7c:	4b46      	ldr	r3, [pc, #280]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	e015      	b.n	8008dae <HAL_RCC_OscConfig+0x1fa>
 8008d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d86:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d8a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8008d8e:	fa93 f3a3 	rbit	r3, r3
 8008d92:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008d96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d9a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8008d9e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8008da2:	fa93 f3a3 	rbit	r3, r3
 8008da6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008daa:	4b3b      	ldr	r3, [pc, #236]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008db2:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8008db6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8008dba:	fa92 f2a2 	rbit	r2, r2
 8008dbe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8008dc2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8008dc6:	fab2 f282 	clz	r2, r2
 8008dca:	b2d2      	uxtb	r2, r2
 8008dcc:	f042 0220 	orr.w	r2, r2, #32
 8008dd0:	b2d2      	uxtb	r2, r2
 8008dd2:	f002 021f 	and.w	r2, r2, #31
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8008ddc:	4013      	ands	r3, r2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0ab      	beq.n	8008d3a <HAL_RCC_OscConfig+0x186>
 8008de2:	e05c      	b.n	8008e9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008de4:	f7fd f9f8 	bl	80061d8 <HAL_GetTick>
 8008de8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dec:	e00a      	b.n	8008e04 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dee:	f7fd f9f3 	bl	80061d8 <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b64      	cmp	r3, #100	; 0x64
 8008dfc:	d902      	bls.n	8008e04 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	f000 bde6 	b.w	80099d0 <HAL_RCC_OscConfig+0xe1c>
 8008e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e08:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8008e10:	fa93 f3a3 	rbit	r3, r3
 8008e14:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8008e18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e1c:	fab3 f383 	clz	r3, r3
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	095b      	lsrs	r3, r3, #5
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f043 0301 	orr.w	r3, r3, #1
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d102      	bne.n	8008e36 <HAL_RCC_OscConfig+0x282>
 8008e30:	4b19      	ldr	r3, [pc, #100]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	e015      	b.n	8008e62 <HAL_RCC_OscConfig+0x2ae>
 8008e36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e3a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8008e42:	fa93 f3a3 	rbit	r3, r3
 8008e46:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008e4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e4e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008e52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008e56:	fa93 f3a3 	rbit	r3, r3
 8008e5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008e5e:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <HAL_RCC_OscConfig+0x2e4>)
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008e66:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8008e6a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8008e6e:	fa92 f2a2 	rbit	r2, r2
 8008e72:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8008e76:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8008e7a:	fab2 f282 	clz	r2, r2
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	f042 0220 	orr.w	r2, r2, #32
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	f002 021f 	and.w	r2, r2, #31
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8008e90:	4013      	ands	r3, r2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1ab      	bne.n	8008dee <HAL_RCC_OscConfig+0x23a>
 8008e96:	e002      	b.n	8008e9e <HAL_RCC_OscConfig+0x2ea>
 8008e98:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e9e:	1d3b      	adds	r3, r7, #4
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 8170 	beq.w	800918e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8008eae:	4bd0      	ldr	r3, [pc, #832]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f003 030c 	and.w	r3, r3, #12
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00c      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008eba:	4bcd      	ldr	r3, [pc, #820]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f003 030c 	and.w	r3, r3, #12
 8008ec2:	2b08      	cmp	r3, #8
 8008ec4:	d16d      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x3ee>
 8008ec6:	4bca      	ldr	r3, [pc, #808]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8008ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ed2:	d166      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x3ee>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eda:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008ede:	fa93 f3a3 	rbit	r3, r3
 8008ee2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8008ee6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008eea:	fab3 f383 	clz	r3, r3
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	095b      	lsrs	r3, r3, #5
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f043 0301 	orr.w	r3, r3, #1
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d102      	bne.n	8008f04 <HAL_RCC_OscConfig+0x350>
 8008efe:	4bbc      	ldr	r3, [pc, #752]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	e013      	b.n	8008f2c <HAL_RCC_OscConfig+0x378>
 8008f04:	2302      	movs	r3, #2
 8008f06:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f0a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008f0e:	fa93 f3a3 	rbit	r3, r3
 8008f12:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8008f16:	2302      	movs	r3, #2
 8008f18:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008f1c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008f20:	fa93 f3a3 	rbit	r3, r3
 8008f24:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008f28:	4bb1      	ldr	r3, [pc, #708]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008f32:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008f36:	fa92 f2a2 	rbit	r2, r2
 8008f3a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8008f3e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008f42:	fab2 f282 	clz	r2, r2
 8008f46:	b2d2      	uxtb	r2, r2
 8008f48:	f042 0220 	orr.w	r2, r2, #32
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	f002 021f 	and.w	r2, r2, #31
 8008f52:	2101      	movs	r1, #1
 8008f54:	fa01 f202 	lsl.w	r2, r1, r2
 8008f58:	4013      	ands	r3, r2
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d007      	beq.n	8008f6e <HAL_RCC_OscConfig+0x3ba>
 8008f5e:	1d3b      	adds	r3, r7, #4
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d002      	beq.n	8008f6e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f000 bd31 	b.w	80099d0 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f6e:	4ba0      	ldr	r3, [pc, #640]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f76:	1d3b      	adds	r3, r7, #4
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	21f8      	movs	r1, #248	; 0xf8
 8008f7e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f82:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8008f86:	fa91 f1a1 	rbit	r1, r1
 8008f8a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8008f8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8008f92:	fab1 f181 	clz	r1, r1
 8008f96:	b2c9      	uxtb	r1, r1
 8008f98:	408b      	lsls	r3, r1
 8008f9a:	4995      	ldr	r1, [pc, #596]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fa0:	e0f5      	b.n	800918e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008fa2:	1d3b      	adds	r3, r7, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f000 8085 	beq.w	80090b8 <HAL_RCC_OscConfig+0x504>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fb4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8008fb8:	fa93 f3a3 	rbit	r3, r3
 8008fbc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8008fc0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fc4:	fab3 f383 	clz	r3, r3
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008fce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fda:	f7fd f8fd 	bl	80061d8 <HAL_GetTick>
 8008fde:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fe2:	e00a      	b.n	8008ffa <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fe4:	f7fd f8f8 	bl	80061d8 <HAL_GetTick>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008fee:	1ad3      	subs	r3, r2, r3
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d902      	bls.n	8008ffa <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	f000 bceb 	b.w	80099d0 <HAL_RCC_OscConfig+0xe1c>
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009000:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8009004:	fa93 f3a3 	rbit	r3, r3
 8009008:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800900c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009010:	fab3 f383 	clz	r3, r3
 8009014:	b2db      	uxtb	r3, r3
 8009016:	095b      	lsrs	r3, r3, #5
 8009018:	b2db      	uxtb	r3, r3
 800901a:	f043 0301 	orr.w	r3, r3, #1
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b01      	cmp	r3, #1
 8009022:	d102      	bne.n	800902a <HAL_RCC_OscConfig+0x476>
 8009024:	4b72      	ldr	r3, [pc, #456]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	e013      	b.n	8009052 <HAL_RCC_OscConfig+0x49e>
 800902a:	2302      	movs	r3, #2
 800902c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009030:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8009034:	fa93 f3a3 	rbit	r3, r3
 8009038:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800903c:	2302      	movs	r3, #2
 800903e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8009042:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8009046:	fa93 f3a3 	rbit	r3, r3
 800904a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800904e:	4b68      	ldr	r3, [pc, #416]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	2202      	movs	r2, #2
 8009054:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8009058:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800905c:	fa92 f2a2 	rbit	r2, r2
 8009060:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8009064:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8009068:	fab2 f282 	clz	r2, r2
 800906c:	b2d2      	uxtb	r2, r2
 800906e:	f042 0220 	orr.w	r2, r2, #32
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	f002 021f 	and.w	r2, r2, #31
 8009078:	2101      	movs	r1, #1
 800907a:	fa01 f202 	lsl.w	r2, r1, r2
 800907e:	4013      	ands	r3, r2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0af      	beq.n	8008fe4 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009084:	4b5a      	ldr	r3, [pc, #360]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800908c:	1d3b      	adds	r3, r7, #4
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	21f8      	movs	r1, #248	; 0xf8
 8009094:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009098:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800909c:	fa91 f1a1 	rbit	r1, r1
 80090a0:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80090a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80090a8:	fab1 f181 	clz	r1, r1
 80090ac:	b2c9      	uxtb	r1, r1
 80090ae:	408b      	lsls	r3, r1
 80090b0:	494f      	ldr	r1, [pc, #316]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	600b      	str	r3, [r1, #0]
 80090b6:	e06a      	b.n	800918e <HAL_RCC_OscConfig+0x5da>
 80090b8:	2301      	movs	r3, #1
 80090ba:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090be:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80090c2:	fa93 f3a3 	rbit	r3, r3
 80090c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80090ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090ce:	fab3 f383 	clz	r3, r3
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80090d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	461a      	mov	r2, r3
 80090e0:	2300      	movs	r3, #0
 80090e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090e4:	f7fd f878 	bl	80061d8 <HAL_GetTick>
 80090e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090ec:	e00a      	b.n	8009104 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090ee:	f7fd f873 	bl	80061d8 <HAL_GetTick>
 80090f2:	4602      	mov	r2, r0
 80090f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d902      	bls.n	8009104 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	f000 bc66 	b.w	80099d0 <HAL_RCC_OscConfig+0xe1c>
 8009104:	2302      	movs	r3, #2
 8009106:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800910a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800910e:	fa93 f3a3 	rbit	r3, r3
 8009112:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8009116:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800911a:	fab3 f383 	clz	r3, r3
 800911e:	b2db      	uxtb	r3, r3
 8009120:	095b      	lsrs	r3, r3, #5
 8009122:	b2db      	uxtb	r3, r3
 8009124:	f043 0301 	orr.w	r3, r3, #1
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b01      	cmp	r3, #1
 800912c:	d102      	bne.n	8009134 <HAL_RCC_OscConfig+0x580>
 800912e:	4b30      	ldr	r3, [pc, #192]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	e013      	b.n	800915c <HAL_RCC_OscConfig+0x5a8>
 8009134:	2302      	movs	r3, #2
 8009136:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800913a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800913e:	fa93 f3a3 	rbit	r3, r3
 8009142:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8009146:	2302      	movs	r3, #2
 8009148:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800914c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8009150:	fa93 f3a3 	rbit	r3, r3
 8009154:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009158:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <HAL_RCC_OscConfig+0x63c>)
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	2202      	movs	r2, #2
 800915e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009162:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8009166:	fa92 f2a2 	rbit	r2, r2
 800916a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800916e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8009172:	fab2 f282 	clz	r2, r2
 8009176:	b2d2      	uxtb	r2, r2
 8009178:	f042 0220 	orr.w	r2, r2, #32
 800917c:	b2d2      	uxtb	r2, r2
 800917e:	f002 021f 	and.w	r2, r2, #31
 8009182:	2101      	movs	r1, #1
 8009184:	fa01 f202 	lsl.w	r2, r1, r2
 8009188:	4013      	ands	r3, r2
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1af      	bne.n	80090ee <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0308 	and.w	r3, r3, #8
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 80da 	beq.w	8009352 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800919e:	1d3b      	adds	r3, r7, #4
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d069      	beq.n	800927c <HAL_RCC_OscConfig+0x6c8>
 80091a8:	2301      	movs	r3, #1
 80091aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091b2:	fa93 f3a3 	rbit	r3, r3
 80091b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80091ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091be:	fab3 f383 	clz	r3, r3
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	461a      	mov	r2, r3
 80091c6:	4b0b      	ldr	r3, [pc, #44]	; (80091f4 <HAL_RCC_OscConfig+0x640>)
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	461a      	mov	r2, r3
 80091ce:	2301      	movs	r3, #1
 80091d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091d2:	f7fd f801 	bl	80061d8 <HAL_GetTick>
 80091d6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091da:	e00d      	b.n	80091f8 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091dc:	f7fc fffc 	bl	80061d8 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d905      	bls.n	80091f8 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e3ef      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
 80091f0:	40021000 	.word	0x40021000
 80091f4:	10908120 	.word	0x10908120
 80091f8:	2302      	movs	r3, #2
 80091fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009202:	fa93 f2a3 	rbit	r2, r3
 8009206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8009210:	2202      	movs	r2, #2
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	fa93 f2a3 	rbit	r2, r3
 800921e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009228:	2202      	movs	r2, #2
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	fa93 f2a3 	rbit	r2, r3
 8009236:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800923a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800923c:	4ba4      	ldr	r3, [pc, #656]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 800923e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009240:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8009244:	2102      	movs	r1, #2
 8009246:	6019      	str	r1, [r3, #0]
 8009248:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	fa93 f1a3 	rbit	r1, r3
 8009252:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8009256:	6019      	str	r1, [r3, #0]
  return result;
 8009258:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	fab3 f383 	clz	r3, r3
 8009262:	b2db      	uxtb	r3, r3
 8009264:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009268:	b2db      	uxtb	r3, r3
 800926a:	f003 031f 	and.w	r3, r3, #31
 800926e:	2101      	movs	r1, #1
 8009270:	fa01 f303 	lsl.w	r3, r1, r3
 8009274:	4013      	ands	r3, r2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0b0      	beq.n	80091dc <HAL_RCC_OscConfig+0x628>
 800927a:	e06a      	b.n	8009352 <HAL_RCC_OscConfig+0x79e>
 800927c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009280:	2201      	movs	r2, #1
 8009282:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009284:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	fa93 f2a3 	rbit	r2, r3
 800928e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009292:	601a      	str	r2, [r3, #0]
  return result;
 8009294:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8009298:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800929a:	fab3 f383 	clz	r3, r3
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	461a      	mov	r2, r3
 80092a2:	4b8c      	ldr	r3, [pc, #560]	; (80094d4 <HAL_RCC_OscConfig+0x920>)
 80092a4:	4413      	add	r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	461a      	mov	r2, r3
 80092aa:	2300      	movs	r3, #0
 80092ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092ae:	f7fc ff93 	bl	80061d8 <HAL_GetTick>
 80092b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80092b6:	e009      	b.n	80092cc <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092b8:	f7fc ff8e 	bl	80061d8 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d901      	bls.n	80092cc <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e381      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
 80092cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80092d0:	2202      	movs	r2, #2
 80092d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	fa93 f2a3 	rbit	r2, r3
 80092de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80092e2:	601a      	str	r2, [r3, #0]
 80092e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80092e8:	2202      	movs	r2, #2
 80092ea:	601a      	str	r2, [r3, #0]
 80092ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	fa93 f2a3 	rbit	r2, r3
 80092f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80092fa:	601a      	str	r2, [r3, #0]
 80092fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009300:	2202      	movs	r2, #2
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	fa93 f2a3 	rbit	r2, r3
 800930e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8009312:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009314:	4b6e      	ldr	r3, [pc, #440]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009316:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009318:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800931c:	2102      	movs	r1, #2
 800931e:	6019      	str	r1, [r3, #0]
 8009320:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	fa93 f1a3 	rbit	r1, r3
 800932a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800932e:	6019      	str	r1, [r3, #0]
  return result;
 8009330:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	fab3 f383 	clz	r3, r3
 800933a:	b2db      	uxtb	r3, r3
 800933c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009340:	b2db      	uxtb	r3, r3
 8009342:	f003 031f 	and.w	r3, r3, #31
 8009346:	2101      	movs	r1, #1
 8009348:	fa01 f303 	lsl.w	r3, r1, r3
 800934c:	4013      	ands	r3, r2
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1b2      	bne.n	80092b8 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009352:	1d3b      	adds	r3, r7, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 0304 	and.w	r3, r3, #4
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 8157 	beq.w	8009610 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009362:	2300      	movs	r3, #0
 8009364:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009368:	4b59      	ldr	r3, [pc, #356]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d112      	bne.n	800939a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009374:	4b56      	ldr	r3, [pc, #344]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	4a55      	ldr	r2, [pc, #340]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 800937a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800937e:	61d3      	str	r3, [r2, #28]
 8009380:	4b53      	ldr	r3, [pc, #332]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009382:	69db      	ldr	r3, [r3, #28]
 8009384:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009388:	f107 030c 	add.w	r3, r7, #12
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	f107 030c 	add.w	r3, r7, #12
 8009392:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8009394:	2301      	movs	r3, #1
 8009396:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800939a:	4b4f      	ldr	r3, [pc, #316]	; (80094d8 <HAL_RCC_OscConfig+0x924>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d11a      	bne.n	80093dc <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093a6:	4b4c      	ldr	r3, [pc, #304]	; (80094d8 <HAL_RCC_OscConfig+0x924>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a4b      	ldr	r2, [pc, #300]	; (80094d8 <HAL_RCC_OscConfig+0x924>)
 80093ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093b2:	f7fc ff11 	bl	80061d8 <HAL_GetTick>
 80093b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093ba:	e009      	b.n	80093d0 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093bc:	f7fc ff0c 	bl	80061d8 <HAL_GetTick>
 80093c0:	4602      	mov	r2, r0
 80093c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80093c6:	1ad3      	subs	r3, r2, r3
 80093c8:	2b64      	cmp	r3, #100	; 0x64
 80093ca:	d901      	bls.n	80093d0 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e2ff      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093d0:	4b41      	ldr	r3, [pc, #260]	; (80094d8 <HAL_RCC_OscConfig+0x924>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0ef      	beq.n	80093bc <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093dc:	1d3b      	adds	r3, r7, #4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d106      	bne.n	80093f4 <HAL_RCC_OscConfig+0x840>
 80093e6:	4b3a      	ldr	r3, [pc, #232]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	4a39      	ldr	r2, [pc, #228]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 80093ec:	f043 0301 	orr.w	r3, r3, #1
 80093f0:	6213      	str	r3, [r2, #32]
 80093f2:	e02f      	b.n	8009454 <HAL_RCC_OscConfig+0x8a0>
 80093f4:	1d3b      	adds	r3, r7, #4
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10c      	bne.n	8009418 <HAL_RCC_OscConfig+0x864>
 80093fe:	4b34      	ldr	r3, [pc, #208]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009400:	6a1b      	ldr	r3, [r3, #32]
 8009402:	4a33      	ldr	r2, [pc, #204]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009404:	f023 0301 	bic.w	r3, r3, #1
 8009408:	6213      	str	r3, [r2, #32]
 800940a:	4b31      	ldr	r3, [pc, #196]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	4a30      	ldr	r2, [pc, #192]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009410:	f023 0304 	bic.w	r3, r3, #4
 8009414:	6213      	str	r3, [r2, #32]
 8009416:	e01d      	b.n	8009454 <HAL_RCC_OscConfig+0x8a0>
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	2b05      	cmp	r3, #5
 8009420:	d10c      	bne.n	800943c <HAL_RCC_OscConfig+0x888>
 8009422:	4b2b      	ldr	r3, [pc, #172]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	4a2a      	ldr	r2, [pc, #168]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009428:	f043 0304 	orr.w	r3, r3, #4
 800942c:	6213      	str	r3, [r2, #32]
 800942e:	4b28      	ldr	r3, [pc, #160]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	4a27      	ldr	r2, [pc, #156]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009434:	f043 0301 	orr.w	r3, r3, #1
 8009438:	6213      	str	r3, [r2, #32]
 800943a:	e00b      	b.n	8009454 <HAL_RCC_OscConfig+0x8a0>
 800943c:	4b24      	ldr	r3, [pc, #144]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	4a23      	ldr	r2, [pc, #140]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 8009442:	f023 0301 	bic.w	r3, r3, #1
 8009446:	6213      	str	r3, [r2, #32]
 8009448:	4b21      	ldr	r3, [pc, #132]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	4a20      	ldr	r2, [pc, #128]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 800944e:	f023 0304 	bic.w	r3, r3, #4
 8009452:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009454:	1d3b      	adds	r3, r7, #4
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d06a      	beq.n	8009534 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800945e:	f7fc febb 	bl	80061d8 <HAL_GetTick>
 8009462:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009466:	e00b      	b.n	8009480 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009468:	f7fc feb6 	bl	80061d8 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009472:	1ad3      	subs	r3, r2, r3
 8009474:	f241 3288 	movw	r2, #5000	; 0x1388
 8009478:	4293      	cmp	r3, r2
 800947a:	d901      	bls.n	8009480 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e2a7      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
 8009480:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8009484:	2202      	movs	r2, #2
 8009486:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009488:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	fa93 f2a3 	rbit	r2, r3
 8009492:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800949c:	2202      	movs	r2, #2
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	fa93 f2a3 	rbit	r2, r3
 80094aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80094ae:	601a      	str	r2, [r3, #0]
  return result;
 80094b0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80094b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094b6:	fab3 f383 	clz	r3, r3
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	095b      	lsrs	r3, r3, #5
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	f043 0302 	orr.w	r3, r3, #2
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d108      	bne.n	80094dc <HAL_RCC_OscConfig+0x928>
 80094ca:	4b01      	ldr	r3, [pc, #4]	; (80094d0 <HAL_RCC_OscConfig+0x91c>)
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	e013      	b.n	80094f8 <HAL_RCC_OscConfig+0x944>
 80094d0:	40021000 	.word	0x40021000
 80094d4:	10908120 	.word	0x10908120
 80094d8:	40007000 	.word	0x40007000
 80094dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80094e0:	2202      	movs	r2, #2
 80094e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	fa93 f2a3 	rbit	r2, r3
 80094ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	4bc0      	ldr	r3, [pc, #768]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80094fc:	2102      	movs	r1, #2
 80094fe:	6011      	str	r1, [r2, #0]
 8009500:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8009504:	6812      	ldr	r2, [r2, #0]
 8009506:	fa92 f1a2 	rbit	r1, r2
 800950a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800950e:	6011      	str	r1, [r2, #0]
  return result;
 8009510:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8009514:	6812      	ldr	r2, [r2, #0]
 8009516:	fab2 f282 	clz	r2, r2
 800951a:	b2d2      	uxtb	r2, r2
 800951c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009520:	b2d2      	uxtb	r2, r2
 8009522:	f002 021f 	and.w	r2, r2, #31
 8009526:	2101      	movs	r1, #1
 8009528:	fa01 f202 	lsl.w	r2, r1, r2
 800952c:	4013      	ands	r3, r2
 800952e:	2b00      	cmp	r3, #0
 8009530:	d09a      	beq.n	8009468 <HAL_RCC_OscConfig+0x8b4>
 8009532:	e063      	b.n	80095fc <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009534:	f7fc fe50 	bl	80061d8 <HAL_GetTick>
 8009538:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800953c:	e00b      	b.n	8009556 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800953e:	f7fc fe4b 	bl	80061d8 <HAL_GetTick>
 8009542:	4602      	mov	r2, r0
 8009544:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009548:	1ad3      	subs	r3, r2, r3
 800954a:	f241 3288 	movw	r2, #5000	; 0x1388
 800954e:	4293      	cmp	r3, r2
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e23c      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
 8009556:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800955a:	2202      	movs	r2, #2
 800955c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800955e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	fa93 f2a3 	rbit	r2, r3
 8009568:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800956c:	601a      	str	r2, [r3, #0]
 800956e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009572:	2202      	movs	r2, #2
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	fa93 f2a3 	rbit	r2, r3
 8009580:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8009584:	601a      	str	r2, [r3, #0]
  return result;
 8009586:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800958a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800958c:	fab3 f383 	clz	r3, r3
 8009590:	b2db      	uxtb	r3, r3
 8009592:	095b      	lsrs	r3, r3, #5
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f043 0302 	orr.w	r3, r3, #2
 800959a:	b2db      	uxtb	r3, r3
 800959c:	2b02      	cmp	r3, #2
 800959e:	d102      	bne.n	80095a6 <HAL_RCC_OscConfig+0x9f2>
 80095a0:	4b95      	ldr	r3, [pc, #596]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 80095a2:	6a1b      	ldr	r3, [r3, #32]
 80095a4:	e00d      	b.n	80095c2 <HAL_RCC_OscConfig+0xa0e>
 80095a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80095aa:	2202      	movs	r2, #2
 80095ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	fa93 f2a3 	rbit	r2, r3
 80095b8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	4b8e      	ldr	r3, [pc, #568]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80095c6:	2102      	movs	r1, #2
 80095c8:	6011      	str	r1, [r2, #0]
 80095ca:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80095ce:	6812      	ldr	r2, [r2, #0]
 80095d0:	fa92 f1a2 	rbit	r1, r2
 80095d4:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80095d8:	6011      	str	r1, [r2, #0]
  return result;
 80095da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80095de:	6812      	ldr	r2, [r2, #0]
 80095e0:	fab2 f282 	clz	r2, r2
 80095e4:	b2d2      	uxtb	r2, r2
 80095e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095ea:	b2d2      	uxtb	r2, r2
 80095ec:	f002 021f 	and.w	r2, r2, #31
 80095f0:	2101      	movs	r1, #1
 80095f2:	fa01 f202 	lsl.w	r2, r1, r2
 80095f6:	4013      	ands	r3, r2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d1a0      	bne.n	800953e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80095fc:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8009600:	2b01      	cmp	r3, #1
 8009602:	d105      	bne.n	8009610 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009604:	4b7c      	ldr	r3, [pc, #496]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	4a7b      	ldr	r2, [pc, #492]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 800960a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800960e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009610:	1d3b      	adds	r3, r7, #4
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 81d9 	beq.w	80099ce <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800961c:	4b76      	ldr	r3, [pc, #472]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	f003 030c 	and.w	r3, r3, #12
 8009624:	2b08      	cmp	r3, #8
 8009626:	f000 81a6 	beq.w	8009976 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800962a:	1d3b      	adds	r3, r7, #4
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	2b02      	cmp	r3, #2
 8009632:	f040 811e 	bne.w	8009872 <HAL_RCC_OscConfig+0xcbe>
 8009636:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800963a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800963e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009640:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	fa93 f2a3 	rbit	r2, r3
 800964a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800964e:	601a      	str	r2, [r3, #0]
  return result;
 8009650:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8009654:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009656:	fab3 f383 	clz	r3, r3
 800965a:	b2db      	uxtb	r3, r3
 800965c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009660:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	461a      	mov	r2, r3
 8009668:	2300      	movs	r3, #0
 800966a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800966c:	f7fc fdb4 	bl	80061d8 <HAL_GetTick>
 8009670:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009674:	e009      	b.n	800968a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009676:	f7fc fdaf 	bl	80061d8 <HAL_GetTick>
 800967a:	4602      	mov	r2, r0
 800967c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d901      	bls.n	800968a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e1a2      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
 800968a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800968e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009692:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009694:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	fa93 f2a3 	rbit	r2, r3
 800969e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80096a2:	601a      	str	r2, [r3, #0]
  return result;
 80096a4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80096a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80096aa:	fab3 f383 	clz	r3, r3
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	095b      	lsrs	r3, r3, #5
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f043 0301 	orr.w	r3, r3, #1
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d102      	bne.n	80096c4 <HAL_RCC_OscConfig+0xb10>
 80096be:	4b4e      	ldr	r3, [pc, #312]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	e01b      	b.n	80096fc <HAL_RCC_OscConfig+0xb48>
 80096c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80096c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80096cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096ce:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	fa93 f2a3 	rbit	r2, r3
 80096d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80096dc:	601a      	str	r2, [r3, #0]
 80096de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80096e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80096e6:	601a      	str	r2, [r3, #0]
 80096e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	fa93 f2a3 	rbit	r2, r3
 80096f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	4b3f      	ldr	r3, [pc, #252]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8009700:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009704:	6011      	str	r1, [r2, #0]
 8009706:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800970a:	6812      	ldr	r2, [r2, #0]
 800970c:	fa92 f1a2 	rbit	r1, r2
 8009710:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009714:	6011      	str	r1, [r2, #0]
  return result;
 8009716:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800971a:	6812      	ldr	r2, [r2, #0]
 800971c:	fab2 f282 	clz	r2, r2
 8009720:	b2d2      	uxtb	r2, r2
 8009722:	f042 0220 	orr.w	r2, r2, #32
 8009726:	b2d2      	uxtb	r2, r2
 8009728:	f002 021f 	and.w	r2, r2, #31
 800972c:	2101      	movs	r1, #1
 800972e:	fa01 f202 	lsl.w	r2, r1, r2
 8009732:	4013      	ands	r3, r2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d19e      	bne.n	8009676 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009738:	4b2f      	ldr	r3, [pc, #188]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 800973a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973c:	f023 020f 	bic.w	r2, r3, #15
 8009740:	1d3b      	adds	r3, r7, #4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	492c      	ldr	r1, [pc, #176]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 8009748:	4313      	orrs	r3, r2
 800974a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800974c:	4b2a      	ldr	r3, [pc, #168]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8009754:	1d3b      	adds	r3, r7, #4
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6a19      	ldr	r1, [r3, #32]
 800975a:	1d3b      	adds	r3, r7, #4
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	430b      	orrs	r3, r1
 8009762:	4925      	ldr	r1, [pc, #148]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 8009764:	4313      	orrs	r3, r2
 8009766:	604b      	str	r3, [r1, #4]
 8009768:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800976c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009770:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009772:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	fa93 f2a3 	rbit	r2, r3
 800977c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009780:	601a      	str	r2, [r3, #0]
  return result;
 8009782:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8009786:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009788:	fab3 f383 	clz	r3, r3
 800978c:	b2db      	uxtb	r3, r3
 800978e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8009792:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	461a      	mov	r2, r3
 800979a:	2301      	movs	r3, #1
 800979c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800979e:	f7fc fd1b 	bl	80061d8 <HAL_GetTick>
 80097a2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80097a6:	e009      	b.n	80097bc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097a8:	f7fc fd16 	bl	80061d8 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d901      	bls.n	80097bc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	e109      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
 80097bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80097c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80097c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	fa93 f2a3 	rbit	r2, r3
 80097d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80097d4:	601a      	str	r2, [r3, #0]
  return result;
 80097d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80097da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80097dc:	fab3 f383 	clz	r3, r3
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	095b      	lsrs	r3, r3, #5
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f043 0301 	orr.w	r3, r3, #1
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d105      	bne.n	80097fc <HAL_RCC_OscConfig+0xc48>
 80097f0:	4b01      	ldr	r3, [pc, #4]	; (80097f8 <HAL_RCC_OscConfig+0xc44>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	e01e      	b.n	8009834 <HAL_RCC_OscConfig+0xc80>
 80097f6:	bf00      	nop
 80097f8:	40021000 	.word	0x40021000
 80097fc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009800:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009804:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009806:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	fa93 f2a3 	rbit	r2, r3
 8009810:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009814:	601a      	str	r2, [r3, #0]
 8009816:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800981a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	fa93 f2a3 	rbit	r2, r3
 800982a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	4b6a      	ldr	r3, [pc, #424]	; (80099dc <HAL_RCC_OscConfig+0xe28>)
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009838:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800983c:	6011      	str	r1, [r2, #0]
 800983e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8009842:	6812      	ldr	r2, [r2, #0]
 8009844:	fa92 f1a2 	rbit	r1, r2
 8009848:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800984c:	6011      	str	r1, [r2, #0]
  return result;
 800984e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009852:	6812      	ldr	r2, [r2, #0]
 8009854:	fab2 f282 	clz	r2, r2
 8009858:	b2d2      	uxtb	r2, r2
 800985a:	f042 0220 	orr.w	r2, r2, #32
 800985e:	b2d2      	uxtb	r2, r2
 8009860:	f002 021f 	and.w	r2, r2, #31
 8009864:	2101      	movs	r1, #1
 8009866:	fa01 f202 	lsl.w	r2, r1, r2
 800986a:	4013      	ands	r3, r2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d09b      	beq.n	80097a8 <HAL_RCC_OscConfig+0xbf4>
 8009870:	e0ad      	b.n	80099ce <HAL_RCC_OscConfig+0xe1a>
 8009872:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009876:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800987a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800987c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	fa93 f2a3 	rbit	r2, r3
 8009886:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800988a:	601a      	str	r2, [r3, #0]
  return result;
 800988c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009890:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009892:	fab3 f383 	clz	r3, r3
 8009896:	b2db      	uxtb	r3, r3
 8009898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800989c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	461a      	mov	r2, r3
 80098a4:	2300      	movs	r3, #0
 80098a6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098a8:	f7fc fc96 	bl	80061d8 <HAL_GetTick>
 80098ac:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80098b0:	e009      	b.n	80098c6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098b2:	f7fc fc91 	bl	80061d8 <HAL_GetTick>
 80098b6:	4602      	mov	r2, r0
 80098b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d901      	bls.n	80098c6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80098c2:	2303      	movs	r3, #3
 80098c4:	e084      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
 80098c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80098ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	fa93 f2a3 	rbit	r2, r3
 80098da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098de:	601a      	str	r2, [r3, #0]
  return result;
 80098e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80098e6:	fab3 f383 	clz	r3, r3
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	095b      	lsrs	r3, r3, #5
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	f043 0301 	orr.w	r3, r3, #1
 80098f4:	b2db      	uxtb	r3, r3
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d102      	bne.n	8009900 <HAL_RCC_OscConfig+0xd4c>
 80098fa:	4b38      	ldr	r3, [pc, #224]	; (80099dc <HAL_RCC_OscConfig+0xe28>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	e01b      	b.n	8009938 <HAL_RCC_OscConfig+0xd84>
 8009900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800990a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	fa93 f2a3 	rbit	r2, r3
 8009914:	f107 0320 	add.w	r3, r7, #32
 8009918:	601a      	str	r2, [r3, #0]
 800991a:	f107 031c 	add.w	r3, r7, #28
 800991e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	f107 031c 	add.w	r3, r7, #28
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	fa93 f2a3 	rbit	r2, r3
 800992e:	f107 0318 	add.w	r3, r7, #24
 8009932:	601a      	str	r2, [r3, #0]
 8009934:	4b29      	ldr	r3, [pc, #164]	; (80099dc <HAL_RCC_OscConfig+0xe28>)
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	f107 0214 	add.w	r2, r7, #20
 800993c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8009940:	6011      	str	r1, [r2, #0]
 8009942:	f107 0214 	add.w	r2, r7, #20
 8009946:	6812      	ldr	r2, [r2, #0]
 8009948:	fa92 f1a2 	rbit	r1, r2
 800994c:	f107 0210 	add.w	r2, r7, #16
 8009950:	6011      	str	r1, [r2, #0]
  return result;
 8009952:	f107 0210 	add.w	r2, r7, #16
 8009956:	6812      	ldr	r2, [r2, #0]
 8009958:	fab2 f282 	clz	r2, r2
 800995c:	b2d2      	uxtb	r2, r2
 800995e:	f042 0220 	orr.w	r2, r2, #32
 8009962:	b2d2      	uxtb	r2, r2
 8009964:	f002 021f 	and.w	r2, r2, #31
 8009968:	2101      	movs	r1, #1
 800996a:	fa01 f202 	lsl.w	r2, r1, r2
 800996e:	4013      	ands	r3, r2
 8009970:	2b00      	cmp	r3, #0
 8009972:	d19e      	bne.n	80098b2 <HAL_RCC_OscConfig+0xcfe>
 8009974:	e02b      	b.n	80099ce <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009976:	1d3b      	adds	r3, r7, #4
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	2b01      	cmp	r3, #1
 800997e:	d101      	bne.n	8009984 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	e025      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009984:	4b15      	ldr	r3, [pc, #84]	; (80099dc <HAL_RCC_OscConfig+0xe28>)
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800998c:	4b13      	ldr	r3, [pc, #76]	; (80099dc <HAL_RCC_OscConfig+0xe28>)
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8009994:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009998:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800999c:	1d3b      	adds	r3, r7, #4
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	69db      	ldr	r3, [r3, #28]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d111      	bne.n	80099ca <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80099a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80099aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80099ae:	1d3b      	adds	r3, r7, #4
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d108      	bne.n	80099ca <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80099b8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80099bc:	f003 020f 	and.w	r2, r3, #15
 80099c0:	1d3b      	adds	r3, r7, #4
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d001      	beq.n	80099ce <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e000      	b.n	80099d0 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80099ce:	2300      	movs	r3, #0
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	40021000 	.word	0x40021000

080099e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b09e      	sub	sp, #120	; 0x78
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d101      	bne.n	80099f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e162      	b.n	8009cbe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099f8:	4b90      	ldr	r3, [pc, #576]	; (8009c3c <HAL_RCC_ClockConfig+0x25c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0307 	and.w	r3, r3, #7
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d910      	bls.n	8009a28 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009a06:	4b8d      	ldr	r3, [pc, #564]	; (8009c3c <HAL_RCC_ClockConfig+0x25c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f023 0207 	bic.w	r2, r3, #7
 8009a0e:	498b      	ldr	r1, [pc, #556]	; (8009c3c <HAL_RCC_ClockConfig+0x25c>)
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009a16:	4b89      	ldr	r3, [pc, #548]	; (8009c3c <HAL_RCC_ClockConfig+0x25c>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f003 0307 	and.w	r3, r3, #7
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d001      	beq.n	8009a28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e14a      	b.n	8009cbe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 0302 	and.w	r3, r3, #2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d008      	beq.n	8009a46 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a34:	4b82      	ldr	r3, [pc, #520]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	497f      	ldr	r1, [pc, #508]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 80dc 	beq.w	8009c0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d13c      	bne.n	8009ad6 <HAL_RCC_ClockConfig+0xf6>
 8009a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a60:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a64:	fa93 f3a3 	rbit	r3, r3
 8009a68:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a6c:	fab3 f383 	clz	r3, r3
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	095b      	lsrs	r3, r3, #5
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	f043 0301 	orr.w	r3, r3, #1
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d102      	bne.n	8009a86 <HAL_RCC_ClockConfig+0xa6>
 8009a80:	4b6f      	ldr	r3, [pc, #444]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	e00f      	b.n	8009aa6 <HAL_RCC_ClockConfig+0xc6>
 8009a86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a8e:	fa93 f3a3 	rbit	r3, r3
 8009a92:	667b      	str	r3, [r7, #100]	; 0x64
 8009a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009a98:	663b      	str	r3, [r7, #96]	; 0x60
 8009a9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a9c:	fa93 f3a3 	rbit	r3, r3
 8009aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aa2:	4b67      	ldr	r3, [pc, #412]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009aaa:	65ba      	str	r2, [r7, #88]	; 0x58
 8009aac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009aae:	fa92 f2a2 	rbit	r2, r2
 8009ab2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8009ab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009ab6:	fab2 f282 	clz	r2, r2
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	f042 0220 	orr.w	r2, r2, #32
 8009ac0:	b2d2      	uxtb	r2, r2
 8009ac2:	f002 021f 	and.w	r2, r2, #31
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8009acc:	4013      	ands	r3, r2
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d17b      	bne.n	8009bca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e0f3      	b.n	8009cbe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	2b02      	cmp	r3, #2
 8009adc:	d13c      	bne.n	8009b58 <HAL_RCC_ClockConfig+0x178>
 8009ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009ae2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ae6:	fa93 f3a3 	rbit	r3, r3
 8009aea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009aee:	fab3 f383 	clz	r3, r3
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	095b      	lsrs	r3, r3, #5
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f043 0301 	orr.w	r3, r3, #1
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	d102      	bne.n	8009b08 <HAL_RCC_ClockConfig+0x128>
 8009b02:	4b4f      	ldr	r3, [pc, #316]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	e00f      	b.n	8009b28 <HAL_RCC_ClockConfig+0x148>
 8009b08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b0c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b10:	fa93 f3a3 	rbit	r3, r3
 8009b14:	647b      	str	r3, [r7, #68]	; 0x44
 8009b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8009b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b1e:	fa93 f3a3 	rbit	r3, r3
 8009b22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b24:	4b46      	ldr	r3, [pc, #280]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b2c:	63ba      	str	r2, [r7, #56]	; 0x38
 8009b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b30:	fa92 f2a2 	rbit	r2, r2
 8009b34:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8009b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b38:	fab2 f282 	clz	r2, r2
 8009b3c:	b2d2      	uxtb	r2, r2
 8009b3e:	f042 0220 	orr.w	r2, r2, #32
 8009b42:	b2d2      	uxtb	r2, r2
 8009b44:	f002 021f 	and.w	r2, r2, #31
 8009b48:	2101      	movs	r1, #1
 8009b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8009b4e:	4013      	ands	r3, r2
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d13a      	bne.n	8009bca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e0b2      	b.n	8009cbe <HAL_RCC_ClockConfig+0x2de>
 8009b58:	2302      	movs	r3, #2
 8009b5a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5e:	fa93 f3a3 	rbit	r3, r3
 8009b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b66:	fab3 f383 	clz	r3, r3
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	095b      	lsrs	r3, r3, #5
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	f043 0301 	orr.w	r3, r3, #1
 8009b74:	b2db      	uxtb	r3, r3
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d102      	bne.n	8009b80 <HAL_RCC_ClockConfig+0x1a0>
 8009b7a:	4b31      	ldr	r3, [pc, #196]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	e00d      	b.n	8009b9c <HAL_RCC_ClockConfig+0x1bc>
 8009b80:	2302      	movs	r3, #2
 8009b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	fa93 f3a3 	rbit	r3, r3
 8009b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	623b      	str	r3, [r7, #32]
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	fa93 f3a3 	rbit	r3, r3
 8009b96:	61fb      	str	r3, [r7, #28]
 8009b98:	4b29      	ldr	r3, [pc, #164]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	61ba      	str	r2, [r7, #24]
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	fa92 f2a2 	rbit	r2, r2
 8009ba6:	617a      	str	r2, [r7, #20]
  return result;
 8009ba8:	697a      	ldr	r2, [r7, #20]
 8009baa:	fab2 f282 	clz	r2, r2
 8009bae:	b2d2      	uxtb	r2, r2
 8009bb0:	f042 0220 	orr.w	r2, r2, #32
 8009bb4:	b2d2      	uxtb	r2, r2
 8009bb6:	f002 021f 	and.w	r2, r2, #31
 8009bba:	2101      	movs	r1, #1
 8009bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d101      	bne.n	8009bca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e079      	b.n	8009cbe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009bca:	4b1d      	ldr	r3, [pc, #116]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f023 0203 	bic.w	r2, r3, #3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	491a      	ldr	r1, [pc, #104]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009bdc:	f7fc fafc 	bl	80061d8 <HAL_GetTick>
 8009be0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009be2:	e00a      	b.n	8009bfa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009be4:	f7fc faf8 	bl	80061d8 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d901      	bls.n	8009bfa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	e061      	b.n	8009cbe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009bfa:	4b11      	ldr	r3, [pc, #68]	; (8009c40 <HAL_RCC_ClockConfig+0x260>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f003 020c 	and.w	r2, r3, #12
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	009b      	lsls	r3, r3, #2
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d1eb      	bne.n	8009be4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009c0c:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <HAL_RCC_ClockConfig+0x25c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0307 	and.w	r3, r3, #7
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d214      	bcs.n	8009c44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009c1a:	4b08      	ldr	r3, [pc, #32]	; (8009c3c <HAL_RCC_ClockConfig+0x25c>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f023 0207 	bic.w	r2, r3, #7
 8009c22:	4906      	ldr	r1, [pc, #24]	; (8009c3c <HAL_RCC_ClockConfig+0x25c>)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	4313      	orrs	r3, r2
 8009c28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009c2a:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <HAL_RCC_ClockConfig+0x25c>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0307 	and.w	r3, r3, #7
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d005      	beq.n	8009c44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	e040      	b.n	8009cbe <HAL_RCC_ClockConfig+0x2de>
 8009c3c:	40022000 	.word	0x40022000
 8009c40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0304 	and.w	r3, r3, #4
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d008      	beq.n	8009c62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009c50:	4b1d      	ldr	r3, [pc, #116]	; (8009cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	491a      	ldr	r1, [pc, #104]	; (8009cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0308 	and.w	r3, r3, #8
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d009      	beq.n	8009c82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c6e:	4b16      	ldr	r3, [pc, #88]	; (8009cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8009c70:	685b      	ldr	r3, [r3, #4]
 8009c72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	00db      	lsls	r3, r3, #3
 8009c7c:	4912      	ldr	r1, [pc, #72]	; (8009cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8009c82:	f000 f829 	bl	8009cd8 <HAL_RCC_GetSysClockFreq>
 8009c86:	4601      	mov	r1, r0
 8009c88:	4b0f      	ldr	r3, [pc, #60]	; (8009cc8 <HAL_RCC_ClockConfig+0x2e8>)
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c90:	22f0      	movs	r2, #240	; 0xf0
 8009c92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	fa92 f2a2 	rbit	r2, r2
 8009c9a:	60fa      	str	r2, [r7, #12]
  return result;
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	fab2 f282 	clz	r2, r2
 8009ca2:	b2d2      	uxtb	r2, r2
 8009ca4:	40d3      	lsrs	r3, r2
 8009ca6:	4a09      	ldr	r2, [pc, #36]	; (8009ccc <HAL_RCC_ClockConfig+0x2ec>)
 8009ca8:	5cd3      	ldrb	r3, [r2, r3]
 8009caa:	fa21 f303 	lsr.w	r3, r1, r3
 8009cae:	4a08      	ldr	r2, [pc, #32]	; (8009cd0 <HAL_RCC_ClockConfig+0x2f0>)
 8009cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8009cb2:	4b08      	ldr	r3, [pc, #32]	; (8009cd4 <HAL_RCC_ClockConfig+0x2f4>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fc fa4a 	bl	8006150 <HAL_InitTick>
  
  return HAL_OK;
 8009cbc:	2300      	movs	r3, #0
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3778      	adds	r7, #120	; 0x78
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	40021000 	.word	0x40021000
 8009ccc:	0800e69c 	.word	0x0800e69c
 8009cd0:	20000020 	.word	0x20000020
 8009cd4:	20000024 	.word	0x20000024

08009cd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b08b      	sub	sp, #44	; 0x2c
 8009cdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	61fb      	str	r3, [r7, #28]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	61bb      	str	r3, [r7, #24]
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cea:	2300      	movs	r3, #0
 8009cec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8009cf2:	4b2a      	ldr	r3, [pc, #168]	; (8009d9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	f003 030c 	and.w	r3, r3, #12
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	d002      	beq.n	8009d08 <HAL_RCC_GetSysClockFreq+0x30>
 8009d02:	2b08      	cmp	r3, #8
 8009d04:	d003      	beq.n	8009d0e <HAL_RCC_GetSysClockFreq+0x36>
 8009d06:	e03f      	b.n	8009d88 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009d08:	4b25      	ldr	r3, [pc, #148]	; (8009da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009d0a:	623b      	str	r3, [r7, #32]
      break;
 8009d0c:	e03f      	b.n	8009d8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8009d14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8009d18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	fa92 f2a2 	rbit	r2, r2
 8009d20:	607a      	str	r2, [r7, #4]
  return result;
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	fab2 f282 	clz	r2, r2
 8009d28:	b2d2      	uxtb	r2, r2
 8009d2a:	40d3      	lsrs	r3, r2
 8009d2c:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009d2e:	5cd3      	ldrb	r3, [r2, r3]
 8009d30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8009d32:	4b1a      	ldr	r3, [pc, #104]	; (8009d9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8009d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d36:	f003 030f 	and.w	r3, r3, #15
 8009d3a:	220f      	movs	r2, #15
 8009d3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d3e:	693a      	ldr	r2, [r7, #16]
 8009d40:	fa92 f2a2 	rbit	r2, r2
 8009d44:	60fa      	str	r2, [r7, #12]
  return result;
 8009d46:	68fa      	ldr	r2, [r7, #12]
 8009d48:	fab2 f282 	clz	r2, r2
 8009d4c:	b2d2      	uxtb	r2, r2
 8009d4e:	40d3      	lsrs	r3, r2
 8009d50:	4a15      	ldr	r2, [pc, #84]	; (8009da8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009d52:	5cd3      	ldrb	r3, [r2, r3]
 8009d54:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d008      	beq.n	8009d72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009d60:	4a0f      	ldr	r2, [pc, #60]	; (8009da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
 8009d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d70:	e007      	b.n	8009d82 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8009d72:	4a0b      	ldr	r2, [pc, #44]	; (8009da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	fbb2 f2f3 	udiv	r2, r2, r3
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	fb02 f303 	mul.w	r3, r2, r3
 8009d80:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	623b      	str	r3, [r7, #32]
      break;
 8009d86:	e002      	b.n	8009d8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009d88:	4b05      	ldr	r3, [pc, #20]	; (8009da0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8009d8a:	623b      	str	r3, [r7, #32]
      break;
 8009d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	372c      	adds	r7, #44	; 0x2c
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr
 8009d9c:	40021000 	.word	0x40021000
 8009da0:	007a1200 	.word	0x007a1200
 8009da4:	0800e6b4 	.word	0x0800e6b4
 8009da8:	0800e6c4 	.word	0x0800e6c4

08009dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009dac:	b480      	push	{r7}
 8009dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009db0:	4b03      	ldr	r3, [pc, #12]	; (8009dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009db2:	681b      	ldr	r3, [r3, #0]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20000020 	.word	0x20000020

08009dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8009dca:	f7ff ffef 	bl	8009dac <HAL_RCC_GetHCLKFreq>
 8009dce:	4601      	mov	r1, r0
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009ddc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	fa92 f2a2 	rbit	r2, r2
 8009de4:	603a      	str	r2, [r7, #0]
  return result;
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	fab2 f282 	clz	r2, r2
 8009dec:	b2d2      	uxtb	r2, r2
 8009dee:	40d3      	lsrs	r3, r2
 8009df0:	4a04      	ldr	r2, [pc, #16]	; (8009e04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8009df2:	5cd3      	ldrb	r3, [r2, r3]
 8009df4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	40021000 	.word	0x40021000
 8009e04:	0800e6ac 	.word	0x0800e6ac

08009e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	b082      	sub	sp, #8
 8009e0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8009e0e:	f7ff ffcd 	bl	8009dac <HAL_RCC_GetHCLKFreq>
 8009e12:	4601      	mov	r1, r0
 8009e14:	4b0b      	ldr	r3, [pc, #44]	; (8009e44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8009e1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009e20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	fa92 f2a2 	rbit	r2, r2
 8009e28:	603a      	str	r2, [r7, #0]
  return result;
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	fab2 f282 	clz	r2, r2
 8009e30:	b2d2      	uxtb	r2, r2
 8009e32:	40d3      	lsrs	r3, r2
 8009e34:	4a04      	ldr	r2, [pc, #16]	; (8009e48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8009e36:	5cd3      	ldrb	r3, [r2, r3]
 8009e38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	40021000 	.word	0x40021000
 8009e48:	0800e6ac 	.word	0x0800e6ac

08009e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b092      	sub	sp, #72	; 0x48
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e54:	2300      	movs	r3, #0
 8009e56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f000 80d4 	beq.w	800a018 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e70:	4b4e      	ldr	r3, [pc, #312]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009e72:	69db      	ldr	r3, [r3, #28]
 8009e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d10e      	bne.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e7c:	4b4b      	ldr	r3, [pc, #300]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009e7e:	69db      	ldr	r3, [r3, #28]
 8009e80:	4a4a      	ldr	r2, [pc, #296]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e86:	61d3      	str	r3, [r2, #28]
 8009e88:	4b48      	ldr	r3, [pc, #288]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e90:	60bb      	str	r3, [r7, #8]
 8009e92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e9a:	4b45      	ldr	r3, [pc, #276]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d118      	bne.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ea6:	4b42      	ldr	r3, [pc, #264]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a41      	ldr	r2, [pc, #260]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009eb2:	f7fc f991 	bl	80061d8 <HAL_GetTick>
 8009eb6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009eb8:	e008      	b.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009eba:	f7fc f98d 	bl	80061d8 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b64      	cmp	r3, #100	; 0x64
 8009ec6:	d901      	bls.n	8009ecc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e1d6      	b.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ecc:	4b38      	ldr	r3, [pc, #224]	; (8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d0f0      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ed8:	4b34      	ldr	r3, [pc, #208]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009eda:	6a1b      	ldr	r3, [r3, #32]
 8009edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 8084 	beq.w	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ef2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d07c      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009ef8:	4b2c      	ldr	r3, [pc, #176]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009efa:	6a1b      	ldr	r3, [r3, #32]
 8009efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0a:	fa93 f3a3 	rbit	r3, r3
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009f12:	fab3 f383 	clz	r3, r3
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	461a      	mov	r2, r3
 8009f1a:	4b26      	ldr	r3, [pc, #152]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	461a      	mov	r2, r3
 8009f22:	2301      	movs	r3, #1
 8009f24:	6013      	str	r3, [r2, #0]
 8009f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009f2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	fa93 f3a3 	rbit	r3, r3
 8009f32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009f36:	fab3 f383 	clz	r3, r3
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	4b1d      	ldr	r3, [pc, #116]	; (8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8009f40:	4413      	add	r3, r2
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	461a      	mov	r2, r3
 8009f46:	2300      	movs	r3, #0
 8009f48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8009f4a:	4a18      	ldr	r2, [pc, #96]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8009f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d04b      	beq.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f5a:	f7fc f93d 	bl	80061d8 <HAL_GetTick>
 8009f5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f60:	e00a      	b.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f62:	f7fc f939 	bl	80061d8 <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d901      	bls.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e180      	b.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8009f78:	2302      	movs	r3, #2
 8009f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	fa93 f3a3 	rbit	r3, r3
 8009f82:	627b      	str	r3, [r7, #36]	; 0x24
 8009f84:	2302      	movs	r3, #2
 8009f86:	623b      	str	r3, [r7, #32]
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	fa93 f3a3 	rbit	r3, r3
 8009f8e:	61fb      	str	r3, [r7, #28]
  return result;
 8009f90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f92:	fab3 f383 	clz	r3, r3
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	095b      	lsrs	r3, r3, #5
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	f043 0302 	orr.w	r3, r3, #2
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d108      	bne.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8009fa6:	4b01      	ldr	r3, [pc, #4]	; (8009fac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009fa8:	6a1b      	ldr	r3, [r3, #32]
 8009faa:	e00d      	b.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8009fac:	40021000 	.word	0x40021000
 8009fb0:	40007000 	.word	0x40007000
 8009fb4:	10908100 	.word	0x10908100
 8009fb8:	2302      	movs	r3, #2
 8009fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	fa93 f3a3 	rbit	r3, r3
 8009fc2:	617b      	str	r3, [r7, #20]
 8009fc4:	4ba0      	ldr	r3, [pc, #640]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc8:	2202      	movs	r2, #2
 8009fca:	613a      	str	r2, [r7, #16]
 8009fcc:	693a      	ldr	r2, [r7, #16]
 8009fce:	fa92 f2a2 	rbit	r2, r2
 8009fd2:	60fa      	str	r2, [r7, #12]
  return result;
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	fab2 f282 	clz	r2, r2
 8009fda:	b2d2      	uxtb	r2, r2
 8009fdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fe0:	b2d2      	uxtb	r2, r2
 8009fe2:	f002 021f 	and.w	r2, r2, #31
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8009fec:	4013      	ands	r3, r2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0b7      	beq.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8009ff2:	4b95      	ldr	r3, [pc, #596]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	4992      	ldr	r1, [pc, #584]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a000:	4313      	orrs	r3, r2
 800a002:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a004:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d105      	bne.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a00c:	4b8e      	ldr	r3, [pc, #568]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a00e:	69db      	ldr	r3, [r3, #28]
 800a010:	4a8d      	ldr	r2, [pc, #564]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a012:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a016:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0301 	and.w	r3, r3, #1
 800a020:	2b00      	cmp	r3, #0
 800a022:	d008      	beq.n	800a036 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a024:	4b88      	ldr	r3, [pc, #544]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a028:	f023 0203 	bic.w	r2, r3, #3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	4985      	ldr	r1, [pc, #532]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a032:	4313      	orrs	r3, r2
 800a034:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 0302 	and.w	r3, r3, #2
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d008      	beq.n	800a054 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a042:	4b81      	ldr	r3, [pc, #516]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a046:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	497e      	ldr	r1, [pc, #504]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a050:	4313      	orrs	r3, r2
 800a052:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d008      	beq.n	800a072 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a060:	4b79      	ldr	r3, [pc, #484]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a064:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	4976      	ldr	r1, [pc, #472]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0320 	and.w	r3, r3, #32
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d008      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a07e:	4b72      	ldr	r3, [pc, #456]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a082:	f023 0210 	bic.w	r2, r3, #16
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
 800a08a:	496f      	ldr	r1, [pc, #444]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a08c:	4313      	orrs	r3, r2
 800a08e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d008      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800a09c:	4b6a      	ldr	r3, [pc, #424]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a8:	4967      	ldr	r1, [pc, #412]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d008      	beq.n	800a0cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a0ba:	4b63      	ldr	r3, [pc, #396]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0be:	f023 0220 	bic.w	r2, r3, #32
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	4960      	ldr	r1, [pc, #384]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d008      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a0d8:	4b5b      	ldr	r3, [pc, #364]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0dc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	4958      	ldr	r1, [pc, #352]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d008      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a0f6:	4b54      	ldr	r3, [pc, #336]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	695b      	ldr	r3, [r3, #20]
 800a102:	4951      	ldr	r1, [pc, #324]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a104:	4313      	orrs	r3, r2
 800a106:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0310 	and.w	r3, r3, #16
 800a110:	2b00      	cmp	r3, #0
 800a112:	d008      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a114:	4b4c      	ldr	r3, [pc, #304]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a118:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	4949      	ldr	r1, [pc, #292]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a122:	4313      	orrs	r3, r2
 800a124:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d008      	beq.n	800a144 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a132:	4b45      	ldr	r3, [pc, #276]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a13e:	4942      	ldr	r1, [pc, #264]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a140:	4313      	orrs	r3, r2
 800a142:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d008      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a150:	4b3d      	ldr	r3, [pc, #244]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15c:	493a      	ldr	r1, [pc, #232]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d008      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800a16e:	4b36      	ldr	r3, [pc, #216]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a172:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	4933      	ldr	r1, [pc, #204]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a17c:	4313      	orrs	r3, r2
 800a17e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d008      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a18c:	4b2e      	ldr	r3, [pc, #184]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a190:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a198:	492b      	ldr	r1, [pc, #172]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d008      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800a1aa:	4b27      	ldr	r3, [pc, #156]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b6:	4924      	ldr	r1, [pc, #144]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d008      	beq.n	800a1da <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800a1c8:	4b1f      	ldr	r3, [pc, #124]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a1ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1cc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1d4:	491c      	ldr	r1, [pc, #112]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d008      	beq.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800a1e6:	4b18      	ldr	r3, [pc, #96]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a1e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1f2:	4915      	ldr	r1, [pc, #84]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a200:	2b00      	cmp	r3, #0
 800a202:	d008      	beq.n	800a216 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a204:	4b10      	ldr	r3, [pc, #64]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a208:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a210:	490d      	ldr	r1, [pc, #52]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a212:	4313      	orrs	r3, r2
 800a214:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d008      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800a222:	4b09      	ldr	r3, [pc, #36]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a22e:	4906      	ldr	r1, [pc, #24]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a230:	4313      	orrs	r3, r2
 800a232:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00c      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800a240:	4b01      	ldr	r3, [pc, #4]	; (800a248 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800a242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a244:	e002      	b.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0x400>
 800a246:	bf00      	nop
 800a248:	40021000 	.word	0x40021000
 800a24c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a254:	490b      	ldr	r1, [pc, #44]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a256:	4313      	orrs	r3, r2
 800a258:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d008      	beq.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800a266:	4b07      	ldr	r3, [pc, #28]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a272:	4904      	ldr	r1, [pc, #16]	; (800a284 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800a274:	4313      	orrs	r3, r2
 800a276:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3748      	adds	r7, #72	; 0x48
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	40021000 	.word	0x40021000

0800a288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d101      	bne.n	800a29a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a296:	2301      	movs	r3, #1
 800a298:	e049      	b.n	800a32e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d106      	bne.n	800a2b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7fb fda0 	bl	8005df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2202      	movs	r2, #2
 800a2b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	4610      	mov	r0, r2
 800a2c8:	f000 fce2 	bl	800ac90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2201      	movs	r2, #1
 800a308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2201      	movs	r2, #1
 800a310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2201      	movs	r2, #1
 800a328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3708      	adds	r7, #8
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d001      	beq.n	800a350 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e047      	b.n	800a3e0 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2202      	movs	r2, #2
 800a354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a23      	ldr	r2, [pc, #140]	; (800a3ec <HAL_TIM_Base_Start+0xb4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d01d      	beq.n	800a39e <HAL_TIM_Base_Start+0x66>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a36a:	d018      	beq.n	800a39e <HAL_TIM_Base_Start+0x66>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a1f      	ldr	r2, [pc, #124]	; (800a3f0 <HAL_TIM_Base_Start+0xb8>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d013      	beq.n	800a39e <HAL_TIM_Base_Start+0x66>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a1e      	ldr	r2, [pc, #120]	; (800a3f4 <HAL_TIM_Base_Start+0xbc>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d00e      	beq.n	800a39e <HAL_TIM_Base_Start+0x66>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a1c      	ldr	r2, [pc, #112]	; (800a3f8 <HAL_TIM_Base_Start+0xc0>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d009      	beq.n	800a39e <HAL_TIM_Base_Start+0x66>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a1b      	ldr	r2, [pc, #108]	; (800a3fc <HAL_TIM_Base_Start+0xc4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d004      	beq.n	800a39e <HAL_TIM_Base_Start+0x66>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a19      	ldr	r2, [pc, #100]	; (800a400 <HAL_TIM_Base_Start+0xc8>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d115      	bne.n	800a3ca <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	4b17      	ldr	r3, [pc, #92]	; (800a404 <HAL_TIM_Base_Start+0xcc>)
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b06      	cmp	r3, #6
 800a3ae:	d015      	beq.n	800a3dc <HAL_TIM_Base_Start+0xa4>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3b6:	d011      	beq.n	800a3dc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f042 0201 	orr.w	r2, r2, #1
 800a3c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3c8:	e008      	b.n	800a3dc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f042 0201 	orr.w	r2, r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]
 800a3da:	e000      	b.n	800a3de <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3714      	adds	r7, #20
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	40012c00 	.word	0x40012c00
 800a3f0:	40000400 	.word	0x40000400
 800a3f4:	40000800 	.word	0x40000800
 800a3f8:	40013400 	.word	0x40013400
 800a3fc:	40014000 	.word	0x40014000
 800a400:	40015000 	.word	0x40015000
 800a404:	00010007 	.word	0x00010007

0800a408 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d101      	bne.n	800a41a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a416:	2301      	movs	r3, #1
 800a418:	e049      	b.n	800a4ae <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a420:	b2db      	uxtb	r3, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	d106      	bne.n	800a434 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f841 	bl	800a4b6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2202      	movs	r2, #2
 800a438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3304      	adds	r3, #4
 800a444:	4619      	mov	r1, r3
 800a446:	4610      	mov	r0, r2
 800a448:	f000 fc22 	bl	800ac90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2201      	movs	r2, #1
 800a498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3708      	adds	r7, #8
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a4be:	bf00      	nop
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
	...

0800a4cc <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d109      	bne.n	800a4f4 <HAL_TIM_OC_Start_IT+0x28>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	bf14      	ite	ne
 800a4ec:	2301      	movne	r3, #1
 800a4ee:	2300      	moveq	r3, #0
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	e03c      	b.n	800a56e <HAL_TIM_OC_Start_IT+0xa2>
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	2b04      	cmp	r3, #4
 800a4f8:	d109      	bne.n	800a50e <HAL_TIM_OC_Start_IT+0x42>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b01      	cmp	r3, #1
 800a504:	bf14      	ite	ne
 800a506:	2301      	movne	r3, #1
 800a508:	2300      	moveq	r3, #0
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	e02f      	b.n	800a56e <HAL_TIM_OC_Start_IT+0xa2>
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2b08      	cmp	r3, #8
 800a512:	d109      	bne.n	800a528 <HAL_TIM_OC_Start_IT+0x5c>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	bf14      	ite	ne
 800a520:	2301      	movne	r3, #1
 800a522:	2300      	moveq	r3, #0
 800a524:	b2db      	uxtb	r3, r3
 800a526:	e022      	b.n	800a56e <HAL_TIM_OC_Start_IT+0xa2>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b0c      	cmp	r3, #12
 800a52c:	d109      	bne.n	800a542 <HAL_TIM_OC_Start_IT+0x76>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b01      	cmp	r3, #1
 800a538:	bf14      	ite	ne
 800a53a:	2301      	movne	r3, #1
 800a53c:	2300      	moveq	r3, #0
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	e015      	b.n	800a56e <HAL_TIM_OC_Start_IT+0xa2>
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b10      	cmp	r3, #16
 800a546:	d109      	bne.n	800a55c <HAL_TIM_OC_Start_IT+0x90>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b01      	cmp	r3, #1
 800a552:	bf14      	ite	ne
 800a554:	2301      	movne	r3, #1
 800a556:	2300      	moveq	r3, #0
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	e008      	b.n	800a56e <HAL_TIM_OC_Start_IT+0xa2>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a562:	b2db      	uxtb	r3, r3
 800a564:	2b01      	cmp	r3, #1
 800a566:	bf14      	ite	ne
 800a568:	2301      	movne	r3, #1
 800a56a:	2300      	moveq	r3, #0
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d001      	beq.n	800a576 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e0ec      	b.n	800a750 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d104      	bne.n	800a586 <HAL_TIM_OC_Start_IT+0xba>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2202      	movs	r2, #2
 800a580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a584:	e023      	b.n	800a5ce <HAL_TIM_OC_Start_IT+0x102>
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b04      	cmp	r3, #4
 800a58a:	d104      	bne.n	800a596 <HAL_TIM_OC_Start_IT+0xca>
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2202      	movs	r2, #2
 800a590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a594:	e01b      	b.n	800a5ce <HAL_TIM_OC_Start_IT+0x102>
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b08      	cmp	r3, #8
 800a59a:	d104      	bne.n	800a5a6 <HAL_TIM_OC_Start_IT+0xda>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2202      	movs	r2, #2
 800a5a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5a4:	e013      	b.n	800a5ce <HAL_TIM_OC_Start_IT+0x102>
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	2b0c      	cmp	r3, #12
 800a5aa:	d104      	bne.n	800a5b6 <HAL_TIM_OC_Start_IT+0xea>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2202      	movs	r2, #2
 800a5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a5b4:	e00b      	b.n	800a5ce <HAL_TIM_OC_Start_IT+0x102>
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	2b10      	cmp	r3, #16
 800a5ba:	d104      	bne.n	800a5c6 <HAL_TIM_OC_Start_IT+0xfa>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a5c4:	e003      	b.n	800a5ce <HAL_TIM_OC_Start_IT+0x102>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	2b0c      	cmp	r3, #12
 800a5d2:	d841      	bhi.n	800a658 <HAL_TIM_OC_Start_IT+0x18c>
 800a5d4:	a201      	add	r2, pc, #4	; (adr r2, 800a5dc <HAL_TIM_OC_Start_IT+0x110>)
 800a5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5da:	bf00      	nop
 800a5dc:	0800a611 	.word	0x0800a611
 800a5e0:	0800a659 	.word	0x0800a659
 800a5e4:	0800a659 	.word	0x0800a659
 800a5e8:	0800a659 	.word	0x0800a659
 800a5ec:	0800a623 	.word	0x0800a623
 800a5f0:	0800a659 	.word	0x0800a659
 800a5f4:	0800a659 	.word	0x0800a659
 800a5f8:	0800a659 	.word	0x0800a659
 800a5fc:	0800a635 	.word	0x0800a635
 800a600:	0800a659 	.word	0x0800a659
 800a604:	0800a659 	.word	0x0800a659
 800a608:	0800a659 	.word	0x0800a659
 800a60c:	0800a647 	.word	0x0800a647
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68da      	ldr	r2, [r3, #12]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f042 0202 	orr.w	r2, r2, #2
 800a61e:	60da      	str	r2, [r3, #12]
      break;
 800a620:	e01d      	b.n	800a65e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	68da      	ldr	r2, [r3, #12]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f042 0204 	orr.w	r2, r2, #4
 800a630:	60da      	str	r2, [r3, #12]
      break;
 800a632:	e014      	b.n	800a65e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68da      	ldr	r2, [r3, #12]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f042 0208 	orr.w	r2, r2, #8
 800a642:	60da      	str	r2, [r3, #12]
      break;
 800a644:	e00b      	b.n	800a65e <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68da      	ldr	r2, [r3, #12]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f042 0210 	orr.w	r2, r2, #16
 800a654:	60da      	str	r2, [r3, #12]
      break;
 800a656:	e002      	b.n	800a65e <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800a658:	2301      	movs	r3, #1
 800a65a:	73fb      	strb	r3, [r7, #15]
      break;
 800a65c:	bf00      	nop
  }

  if (status == HAL_OK)
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d174      	bne.n	800a74e <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2201      	movs	r2, #1
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 ff4d 	bl	800b50c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a38      	ldr	r2, [pc, #224]	; (800a758 <HAL_TIM_OC_Start_IT+0x28c>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d018      	beq.n	800a6ae <HAL_TIM_OC_Start_IT+0x1e2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a36      	ldr	r2, [pc, #216]	; (800a75c <HAL_TIM_OC_Start_IT+0x290>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d013      	beq.n	800a6ae <HAL_TIM_OC_Start_IT+0x1e2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a35      	ldr	r2, [pc, #212]	; (800a760 <HAL_TIM_OC_Start_IT+0x294>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d00e      	beq.n	800a6ae <HAL_TIM_OC_Start_IT+0x1e2>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a33      	ldr	r2, [pc, #204]	; (800a764 <HAL_TIM_OC_Start_IT+0x298>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d009      	beq.n	800a6ae <HAL_TIM_OC_Start_IT+0x1e2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a32      	ldr	r2, [pc, #200]	; (800a768 <HAL_TIM_OC_Start_IT+0x29c>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d004      	beq.n	800a6ae <HAL_TIM_OC_Start_IT+0x1e2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a30      	ldr	r2, [pc, #192]	; (800a76c <HAL_TIM_OC_Start_IT+0x2a0>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d101      	bne.n	800a6b2 <HAL_TIM_OC_Start_IT+0x1e6>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e000      	b.n	800a6b4 <HAL_TIM_OC_Start_IT+0x1e8>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d007      	beq.n	800a6c8 <HAL_TIM_OC_Start_IT+0x1fc>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a22      	ldr	r2, [pc, #136]	; (800a758 <HAL_TIM_OC_Start_IT+0x28c>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d01d      	beq.n	800a70e <HAL_TIM_OC_Start_IT+0x242>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6da:	d018      	beq.n	800a70e <HAL_TIM_OC_Start_IT+0x242>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a23      	ldr	r2, [pc, #140]	; (800a770 <HAL_TIM_OC_Start_IT+0x2a4>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d013      	beq.n	800a70e <HAL_TIM_OC_Start_IT+0x242>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a22      	ldr	r2, [pc, #136]	; (800a774 <HAL_TIM_OC_Start_IT+0x2a8>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d00e      	beq.n	800a70e <HAL_TIM_OC_Start_IT+0x242>
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a19      	ldr	r2, [pc, #100]	; (800a75c <HAL_TIM_OC_Start_IT+0x290>)
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d009      	beq.n	800a70e <HAL_TIM_OC_Start_IT+0x242>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a18      	ldr	r2, [pc, #96]	; (800a760 <HAL_TIM_OC_Start_IT+0x294>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d004      	beq.n	800a70e <HAL_TIM_OC_Start_IT+0x242>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a18      	ldr	r2, [pc, #96]	; (800a76c <HAL_TIM_OC_Start_IT+0x2a0>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d115      	bne.n	800a73a <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	4b18      	ldr	r3, [pc, #96]	; (800a778 <HAL_TIM_OC_Start_IT+0x2ac>)
 800a716:	4013      	ands	r3, r2
 800a718:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	2b06      	cmp	r3, #6
 800a71e:	d015      	beq.n	800a74c <HAL_TIM_OC_Start_IT+0x280>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a726:	d011      	beq.n	800a74c <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f042 0201 	orr.w	r2, r2, #1
 800a736:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a738:	e008      	b.n	800a74c <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f042 0201 	orr.w	r2, r2, #1
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	e000      	b.n	800a74e <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	40012c00 	.word	0x40012c00
 800a75c:	40013400 	.word	0x40013400
 800a760:	40014000 	.word	0x40014000
 800a764:	40014400 	.word	0x40014400
 800a768:	40014800 	.word	0x40014800
 800a76c:	40015000 	.word	0x40015000
 800a770:	40000400 	.word	0x40000400
 800a774:	40000800 	.word	0x40000800
 800a778:	00010007 	.word	0x00010007

0800a77c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d122      	bne.n	800a7d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	f003 0302 	and.w	r3, r3, #2
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	d11b      	bne.n	800a7d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f06f 0202 	mvn.w	r2, #2
 800a7a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	f003 0303 	and.w	r3, r3, #3
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d003      	beq.n	800a7c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fa48 	bl	800ac54 <HAL_TIM_IC_CaptureCallback>
 800a7c4:	e005      	b.n	800a7d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fa3a 	bl	800ac40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fa4b 	bl	800ac68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	d122      	bne.n	800a82c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	d11b      	bne.n	800a82c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f06f 0204 	mvn.w	r2, #4
 800a7fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2202      	movs	r2, #2
 800a802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fa1e 	bl	800ac54 <HAL_TIM_IC_CaptureCallback>
 800a818:	e005      	b.n	800a826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fa10 	bl	800ac40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fa21 	bl	800ac68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	f003 0308 	and.w	r3, r3, #8
 800a836:	2b08      	cmp	r3, #8
 800a838:	d122      	bne.n	800a880 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f003 0308 	and.w	r3, r3, #8
 800a844:	2b08      	cmp	r3, #8
 800a846:	d11b      	bne.n	800a880 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f06f 0208 	mvn.w	r2, #8
 800a850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2204      	movs	r2, #4
 800a856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	69db      	ldr	r3, [r3, #28]
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f9f4 	bl	800ac54 <HAL_TIM_IC_CaptureCallback>
 800a86c:	e005      	b.n	800a87a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f9e6 	bl	800ac40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f9f7 	bl	800ac68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	f003 0310 	and.w	r3, r3, #16
 800a88a:	2b10      	cmp	r3, #16
 800a88c:	d122      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f003 0310 	and.w	r3, r3, #16
 800a898:	2b10      	cmp	r3, #16
 800a89a:	d11b      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f06f 0210 	mvn.w	r2, #16
 800a8a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2208      	movs	r2, #8
 800a8aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f9ca 	bl	800ac54 <HAL_TIM_IC_CaptureCallback>
 800a8c0:	e005      	b.n	800a8ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f9bc 	bl	800ac40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f9cd 	bl	800ac68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d10e      	bne.n	800a900 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	f003 0301 	and.w	r3, r3, #1
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d107      	bne.n	800a900 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f06f 0201 	mvn.w	r2, #1
 800a8f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8fa:	6878      	ldr	r0, [r7, #4]
 800a8fc:	f000 f996 	bl	800ac2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a90a:	2b80      	cmp	r3, #128	; 0x80
 800a90c:	d10e      	bne.n	800a92c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a918:	2b80      	cmp	r3, #128	; 0x80
 800a91a:	d107      	bne.n	800a92c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 ff32 	bl	800b790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93a:	d10e      	bne.n	800a95a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a946:	2b80      	cmp	r3, #128	; 0x80
 800a948:	d107      	bne.n	800a95a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 ff25 	bl	800b7a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a964:	2b40      	cmp	r3, #64	; 0x40
 800a966:	d10e      	bne.n	800a986 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	68db      	ldr	r3, [r3, #12]
 800a96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a972:	2b40      	cmp	r3, #64	; 0x40
 800a974:	d107      	bne.n	800a986 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a97e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f000 f97b 	bl	800ac7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	691b      	ldr	r3, [r3, #16]
 800a98c:	f003 0320 	and.w	r3, r3, #32
 800a990:	2b20      	cmp	r3, #32
 800a992:	d10e      	bne.n	800a9b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	f003 0320 	and.w	r3, r3, #32
 800a99e:	2b20      	cmp	r3, #32
 800a9a0:	d107      	bne.n	800a9b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f06f 0220 	mvn.w	r2, #32
 800a9aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fee5 	bl	800b77c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b086      	sub	sp, #24
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	60f8      	str	r0, [r7, #12]
 800a9c4:	60b9      	str	r1, [r7, #8]
 800a9c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d101      	bne.n	800a9da <HAL_TIM_OC_ConfigChannel+0x1e>
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	e066      	b.n	800aaa8 <HAL_TIM_OC_ConfigChannel+0xec>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2201      	movs	r2, #1
 800a9de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b14      	cmp	r3, #20
 800a9e6:	d857      	bhi.n	800aa98 <HAL_TIM_OC_ConfigChannel+0xdc>
 800a9e8:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a9ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ee:	bf00      	nop
 800a9f0:	0800aa45 	.word	0x0800aa45
 800a9f4:	0800aa99 	.word	0x0800aa99
 800a9f8:	0800aa99 	.word	0x0800aa99
 800a9fc:	0800aa99 	.word	0x0800aa99
 800aa00:	0800aa53 	.word	0x0800aa53
 800aa04:	0800aa99 	.word	0x0800aa99
 800aa08:	0800aa99 	.word	0x0800aa99
 800aa0c:	0800aa99 	.word	0x0800aa99
 800aa10:	0800aa61 	.word	0x0800aa61
 800aa14:	0800aa99 	.word	0x0800aa99
 800aa18:	0800aa99 	.word	0x0800aa99
 800aa1c:	0800aa99 	.word	0x0800aa99
 800aa20:	0800aa6f 	.word	0x0800aa6f
 800aa24:	0800aa99 	.word	0x0800aa99
 800aa28:	0800aa99 	.word	0x0800aa99
 800aa2c:	0800aa99 	.word	0x0800aa99
 800aa30:	0800aa7d 	.word	0x0800aa7d
 800aa34:	0800aa99 	.word	0x0800aa99
 800aa38:	0800aa99 	.word	0x0800aa99
 800aa3c:	0800aa99 	.word	0x0800aa99
 800aa40:	0800aa8b 	.word	0x0800aa8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	68b9      	ldr	r1, [r7, #8]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 f9be 	bl	800adcc <TIM_OC1_SetConfig>
      break;
 800aa50:	e025      	b.n	800aa9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	68b9      	ldr	r1, [r7, #8]
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f000 fa51 	bl	800af00 <TIM_OC2_SetConfig>
      break;
 800aa5e:	e01e      	b.n	800aa9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	68b9      	ldr	r1, [r7, #8]
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fade 	bl	800b028 <TIM_OC3_SetConfig>
      break;
 800aa6c:	e017      	b.n	800aa9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	4618      	mov	r0, r3
 800aa76:	f000 fb69 	bl	800b14c <TIM_OC4_SetConfig>
      break;
 800aa7a:	e010      	b.n	800aa9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	68b9      	ldr	r1, [r7, #8]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f000 fbd2 	bl	800b22c <TIM_OC5_SetConfig>
      break;
 800aa88:	e009      	b.n	800aa9e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	68b9      	ldr	r1, [r7, #8]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 fc35 	bl	800b300 <TIM_OC6_SetConfig>
      break;
 800aa96:	e002      	b.n	800aa9e <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aaa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3718      	adds	r7, #24
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	d101      	bne.n	800aacc <HAL_TIM_ConfigClockSource+0x1c>
 800aac8:	2302      	movs	r3, #2
 800aaca:	e0ab      	b.n	800ac24 <HAL_TIM_ConfigClockSource+0x174>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2202      	movs	r2, #2
 800aad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aaea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aaee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aaf6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	68ba      	ldr	r2, [r7, #8]
 800aafe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b40      	cmp	r3, #64	; 0x40
 800ab06:	d067      	beq.n	800abd8 <HAL_TIM_ConfigClockSource+0x128>
 800ab08:	2b40      	cmp	r3, #64	; 0x40
 800ab0a:	d80b      	bhi.n	800ab24 <HAL_TIM_ConfigClockSource+0x74>
 800ab0c:	2b10      	cmp	r3, #16
 800ab0e:	d073      	beq.n	800abf8 <HAL_TIM_ConfigClockSource+0x148>
 800ab10:	2b10      	cmp	r3, #16
 800ab12:	d802      	bhi.n	800ab1a <HAL_TIM_ConfigClockSource+0x6a>
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d06f      	beq.n	800abf8 <HAL_TIM_ConfigClockSource+0x148>
 800ab18:	e077      	b.n	800ac0a <HAL_TIM_ConfigClockSource+0x15a>
 800ab1a:	2b20      	cmp	r3, #32
 800ab1c:	d06c      	beq.n	800abf8 <HAL_TIM_ConfigClockSource+0x148>
 800ab1e:	2b30      	cmp	r3, #48	; 0x30
 800ab20:	d06a      	beq.n	800abf8 <HAL_TIM_ConfigClockSource+0x148>
 800ab22:	e072      	b.n	800ac0a <HAL_TIM_ConfigClockSource+0x15a>
 800ab24:	2b70      	cmp	r3, #112	; 0x70
 800ab26:	d00d      	beq.n	800ab44 <HAL_TIM_ConfigClockSource+0x94>
 800ab28:	2b70      	cmp	r3, #112	; 0x70
 800ab2a:	d804      	bhi.n	800ab36 <HAL_TIM_ConfigClockSource+0x86>
 800ab2c:	2b50      	cmp	r3, #80	; 0x50
 800ab2e:	d033      	beq.n	800ab98 <HAL_TIM_ConfigClockSource+0xe8>
 800ab30:	2b60      	cmp	r3, #96	; 0x60
 800ab32:	d041      	beq.n	800abb8 <HAL_TIM_ConfigClockSource+0x108>
 800ab34:	e069      	b.n	800ac0a <HAL_TIM_ConfigClockSource+0x15a>
 800ab36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab3a:	d069      	beq.n	800ac10 <HAL_TIM_ConfigClockSource+0x160>
 800ab3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab40:	d017      	beq.n	800ab72 <HAL_TIM_ConfigClockSource+0xc2>
 800ab42:	e062      	b.n	800ac0a <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6818      	ldr	r0, [r3, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	6899      	ldr	r1, [r3, #8]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	f000 fcba 	bl	800b4cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab66:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	609a      	str	r2, [r3, #8]
      break;
 800ab70:	e04f      	b.n	800ac12 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	6899      	ldr	r1, [r3, #8]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	f000 fca3 	bl	800b4cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	689a      	ldr	r2, [r3, #8]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab94:	609a      	str	r2, [r3, #8]
      break;
 800ab96:	e03c      	b.n	800ac12 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6818      	ldr	r0, [r3, #0]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	6859      	ldr	r1, [r3, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	461a      	mov	r2, r3
 800aba6:	f000 fc17 	bl	800b3d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2150      	movs	r1, #80	; 0x50
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 fc70 	bl	800b496 <TIM_ITRx_SetConfig>
      break;
 800abb6:	e02c      	b.n	800ac12 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6818      	ldr	r0, [r3, #0]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	6859      	ldr	r1, [r3, #4]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	461a      	mov	r2, r3
 800abc6:	f000 fc36 	bl	800b436 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2160      	movs	r1, #96	; 0x60
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 fc60 	bl	800b496 <TIM_ITRx_SetConfig>
      break;
 800abd6:	e01c      	b.n	800ac12 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6818      	ldr	r0, [r3, #0]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	6859      	ldr	r1, [r3, #4]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	68db      	ldr	r3, [r3, #12]
 800abe4:	461a      	mov	r2, r3
 800abe6:	f000 fbf7 	bl	800b3d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	2140      	movs	r1, #64	; 0x40
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fc50 	bl	800b496 <TIM_ITRx_SetConfig>
      break;
 800abf6:	e00c      	b.n	800ac12 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4619      	mov	r1, r3
 800ac02:	4610      	mov	r0, r2
 800ac04:	f000 fc47 	bl	800b496 <TIM_ITRx_SetConfig>
      break;
 800ac08:	e003      	b.n	800ac12 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac0e:	e000      	b.n	800ac12 <HAL_TIM_ConfigClockSource+0x162>
      break;
 800ac10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ac34:	bf00      	nop
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac70:	bf00      	nop
 800ac72:	370c      	adds	r7, #12
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr

0800ac7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac84:	bf00      	nop
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4a42      	ldr	r2, [pc, #264]	; (800adac <TIM_Base_SetConfig+0x11c>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d013      	beq.n	800acd0 <TIM_Base_SetConfig+0x40>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acae:	d00f      	beq.n	800acd0 <TIM_Base_SetConfig+0x40>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a3f      	ldr	r2, [pc, #252]	; (800adb0 <TIM_Base_SetConfig+0x120>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d00b      	beq.n	800acd0 <TIM_Base_SetConfig+0x40>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a3e      	ldr	r2, [pc, #248]	; (800adb4 <TIM_Base_SetConfig+0x124>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d007      	beq.n	800acd0 <TIM_Base_SetConfig+0x40>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a3d      	ldr	r2, [pc, #244]	; (800adb8 <TIM_Base_SetConfig+0x128>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d003      	beq.n	800acd0 <TIM_Base_SetConfig+0x40>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a3c      	ldr	r2, [pc, #240]	; (800adbc <TIM_Base_SetConfig+0x12c>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d108      	bne.n	800ace2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	4313      	orrs	r3, r2
 800ace0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	4a31      	ldr	r2, [pc, #196]	; (800adac <TIM_Base_SetConfig+0x11c>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d01f      	beq.n	800ad2a <TIM_Base_SetConfig+0x9a>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf0:	d01b      	beq.n	800ad2a <TIM_Base_SetConfig+0x9a>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a2e      	ldr	r2, [pc, #184]	; (800adb0 <TIM_Base_SetConfig+0x120>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d017      	beq.n	800ad2a <TIM_Base_SetConfig+0x9a>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	4a2d      	ldr	r2, [pc, #180]	; (800adb4 <TIM_Base_SetConfig+0x124>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d013      	beq.n	800ad2a <TIM_Base_SetConfig+0x9a>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	4a2c      	ldr	r2, [pc, #176]	; (800adb8 <TIM_Base_SetConfig+0x128>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d00f      	beq.n	800ad2a <TIM_Base_SetConfig+0x9a>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a2c      	ldr	r2, [pc, #176]	; (800adc0 <TIM_Base_SetConfig+0x130>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d00b      	beq.n	800ad2a <TIM_Base_SetConfig+0x9a>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a2b      	ldr	r2, [pc, #172]	; (800adc4 <TIM_Base_SetConfig+0x134>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d007      	beq.n	800ad2a <TIM_Base_SetConfig+0x9a>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a2a      	ldr	r2, [pc, #168]	; (800adc8 <TIM_Base_SetConfig+0x138>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d003      	beq.n	800ad2a <TIM_Base_SetConfig+0x9a>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a25      	ldr	r2, [pc, #148]	; (800adbc <TIM_Base_SetConfig+0x12c>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d108      	bne.n	800ad3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	689a      	ldr	r2, [r3, #8]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a12      	ldr	r2, [pc, #72]	; (800adac <TIM_Base_SetConfig+0x11c>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d013      	beq.n	800ad90 <TIM_Base_SetConfig+0x100>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a13      	ldr	r2, [pc, #76]	; (800adb8 <TIM_Base_SetConfig+0x128>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d00f      	beq.n	800ad90 <TIM_Base_SetConfig+0x100>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a13      	ldr	r2, [pc, #76]	; (800adc0 <TIM_Base_SetConfig+0x130>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d00b      	beq.n	800ad90 <TIM_Base_SetConfig+0x100>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a12      	ldr	r2, [pc, #72]	; (800adc4 <TIM_Base_SetConfig+0x134>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d007      	beq.n	800ad90 <TIM_Base_SetConfig+0x100>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a11      	ldr	r2, [pc, #68]	; (800adc8 <TIM_Base_SetConfig+0x138>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d003      	beq.n	800ad90 <TIM_Base_SetConfig+0x100>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a0c      	ldr	r2, [pc, #48]	; (800adbc <TIM_Base_SetConfig+0x12c>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d103      	bne.n	800ad98 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	691a      	ldr	r2, [r3, #16]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	615a      	str	r2, [r3, #20]
}
 800ad9e:	bf00      	nop
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	40012c00 	.word	0x40012c00
 800adb0:	40000400 	.word	0x40000400
 800adb4:	40000800 	.word	0x40000800
 800adb8:	40013400 	.word	0x40013400
 800adbc:	40015000 	.word	0x40015000
 800adc0:	40014000 	.word	0x40014000
 800adc4:	40014400 	.word	0x40014400
 800adc8:	40014800 	.word	0x40014800

0800adcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adcc:	b480      	push	{r7}
 800adce:	b087      	sub	sp, #28
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
 800add4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a1b      	ldr	r3, [r3, #32]
 800adda:	f023 0201 	bic.w	r2, r3, #1
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a1b      	ldr	r3, [r3, #32]
 800ade6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f023 0303 	bic.w	r3, r3, #3
 800ae06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f023 0302 	bic.w	r3, r3, #2
 800ae18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	689b      	ldr	r3, [r3, #8]
 800ae1e:	697a      	ldr	r2, [r7, #20]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a30      	ldr	r2, [pc, #192]	; (800aee8 <TIM_OC1_SetConfig+0x11c>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d013      	beq.n	800ae54 <TIM_OC1_SetConfig+0x88>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	4a2f      	ldr	r2, [pc, #188]	; (800aeec <TIM_OC1_SetConfig+0x120>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d00f      	beq.n	800ae54 <TIM_OC1_SetConfig+0x88>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a2e      	ldr	r2, [pc, #184]	; (800aef0 <TIM_OC1_SetConfig+0x124>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d00b      	beq.n	800ae54 <TIM_OC1_SetConfig+0x88>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a2d      	ldr	r2, [pc, #180]	; (800aef4 <TIM_OC1_SetConfig+0x128>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d007      	beq.n	800ae54 <TIM_OC1_SetConfig+0x88>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a2c      	ldr	r2, [pc, #176]	; (800aef8 <TIM_OC1_SetConfig+0x12c>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d003      	beq.n	800ae54 <TIM_OC1_SetConfig+0x88>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a2b      	ldr	r2, [pc, #172]	; (800aefc <TIM_OC1_SetConfig+0x130>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d10c      	bne.n	800ae6e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f023 0308 	bic.w	r3, r3, #8
 800ae5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	697a      	ldr	r2, [r7, #20]
 800ae62:	4313      	orrs	r3, r2
 800ae64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	f023 0304 	bic.w	r3, r3, #4
 800ae6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a1d      	ldr	r2, [pc, #116]	; (800aee8 <TIM_OC1_SetConfig+0x11c>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d013      	beq.n	800ae9e <TIM_OC1_SetConfig+0xd2>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	4a1c      	ldr	r2, [pc, #112]	; (800aeec <TIM_OC1_SetConfig+0x120>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d00f      	beq.n	800ae9e <TIM_OC1_SetConfig+0xd2>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a1b      	ldr	r2, [pc, #108]	; (800aef0 <TIM_OC1_SetConfig+0x124>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d00b      	beq.n	800ae9e <TIM_OC1_SetConfig+0xd2>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a1a      	ldr	r2, [pc, #104]	; (800aef4 <TIM_OC1_SetConfig+0x128>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d007      	beq.n	800ae9e <TIM_OC1_SetConfig+0xd2>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a19      	ldr	r2, [pc, #100]	; (800aef8 <TIM_OC1_SetConfig+0x12c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d003      	beq.n	800ae9e <TIM_OC1_SetConfig+0xd2>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a18      	ldr	r2, [pc, #96]	; (800aefc <TIM_OC1_SetConfig+0x130>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d111      	bne.n	800aec2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aeac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	695b      	ldr	r3, [r3, #20]
 800aeb2:	693a      	ldr	r2, [r7, #16]
 800aeb4:	4313      	orrs	r3, r2
 800aeb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	621a      	str	r2, [r3, #32]
}
 800aedc:	bf00      	nop
 800aede:	371c      	adds	r7, #28
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	40012c00 	.word	0x40012c00
 800aeec:	40013400 	.word	0x40013400
 800aef0:	40014000 	.word	0x40014000
 800aef4:	40014400 	.word	0x40014400
 800aef8:	40014800 	.word	0x40014800
 800aefc:	40015000 	.word	0x40015000

0800af00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af00:	b480      	push	{r7}
 800af02:	b087      	sub	sp, #28
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a1b      	ldr	r3, [r3, #32]
 800af0e:	f023 0210 	bic.w	r2, r3, #16
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a1b      	ldr	r3, [r3, #32]
 800af1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800af2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	021b      	lsls	r3, r3, #8
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	4313      	orrs	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	f023 0320 	bic.w	r3, r3, #32
 800af4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	4313      	orrs	r3, r2
 800af5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	4a2c      	ldr	r2, [pc, #176]	; (800b010 <TIM_OC2_SetConfig+0x110>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d007      	beq.n	800af74 <TIM_OC2_SetConfig+0x74>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a2b      	ldr	r2, [pc, #172]	; (800b014 <TIM_OC2_SetConfig+0x114>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d003      	beq.n	800af74 <TIM_OC2_SetConfig+0x74>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a2a      	ldr	r2, [pc, #168]	; (800b018 <TIM_OC2_SetConfig+0x118>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d10d      	bne.n	800af90 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	011b      	lsls	r3, r3, #4
 800af82:	697a      	ldr	r2, [r7, #20]
 800af84:	4313      	orrs	r3, r2
 800af86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a1f      	ldr	r2, [pc, #124]	; (800b010 <TIM_OC2_SetConfig+0x110>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d013      	beq.n	800afc0 <TIM_OC2_SetConfig+0xc0>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	4a1e      	ldr	r2, [pc, #120]	; (800b014 <TIM_OC2_SetConfig+0x114>)
 800af9c:	4293      	cmp	r3, r2
 800af9e:	d00f      	beq.n	800afc0 <TIM_OC2_SetConfig+0xc0>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	4a1e      	ldr	r2, [pc, #120]	; (800b01c <TIM_OC2_SetConfig+0x11c>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d00b      	beq.n	800afc0 <TIM_OC2_SetConfig+0xc0>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a1d      	ldr	r2, [pc, #116]	; (800b020 <TIM_OC2_SetConfig+0x120>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d007      	beq.n	800afc0 <TIM_OC2_SetConfig+0xc0>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a1c      	ldr	r2, [pc, #112]	; (800b024 <TIM_OC2_SetConfig+0x124>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d003      	beq.n	800afc0 <TIM_OC2_SetConfig+0xc0>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a17      	ldr	r2, [pc, #92]	; (800b018 <TIM_OC2_SetConfig+0x118>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d113      	bne.n	800afe8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afc6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	693a      	ldr	r2, [r7, #16]
 800afd8:	4313      	orrs	r3, r2
 800afda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	699b      	ldr	r3, [r3, #24]
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	693a      	ldr	r2, [r7, #16]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	693a      	ldr	r2, [r7, #16]
 800afec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68fa      	ldr	r2, [r7, #12]
 800aff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	697a      	ldr	r2, [r7, #20]
 800b000:	621a      	str	r2, [r3, #32]
}
 800b002:	bf00      	nop
 800b004:	371c      	adds	r7, #28
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	40012c00 	.word	0x40012c00
 800b014:	40013400 	.word	0x40013400
 800b018:	40015000 	.word	0x40015000
 800b01c:	40014000 	.word	0x40014000
 800b020:	40014400 	.word	0x40014400
 800b024:	40014800 	.word	0x40014800

0800b028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b028:	b480      	push	{r7}
 800b02a:	b087      	sub	sp, #28
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	6a1b      	ldr	r3, [r3, #32]
 800b042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	69db      	ldr	r3, [r3, #28]
 800b04e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b05a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 0303 	bic.w	r3, r3, #3
 800b062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	021b      	lsls	r3, r3, #8
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	4313      	orrs	r3, r2
 800b080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4a2b      	ldr	r2, [pc, #172]	; (800b134 <TIM_OC3_SetConfig+0x10c>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d007      	beq.n	800b09a <TIM_OC3_SetConfig+0x72>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	4a2a      	ldr	r2, [pc, #168]	; (800b138 <TIM_OC3_SetConfig+0x110>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d003      	beq.n	800b09a <TIM_OC3_SetConfig+0x72>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a29      	ldr	r2, [pc, #164]	; (800b13c <TIM_OC3_SetConfig+0x114>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d10d      	bne.n	800b0b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	021b      	lsls	r3, r3, #8
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a1e      	ldr	r2, [pc, #120]	; (800b134 <TIM_OC3_SetConfig+0x10c>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d013      	beq.n	800b0e6 <TIM_OC3_SetConfig+0xbe>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a1d      	ldr	r2, [pc, #116]	; (800b138 <TIM_OC3_SetConfig+0x110>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d00f      	beq.n	800b0e6 <TIM_OC3_SetConfig+0xbe>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a1d      	ldr	r2, [pc, #116]	; (800b140 <TIM_OC3_SetConfig+0x118>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d00b      	beq.n	800b0e6 <TIM_OC3_SetConfig+0xbe>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a1c      	ldr	r2, [pc, #112]	; (800b144 <TIM_OC3_SetConfig+0x11c>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d007      	beq.n	800b0e6 <TIM_OC3_SetConfig+0xbe>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a1b      	ldr	r2, [pc, #108]	; (800b148 <TIM_OC3_SetConfig+0x120>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d003      	beq.n	800b0e6 <TIM_OC3_SetConfig+0xbe>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a16      	ldr	r2, [pc, #88]	; (800b13c <TIM_OC3_SetConfig+0x114>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d113      	bne.n	800b10e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b0f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	695b      	ldr	r3, [r3, #20]
 800b0fa:	011b      	lsls	r3, r3, #4
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	699b      	ldr	r3, [r3, #24]
 800b106:	011b      	lsls	r3, r3, #4
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	685a      	ldr	r2, [r3, #4]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	621a      	str	r2, [r3, #32]
}
 800b128:	bf00      	nop
 800b12a:	371c      	adds	r7, #28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	40012c00 	.word	0x40012c00
 800b138:	40013400 	.word	0x40013400
 800b13c:	40015000 	.word	0x40015000
 800b140:	40014000 	.word	0x40014000
 800b144:	40014400 	.word	0x40014400
 800b148:	40014800 	.word	0x40014800

0800b14c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b087      	sub	sp, #28
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a1b      	ldr	r3, [r3, #32]
 800b15a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	69db      	ldr	r3, [r3, #28]
 800b172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b17a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b188:	683b      	ldr	r3, [r7, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	021b      	lsls	r3, r3, #8
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	4313      	orrs	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b19a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	031b      	lsls	r3, r3, #12
 800b1a2:	693a      	ldr	r2, [r7, #16]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a1a      	ldr	r2, [pc, #104]	; (800b214 <TIM_OC4_SetConfig+0xc8>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d013      	beq.n	800b1d8 <TIM_OC4_SetConfig+0x8c>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a19      	ldr	r2, [pc, #100]	; (800b218 <TIM_OC4_SetConfig+0xcc>)
 800b1b4:	4293      	cmp	r3, r2
 800b1b6:	d00f      	beq.n	800b1d8 <TIM_OC4_SetConfig+0x8c>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a18      	ldr	r2, [pc, #96]	; (800b21c <TIM_OC4_SetConfig+0xd0>)
 800b1bc:	4293      	cmp	r3, r2
 800b1be:	d00b      	beq.n	800b1d8 <TIM_OC4_SetConfig+0x8c>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a17      	ldr	r2, [pc, #92]	; (800b220 <TIM_OC4_SetConfig+0xd4>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d007      	beq.n	800b1d8 <TIM_OC4_SetConfig+0x8c>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a16      	ldr	r2, [pc, #88]	; (800b224 <TIM_OC4_SetConfig+0xd8>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d003      	beq.n	800b1d8 <TIM_OC4_SetConfig+0x8c>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a15      	ldr	r2, [pc, #84]	; (800b228 <TIM_OC4_SetConfig+0xdc>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d109      	bne.n	800b1ec <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b1de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	019b      	lsls	r3, r3, #6
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	697a      	ldr	r2, [r7, #20]
 800b1f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	621a      	str	r2, [r3, #32]
}
 800b206:	bf00      	nop
 800b208:	371c      	adds	r7, #28
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr
 800b212:	bf00      	nop
 800b214:	40012c00 	.word	0x40012c00
 800b218:	40013400 	.word	0x40013400
 800b21c:	40014000 	.word	0x40014000
 800b220:	40014400 	.word	0x40014400
 800b224:	40014800 	.word	0x40014800
 800b228:	40015000 	.word	0x40015000

0800b22c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b087      	sub	sp, #28
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b25a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b25e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	4313      	orrs	r3, r2
 800b268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b270:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	041b      	lsls	r3, r3, #16
 800b278:	693a      	ldr	r2, [r7, #16]
 800b27a:	4313      	orrs	r3, r2
 800b27c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a19      	ldr	r2, [pc, #100]	; (800b2e8 <TIM_OC5_SetConfig+0xbc>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d013      	beq.n	800b2ae <TIM_OC5_SetConfig+0x82>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a18      	ldr	r2, [pc, #96]	; (800b2ec <TIM_OC5_SetConfig+0xc0>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d00f      	beq.n	800b2ae <TIM_OC5_SetConfig+0x82>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a17      	ldr	r2, [pc, #92]	; (800b2f0 <TIM_OC5_SetConfig+0xc4>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00b      	beq.n	800b2ae <TIM_OC5_SetConfig+0x82>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a16      	ldr	r2, [pc, #88]	; (800b2f4 <TIM_OC5_SetConfig+0xc8>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d007      	beq.n	800b2ae <TIM_OC5_SetConfig+0x82>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a15      	ldr	r2, [pc, #84]	; (800b2f8 <TIM_OC5_SetConfig+0xcc>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d003      	beq.n	800b2ae <TIM_OC5_SetConfig+0x82>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a14      	ldr	r2, [pc, #80]	; (800b2fc <TIM_OC5_SetConfig+0xd0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d109      	bne.n	800b2c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	695b      	ldr	r3, [r3, #20]
 800b2ba:	021b      	lsls	r3, r3, #8
 800b2bc:	697a      	ldr	r2, [r7, #20]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	697a      	ldr	r2, [r7, #20]
 800b2c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	693a      	ldr	r2, [r7, #16]
 800b2da:	621a      	str	r2, [r3, #32]
}
 800b2dc:	bf00      	nop
 800b2de:	371c      	adds	r7, #28
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	40012c00 	.word	0x40012c00
 800b2ec:	40013400 	.word	0x40013400
 800b2f0:	40014000 	.word	0x40014000
 800b2f4:	40014400 	.word	0x40014400
 800b2f8:	40014800 	.word	0x40014800
 800b2fc:	40015000 	.word	0x40015000

0800b300 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b300:	b480      	push	{r7}
 800b302:	b087      	sub	sp, #28
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6a1b      	ldr	r3, [r3, #32]
 800b30e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b32e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	021b      	lsls	r3, r3, #8
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	689b      	ldr	r3, [r3, #8]
 800b34c:	051b      	lsls	r3, r3, #20
 800b34e:	693a      	ldr	r2, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a1a      	ldr	r2, [pc, #104]	; (800b3c0 <TIM_OC6_SetConfig+0xc0>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d013      	beq.n	800b384 <TIM_OC6_SetConfig+0x84>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a19      	ldr	r2, [pc, #100]	; (800b3c4 <TIM_OC6_SetConfig+0xc4>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d00f      	beq.n	800b384 <TIM_OC6_SetConfig+0x84>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a18      	ldr	r2, [pc, #96]	; (800b3c8 <TIM_OC6_SetConfig+0xc8>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d00b      	beq.n	800b384 <TIM_OC6_SetConfig+0x84>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a17      	ldr	r2, [pc, #92]	; (800b3cc <TIM_OC6_SetConfig+0xcc>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d007      	beq.n	800b384 <TIM_OC6_SetConfig+0x84>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a16      	ldr	r2, [pc, #88]	; (800b3d0 <TIM_OC6_SetConfig+0xd0>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d003      	beq.n	800b384 <TIM_OC6_SetConfig+0x84>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a15      	ldr	r2, [pc, #84]	; (800b3d4 <TIM_OC6_SetConfig+0xd4>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d109      	bne.n	800b398 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b38a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	695b      	ldr	r3, [r3, #20]
 800b390:	029b      	lsls	r3, r3, #10
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	4313      	orrs	r3, r2
 800b396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b3a4:	683b      	ldr	r3, [r7, #0]
 800b3a6:	685a      	ldr	r2, [r3, #4]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	621a      	str	r2, [r3, #32]
}
 800b3b2:	bf00      	nop
 800b3b4:	371c      	adds	r7, #28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop
 800b3c0:	40012c00 	.word	0x40012c00
 800b3c4:	40013400 	.word	0x40013400
 800b3c8:	40014000 	.word	0x40014000
 800b3cc:	40014400 	.word	0x40014400
 800b3d0:	40014800 	.word	0x40014800
 800b3d4:	40015000 	.word	0x40015000

0800b3d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b087      	sub	sp, #28
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	f023 0201 	bic.w	r2, r3, #1
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	011b      	lsls	r3, r3, #4
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	4313      	orrs	r3, r2
 800b40c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f023 030a 	bic.w	r3, r3, #10
 800b414:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b416:	697a      	ldr	r2, [r7, #20]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	621a      	str	r2, [r3, #32]
}
 800b42a:	bf00      	nop
 800b42c:	371c      	adds	r7, #28
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b436:	b480      	push	{r7}
 800b438:	b087      	sub	sp, #28
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	60f8      	str	r0, [r7, #12]
 800b43e:	60b9      	str	r1, [r7, #8]
 800b440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6a1b      	ldr	r3, [r3, #32]
 800b446:	f023 0210 	bic.w	r2, r3, #16
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a1b      	ldr	r3, [r3, #32]
 800b458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	031b      	lsls	r3, r3, #12
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4313      	orrs	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b46c:	693b      	ldr	r3, [r7, #16]
 800b46e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b472:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	011b      	lsls	r3, r3, #4
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	697a      	ldr	r2, [r7, #20]
 800b482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	693a      	ldr	r2, [r7, #16]
 800b488:	621a      	str	r2, [r3, #32]
}
 800b48a:	bf00      	nop
 800b48c:	371c      	adds	r7, #28
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b496:	b480      	push	{r7}
 800b498:	b085      	sub	sp, #20
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	f043 0307 	orr.w	r3, r3, #7
 800b4b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68fa      	ldr	r2, [r7, #12]
 800b4be:	609a      	str	r2, [r3, #8]
}
 800b4c0:	bf00      	nop
 800b4c2:	3714      	adds	r7, #20
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b087      	sub	sp, #28
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	60f8      	str	r0, [r7, #12]
 800b4d4:	60b9      	str	r1, [r7, #8]
 800b4d6:	607a      	str	r2, [r7, #4]
 800b4d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4e0:	697b      	ldr	r3, [r7, #20]
 800b4e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	021a      	lsls	r2, r3, #8
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	431a      	orrs	r2, r3
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	697a      	ldr	r2, [r7, #20]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	697a      	ldr	r2, [r7, #20]
 800b4fe:	609a      	str	r2, [r3, #8]
}
 800b500:	bf00      	nop
 800b502:	371c      	adds	r7, #28
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	f003 031f 	and.w	r3, r3, #31
 800b51e:	2201      	movs	r2, #1
 800b520:	fa02 f303 	lsl.w	r3, r2, r3
 800b524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6a1a      	ldr	r2, [r3, #32]
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	43db      	mvns	r3, r3
 800b52e:	401a      	ands	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	6a1a      	ldr	r2, [r3, #32]
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	f003 031f 	and.w	r3, r3, #31
 800b53e:	6879      	ldr	r1, [r7, #4]
 800b540:	fa01 f303 	lsl.w	r3, r1, r3
 800b544:	431a      	orrs	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	621a      	str	r2, [r3, #32]
}
 800b54a:	bf00      	nop
 800b54c:	371c      	adds	r7, #28
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
 800b560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d101      	bne.n	800b570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b56c:	2302      	movs	r3, #2
 800b56e:	e06d      	b.n	800b64c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2202      	movs	r2, #2
 800b57c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a30      	ldr	r2, [pc, #192]	; (800b658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d009      	beq.n	800b5ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a2f      	ldr	r2, [pc, #188]	; (800b65c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d004      	beq.n	800b5ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a2d      	ldr	r2, [pc, #180]	; (800b660 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d108      	bne.n	800b5c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b5b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a1e      	ldr	r2, [pc, #120]	; (800b658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d01d      	beq.n	800b620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ec:	d018      	beq.n	800b620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a1c      	ldr	r2, [pc, #112]	; (800b664 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d013      	beq.n	800b620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a1a      	ldr	r2, [pc, #104]	; (800b668 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d00e      	beq.n	800b620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a15      	ldr	r2, [pc, #84]	; (800b65c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d009      	beq.n	800b620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a16      	ldr	r2, [pc, #88]	; (800b66c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d004      	beq.n	800b620 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a11      	ldr	r2, [pc, #68]	; (800b660 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d10c      	bne.n	800b63a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b626:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	68ba      	ldr	r2, [r7, #8]
 800b62e:	4313      	orrs	r3, r2
 800b630:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	40012c00 	.word	0x40012c00
 800b65c:	40013400 	.word	0x40013400
 800b660:	40015000 	.word	0x40015000
 800b664:	40000400 	.word	0x40000400
 800b668:	40000800 	.word	0x40000800
 800b66c:	40014000 	.word	0x40014000

0800b670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b670:	b480      	push	{r7}
 800b672:	b085      	sub	sp, #20
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b67a:	2300      	movs	r3, #0
 800b67c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b684:	2b01      	cmp	r3, #1
 800b686:	d101      	bne.n	800b68c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b688:	2302      	movs	r3, #2
 800b68a:	e06a      	b.n	800b762 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	689b      	ldr	r3, [r3, #8]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	041b      	lsls	r3, r3, #16
 800b702:	4313      	orrs	r3, r2
 800b704:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a19      	ldr	r2, [pc, #100]	; (800b770 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d009      	beq.n	800b724 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a17      	ldr	r2, [pc, #92]	; (800b774 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d004      	beq.n	800b724 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a16      	ldr	r2, [pc, #88]	; (800b778 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d115      	bne.n	800b750 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	051b      	lsls	r3, r3, #20
 800b730:	4313      	orrs	r3, r2
 800b732:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	69db      	ldr	r3, [r3, #28]
 800b73e:	4313      	orrs	r3, r2
 800b740:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	6a1b      	ldr	r3, [r3, #32]
 800b74c:	4313      	orrs	r3, r2
 800b74e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b760:	2300      	movs	r3, #0
}
 800b762:	4618      	mov	r0, r3
 800b764:	3714      	adds	r7, #20
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	40012c00 	.word	0x40012c00
 800b774:	40013400 	.word	0x40013400
 800b778:	40015000 	.word	0x40015000

0800b77c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b083      	sub	sp, #12
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b784:	bf00      	nop
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e040      	b.n	800b84c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d106      	bne.n	800b7e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f7fa fb7a 	bl	8005ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2224      	movs	r2, #36	; 0x24
 800b7e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f022 0201 	bic.w	r2, r2, #1
 800b7f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fc0e 	bl	800c018 <UART_SetConfig>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b01      	cmp	r3, #1
 800b800:	d101      	bne.n	800b806 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b802:	2301      	movs	r3, #1
 800b804:	e022      	b.n	800b84c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d002      	beq.n	800b814 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fdd6 	bl	800c3c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	689a      	ldr	r2, [r3, #8]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b832:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	f042 0201 	orr.w	r2, r2, #1
 800b842:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fe5d 	bl	800c504 <UART_CheckIdleState>
 800b84a:	4603      	mov	r3, r0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}

0800b854 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	; 0x28
 800b858:	af02      	add	r7, sp, #8
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	603b      	str	r3, [r7, #0]
 800b860:	4613      	mov	r3, r2
 800b862:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b868:	2b20      	cmp	r3, #32
 800b86a:	f040 8082 	bne.w	800b972 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d002      	beq.n	800b87a <HAL_UART_Transmit+0x26>
 800b874:	88fb      	ldrh	r3, [r7, #6]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d101      	bne.n	800b87e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b87a:	2301      	movs	r3, #1
 800b87c:	e07a      	b.n	800b974 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b884:	2b01      	cmp	r3, #1
 800b886:	d101      	bne.n	800b88c <HAL_UART_Transmit+0x38>
 800b888:	2302      	movs	r3, #2
 800b88a:	e073      	b.n	800b974 <HAL_UART_Transmit+0x120>
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2201      	movs	r2, #1
 800b890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2200      	movs	r2, #0
 800b898:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2221      	movs	r2, #33	; 0x21
 800b8a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b8a2:	f7fa fc99 	bl	80061d8 <HAL_GetTick>
 800b8a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	88fa      	ldrh	r2, [r7, #6]
 800b8ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	88fa      	ldrh	r2, [r7, #6]
 800b8b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8c0:	d108      	bne.n	800b8d4 <HAL_UART_Transmit+0x80>
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	691b      	ldr	r3, [r3, #16]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d104      	bne.n	800b8d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	61bb      	str	r3, [r7, #24]
 800b8d2:	e003      	b.n	800b8dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2200      	movs	r2, #0
 800b8e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b8e4:	e02d      	b.n	800b942 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	9300      	str	r3, [sp, #0]
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	2180      	movs	r1, #128	; 0x80
 800b8f0:	68f8      	ldr	r0, [r7, #12]
 800b8f2:	f000 fe50 	bl	800c596 <UART_WaitOnFlagUntilTimeout>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b8fc:	2303      	movs	r3, #3
 800b8fe:	e039      	b.n	800b974 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d10b      	bne.n	800b91e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	881a      	ldrh	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b912:	b292      	uxth	r2, r2
 800b914:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b916:	69bb      	ldr	r3, [r7, #24]
 800b918:	3302      	adds	r3, #2
 800b91a:	61bb      	str	r3, [r7, #24]
 800b91c:	e008      	b.n	800b930 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	781a      	ldrb	r2, [r3, #0]
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	b292      	uxth	r2, r2
 800b928:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b92a:	69fb      	ldr	r3, [r7, #28]
 800b92c:	3301      	adds	r3, #1
 800b92e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b936:	b29b      	uxth	r3, r3
 800b938:	3b01      	subs	r3, #1
 800b93a:	b29a      	uxth	r2, r3
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b948:	b29b      	uxth	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1cb      	bne.n	800b8e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	9300      	str	r3, [sp, #0]
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	2200      	movs	r2, #0
 800b956:	2140      	movs	r1, #64	; 0x40
 800b958:	68f8      	ldr	r0, [r7, #12]
 800b95a:	f000 fe1c 	bl	800c596 <UART_WaitOnFlagUntilTimeout>
 800b95e:	4603      	mov	r3, r0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b964:	2303      	movs	r3, #3
 800b966:	e005      	b.n	800b974 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2220      	movs	r2, #32
 800b96c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b96e:	2300      	movs	r3, #0
 800b970:	e000      	b.n	800b974 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b972:	2302      	movs	r3, #2
  }
}
 800b974:	4618      	mov	r0, r3
 800b976:	3720      	adds	r7, #32
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08a      	sub	sp, #40	; 0x28
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	4613      	mov	r3, r2
 800b988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b98e:	2b20      	cmp	r3, #32
 800b990:	d13d      	bne.n	800ba0e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <HAL_UART_Receive_IT+0x22>
 800b998:	88fb      	ldrh	r3, [r7, #6]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e036      	b.n	800ba10 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d101      	bne.n	800b9b0 <HAL_UART_Receive_IT+0x34>
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	e02f      	b.n	800ba10 <HAL_UART_Receive_IT+0x94>
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d018      	beq.n	800b9fe <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	e853 3f00 	ldrex	r3, [r3]
 800b9d8:	613b      	str	r3, [r7, #16]
   return(result);
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b9e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	623b      	str	r3, [r7, #32]
 800b9ec:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ee:	69f9      	ldr	r1, [r7, #28]
 800b9f0:	6a3a      	ldr	r2, [r7, #32]
 800b9f2:	e841 2300 	strex	r3, r2, [r1]
 800b9f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9f8:	69bb      	ldr	r3, [r7, #24]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1e6      	bne.n	800b9cc <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b9fe:	88fb      	ldrh	r3, [r7, #6]
 800ba00:	461a      	mov	r2, r3
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 fe8b 	bl	800c720 <UART_Start_Receive_IT>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	e000      	b.n	800ba10 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba0e:	2302      	movs	r3, #2
  }
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3728      	adds	r7, #40	; 0x28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b0ba      	sub	sp, #232	; 0xe8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ba42:	f640 030f 	movw	r3, #2063	; 0x80f
 800ba46:	4013      	ands	r3, r2
 800ba48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ba4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d115      	bne.n	800ba80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ba54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba58:	f003 0320 	and.w	r3, r3, #32
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00f      	beq.n	800ba80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ba60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba64:	f003 0320 	and.w	r3, r3, #32
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d009      	beq.n	800ba80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 82a4 	beq.w	800bfbe <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	4798      	blx	r3
      }
      return;
 800ba7e:	e29e      	b.n	800bfbe <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	f000 8117 	beq.w	800bcb8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ba8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d106      	bne.n	800baa4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ba96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ba9a:	4b85      	ldr	r3, [pc, #532]	; (800bcb0 <HAL_UART_IRQHandler+0x298>)
 800ba9c:	4013      	ands	r3, r2
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 810a 	beq.w	800bcb8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800baa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800baa8:	f003 0301 	and.w	r3, r3, #1
 800baac:	2b00      	cmp	r3, #0
 800baae:	d011      	beq.n	800bad4 <HAL_UART_IRQHandler+0xbc>
 800bab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00b      	beq.n	800bad4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2201      	movs	r2, #1
 800bac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baca:	f043 0201 	orr.w	r2, r3, #1
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b00      	cmp	r3, #0
 800bade:	d011      	beq.n	800bb04 <HAL_UART_IRQHandler+0xec>
 800bae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bae4:	f003 0301 	and.w	r3, r3, #1
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00b      	beq.n	800bb04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2202      	movs	r2, #2
 800baf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bafa:	f043 0204 	orr.w	r2, r3, #4
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bb04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb08:	f003 0304 	and.w	r3, r3, #4
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d011      	beq.n	800bb34 <HAL_UART_IRQHandler+0x11c>
 800bb10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb14:	f003 0301 	and.w	r3, r3, #1
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00b      	beq.n	800bb34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2204      	movs	r2, #4
 800bb22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb2a:	f043 0202 	orr.w	r2, r3, #2
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb38:	f003 0308 	and.w	r3, r3, #8
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d017      	beq.n	800bb70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb44:	f003 0320 	and.w	r3, r3, #32
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d105      	bne.n	800bb58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bb4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bb50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d00b      	beq.n	800bb70 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2208      	movs	r2, #8
 800bb5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb66:	f043 0208 	orr.w	r2, r3, #8
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d012      	beq.n	800bba2 <HAL_UART_IRQHandler+0x18a>
 800bb7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00c      	beq.n	800bba2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb98:	f043 0220 	orr.w	r2, r3, #32
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	f000 820a 	beq.w	800bfc2 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bbae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb2:	f003 0320 	and.w	r3, r3, #32
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00d      	beq.n	800bbd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bbba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bbbe:	f003 0320 	and.w	r3, r3, #32
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d007      	beq.n	800bbd6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbea:	2b40      	cmp	r3, #64	; 0x40
 800bbec:	d005      	beq.n	800bbfa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bbee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bbf2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d04f      	beq.n	800bc9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fe3c 	bl	800c878 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc0a:	2b40      	cmp	r3, #64	; 0x40
 800bc0c:	d141      	bne.n	800bc92 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	3308      	adds	r3, #8
 800bc14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bc1c:	e853 3f00 	ldrex	r3, [r3]
 800bc20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bc24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bc28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3308      	adds	r3, #8
 800bc36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bc3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bc3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bc46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bc4a:	e841 2300 	strex	r3, r2, [r1]
 800bc4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bc52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1d9      	bne.n	800bc0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d013      	beq.n	800bc8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc66:	4a13      	ldr	r2, [pc, #76]	; (800bcb4 <HAL_UART_IRQHandler+0x29c>)
 800bc68:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fc fc76 	bl	8008560 <HAL_DMA_Abort_IT>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d017      	beq.n	800bcaa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800bc84:	4610      	mov	r0, r2
 800bc86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc88:	e00f      	b.n	800bcaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f9ae 	bl	800bfec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc90:	e00b      	b.n	800bcaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f9aa 	bl	800bfec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc98:	e007      	b.n	800bcaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 f9a6 	bl	800bfec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800bca8:	e18b      	b.n	800bfc2 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcaa:	bf00      	nop
    return;
 800bcac:	e189      	b.n	800bfc2 <HAL_UART_IRQHandler+0x5aa>
 800bcae:	bf00      	nop
 800bcb0:	04000120 	.word	0x04000120
 800bcb4:	0800c93f 	.word	0x0800c93f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcbc:	2b01      	cmp	r3, #1
 800bcbe:	f040 8143 	bne.w	800bf48 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bcc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcc6:	f003 0310 	and.w	r3, r3, #16
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f000 813c 	beq.w	800bf48 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bcd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcd4:	f003 0310 	and.w	r3, r3, #16
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f000 8135 	beq.w	800bf48 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	2210      	movs	r2, #16
 800bce4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf0:	2b40      	cmp	r3, #64	; 0x40
 800bcf2:	f040 80b1 	bne.w	800be58 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bd02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	f000 815d 	beq.w	800bfc6 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bd12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd16:	429a      	cmp	r2, r3
 800bd18:	f080 8155 	bcs.w	800bfc6 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bd22:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd2a:	699b      	ldr	r3, [r3, #24]
 800bd2c:	2b20      	cmp	r3, #32
 800bd2e:	f000 8085 	beq.w	800be3c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bd3e:	e853 3f00 	ldrex	r3, [r3]
 800bd42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bd46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bd4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	461a      	mov	r2, r3
 800bd58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bd5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd60:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bd68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bd6c:	e841 2300 	strex	r3, r2, [r1]
 800bd70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bd74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1da      	bne.n	800bd32 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	3308      	adds	r3, #8
 800bd82:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd86:	e853 3f00 	ldrex	r3, [r3]
 800bd8a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bd8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd8e:	f023 0301 	bic.w	r3, r3, #1
 800bd92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3308      	adds	r3, #8
 800bd9c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bda0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bda4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bda8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bdac:	e841 2300 	strex	r3, r2, [r1]
 800bdb0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bdb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1e1      	bne.n	800bd7c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	3308      	adds	r3, #8
 800bdbe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bdc2:	e853 3f00 	ldrex	r3, [r3]
 800bdc6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bdc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3308      	adds	r3, #8
 800bdd8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bddc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bdde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bde2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bde4:	e841 2300 	strex	r3, r2, [r1]
 800bde8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bdea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1e3      	bne.n	800bdb8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2220      	movs	r2, #32
 800bdf4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be04:	e853 3f00 	ldrex	r3, [r3]
 800be08:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be0c:	f023 0310 	bic.w	r3, r3, #16
 800be10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	461a      	mov	r2, r3
 800be1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be1e:	65bb      	str	r3, [r7, #88]	; 0x58
 800be20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800be26:	e841 2300 	strex	r3, r2, [r1]
 800be2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800be2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1e4      	bne.n	800bdfc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be36:	4618      	mov	r0, r3
 800be38:	f7fc fb59 	bl	80084ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800be48:	b29b      	uxth	r3, r3
 800be4a:	1ad3      	subs	r3, r2, r3
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f8d5 	bl	800c000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800be56:	e0b6      	b.n	800bfc6 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800be64:	b29b      	uxth	r3, r3
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800be72:	b29b      	uxth	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	f000 80a8 	beq.w	800bfca <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 800be7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f000 80a3 	beq.w	800bfca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be8c:	e853 3f00 	ldrex	r3, [r3]
 800be90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800be92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bea6:	647b      	str	r3, [r7, #68]	; 0x44
 800bea8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800beac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beae:	e841 2300 	strex	r3, r2, [r1]
 800beb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800beb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d1e4      	bne.n	800be84 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3308      	adds	r3, #8
 800bec0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	e853 3f00 	ldrex	r3, [r3]
 800bec8:	623b      	str	r3, [r7, #32]
   return(result);
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	f023 0301 	bic.w	r3, r3, #1
 800bed0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	3308      	adds	r3, #8
 800beda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bede:	633a      	str	r2, [r7, #48]	; 0x30
 800bee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bee6:	e841 2300 	strex	r3, r2, [r1]
 800beea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800beec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d1e3      	bne.n	800beba <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2220      	movs	r2, #32
 800bef6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	e853 3f00 	ldrex	r3, [r3]
 800bf10:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f023 0310 	bic.w	r3, r3, #16
 800bf18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	461a      	mov	r2, r3
 800bf22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bf26:	61fb      	str	r3, [r7, #28]
 800bf28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2a:	69b9      	ldr	r1, [r7, #24]
 800bf2c:	69fa      	ldr	r2, [r7, #28]
 800bf2e:	e841 2300 	strex	r3, r2, [r1]
 800bf32:	617b      	str	r3, [r7, #20]
   return(result);
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e4      	bne.n	800bf04 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bf3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bf3e:	4619      	mov	r1, r3
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f000 f85d 	bl	800c000 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bf46:	e040      	b.n	800bfca <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bf48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d00e      	beq.n	800bf72 <HAL_UART_IRQHandler+0x55a>
 800bf54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bf58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d008      	beq.n	800bf72 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800bf68:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 fe83 	bl	800cc76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bf70:	e02e      	b.n	800bfd0 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bf72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00e      	beq.n	800bf9c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bf7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d008      	beq.n	800bf9c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d01d      	beq.n	800bfce <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	4798      	blx	r3
    }
    return;
 800bf9a:	e018      	b.n	800bfce <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bf9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bfa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d013      	beq.n	800bfd0 <HAL_UART_IRQHandler+0x5b8>
 800bfa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bfac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00d      	beq.n	800bfd0 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fcd8 	bl	800c96a <UART_EndTransmit_IT>
    return;
 800bfba:	bf00      	nop
 800bfbc:	e008      	b.n	800bfd0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800bfbe:	bf00      	nop
 800bfc0:	e006      	b.n	800bfd0 <HAL_UART_IRQHandler+0x5b8>
    return;
 800bfc2:	bf00      	nop
 800bfc4:	e004      	b.n	800bfd0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800bfc6:	bf00      	nop
 800bfc8:	e002      	b.n	800bfd0 <HAL_UART_IRQHandler+0x5b8>
      return;
 800bfca:	bf00      	nop
 800bfcc:	e000      	b.n	800bfd0 <HAL_UART_IRQHandler+0x5b8>
    return;
 800bfce:	bf00      	nop
  }

}
 800bfd0:	37e8      	adds	r7, #232	; 0xe8
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop

0800bfd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bfe0:	bf00      	nop
 800bfe2:	370c      	adds	r7, #12
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr

0800bfec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b083      	sub	sp, #12
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bff4:	bf00      	nop
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c000:	b480      	push	{r7}
 800c002:	b083      	sub	sp, #12
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
 800c008:	460b      	mov	r3, r1
 800c00a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c00c:	bf00      	nop
 800c00e:	370c      	adds	r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b088      	sub	sp, #32
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	689a      	ldr	r2, [r3, #8]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	691b      	ldr	r3, [r3, #16]
 800c02c:	431a      	orrs	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	431a      	orrs	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	69db      	ldr	r3, [r3, #28]
 800c038:	4313      	orrs	r3, r2
 800c03a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	4baa      	ldr	r3, [pc, #680]	; (800c2ec <UART_SetConfig+0x2d4>)
 800c044:	4013      	ands	r3, r2
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	6812      	ldr	r2, [r2, #0]
 800c04a:	6979      	ldr	r1, [r7, #20]
 800c04c:	430b      	orrs	r3, r1
 800c04e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	68da      	ldr	r2, [r3, #12]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	430a      	orrs	r2, r1
 800c064:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	699b      	ldr	r3, [r3, #24]
 800c06a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a1b      	ldr	r3, [r3, #32]
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	4313      	orrs	r3, r2
 800c074:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	697a      	ldr	r2, [r7, #20]
 800c086:	430a      	orrs	r2, r1
 800c088:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a98      	ldr	r2, [pc, #608]	; (800c2f0 <UART_SetConfig+0x2d8>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d121      	bne.n	800c0d8 <UART_SetConfig+0xc0>
 800c094:	4b97      	ldr	r3, [pc, #604]	; (800c2f4 <UART_SetConfig+0x2dc>)
 800c096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c098:	f003 0303 	and.w	r3, r3, #3
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d817      	bhi.n	800c0d0 <UART_SetConfig+0xb8>
 800c0a0:	a201      	add	r2, pc, #4	; (adr r2, 800c0a8 <UART_SetConfig+0x90>)
 800c0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a6:	bf00      	nop
 800c0a8:	0800c0b9 	.word	0x0800c0b9
 800c0ac:	0800c0c5 	.word	0x0800c0c5
 800c0b0:	0800c0cb 	.word	0x0800c0cb
 800c0b4:	0800c0bf 	.word	0x0800c0bf
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	77fb      	strb	r3, [r7, #31]
 800c0bc:	e0b2      	b.n	800c224 <UART_SetConfig+0x20c>
 800c0be:	2302      	movs	r3, #2
 800c0c0:	77fb      	strb	r3, [r7, #31]
 800c0c2:	e0af      	b.n	800c224 <UART_SetConfig+0x20c>
 800c0c4:	2304      	movs	r3, #4
 800c0c6:	77fb      	strb	r3, [r7, #31]
 800c0c8:	e0ac      	b.n	800c224 <UART_SetConfig+0x20c>
 800c0ca:	2308      	movs	r3, #8
 800c0cc:	77fb      	strb	r3, [r7, #31]
 800c0ce:	e0a9      	b.n	800c224 <UART_SetConfig+0x20c>
 800c0d0:	2310      	movs	r3, #16
 800c0d2:	77fb      	strb	r3, [r7, #31]
 800c0d4:	bf00      	nop
 800c0d6:	e0a5      	b.n	800c224 <UART_SetConfig+0x20c>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a86      	ldr	r2, [pc, #536]	; (800c2f8 <UART_SetConfig+0x2e0>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d123      	bne.n	800c12a <UART_SetConfig+0x112>
 800c0e2:	4b84      	ldr	r3, [pc, #528]	; (800c2f4 <UART_SetConfig+0x2dc>)
 800c0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c0ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ee:	d012      	beq.n	800c116 <UART_SetConfig+0xfe>
 800c0f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0f4:	d802      	bhi.n	800c0fc <UART_SetConfig+0xe4>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d007      	beq.n	800c10a <UART_SetConfig+0xf2>
 800c0fa:	e012      	b.n	800c122 <UART_SetConfig+0x10a>
 800c0fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c100:	d00c      	beq.n	800c11c <UART_SetConfig+0x104>
 800c102:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c106:	d003      	beq.n	800c110 <UART_SetConfig+0xf8>
 800c108:	e00b      	b.n	800c122 <UART_SetConfig+0x10a>
 800c10a:	2300      	movs	r3, #0
 800c10c:	77fb      	strb	r3, [r7, #31]
 800c10e:	e089      	b.n	800c224 <UART_SetConfig+0x20c>
 800c110:	2302      	movs	r3, #2
 800c112:	77fb      	strb	r3, [r7, #31]
 800c114:	e086      	b.n	800c224 <UART_SetConfig+0x20c>
 800c116:	2304      	movs	r3, #4
 800c118:	77fb      	strb	r3, [r7, #31]
 800c11a:	e083      	b.n	800c224 <UART_SetConfig+0x20c>
 800c11c:	2308      	movs	r3, #8
 800c11e:	77fb      	strb	r3, [r7, #31]
 800c120:	e080      	b.n	800c224 <UART_SetConfig+0x20c>
 800c122:	2310      	movs	r3, #16
 800c124:	77fb      	strb	r3, [r7, #31]
 800c126:	bf00      	nop
 800c128:	e07c      	b.n	800c224 <UART_SetConfig+0x20c>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a73      	ldr	r2, [pc, #460]	; (800c2fc <UART_SetConfig+0x2e4>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d123      	bne.n	800c17c <UART_SetConfig+0x164>
 800c134:	4b6f      	ldr	r3, [pc, #444]	; (800c2f4 <UART_SetConfig+0x2dc>)
 800c136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c138:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 800c13c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c140:	d012      	beq.n	800c168 <UART_SetConfig+0x150>
 800c142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c146:	d802      	bhi.n	800c14e <UART_SetConfig+0x136>
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d007      	beq.n	800c15c <UART_SetConfig+0x144>
 800c14c:	e012      	b.n	800c174 <UART_SetConfig+0x15c>
 800c14e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c152:	d00c      	beq.n	800c16e <UART_SetConfig+0x156>
 800c154:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800c158:	d003      	beq.n	800c162 <UART_SetConfig+0x14a>
 800c15a:	e00b      	b.n	800c174 <UART_SetConfig+0x15c>
 800c15c:	2300      	movs	r3, #0
 800c15e:	77fb      	strb	r3, [r7, #31]
 800c160:	e060      	b.n	800c224 <UART_SetConfig+0x20c>
 800c162:	2302      	movs	r3, #2
 800c164:	77fb      	strb	r3, [r7, #31]
 800c166:	e05d      	b.n	800c224 <UART_SetConfig+0x20c>
 800c168:	2304      	movs	r3, #4
 800c16a:	77fb      	strb	r3, [r7, #31]
 800c16c:	e05a      	b.n	800c224 <UART_SetConfig+0x20c>
 800c16e:	2308      	movs	r3, #8
 800c170:	77fb      	strb	r3, [r7, #31]
 800c172:	e057      	b.n	800c224 <UART_SetConfig+0x20c>
 800c174:	2310      	movs	r3, #16
 800c176:	77fb      	strb	r3, [r7, #31]
 800c178:	bf00      	nop
 800c17a:	e053      	b.n	800c224 <UART_SetConfig+0x20c>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a5f      	ldr	r2, [pc, #380]	; (800c300 <UART_SetConfig+0x2e8>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d123      	bne.n	800c1ce <UART_SetConfig+0x1b6>
 800c186:	4b5b      	ldr	r3, [pc, #364]	; (800c2f4 <UART_SetConfig+0x2dc>)
 800c188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c18a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800c18e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c192:	d012      	beq.n	800c1ba <UART_SetConfig+0x1a2>
 800c194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c198:	d802      	bhi.n	800c1a0 <UART_SetConfig+0x188>
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d007      	beq.n	800c1ae <UART_SetConfig+0x196>
 800c19e:	e012      	b.n	800c1c6 <UART_SetConfig+0x1ae>
 800c1a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1a4:	d00c      	beq.n	800c1c0 <UART_SetConfig+0x1a8>
 800c1a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1aa:	d003      	beq.n	800c1b4 <UART_SetConfig+0x19c>
 800c1ac:	e00b      	b.n	800c1c6 <UART_SetConfig+0x1ae>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	77fb      	strb	r3, [r7, #31]
 800c1b2:	e037      	b.n	800c224 <UART_SetConfig+0x20c>
 800c1b4:	2302      	movs	r3, #2
 800c1b6:	77fb      	strb	r3, [r7, #31]
 800c1b8:	e034      	b.n	800c224 <UART_SetConfig+0x20c>
 800c1ba:	2304      	movs	r3, #4
 800c1bc:	77fb      	strb	r3, [r7, #31]
 800c1be:	e031      	b.n	800c224 <UART_SetConfig+0x20c>
 800c1c0:	2308      	movs	r3, #8
 800c1c2:	77fb      	strb	r3, [r7, #31]
 800c1c4:	e02e      	b.n	800c224 <UART_SetConfig+0x20c>
 800c1c6:	2310      	movs	r3, #16
 800c1c8:	77fb      	strb	r3, [r7, #31]
 800c1ca:	bf00      	nop
 800c1cc:	e02a      	b.n	800c224 <UART_SetConfig+0x20c>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a4c      	ldr	r2, [pc, #304]	; (800c304 <UART_SetConfig+0x2ec>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d123      	bne.n	800c220 <UART_SetConfig+0x208>
 800c1d8:	4b46      	ldr	r3, [pc, #280]	; (800c2f4 <UART_SetConfig+0x2dc>)
 800c1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1dc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800c1e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1e4:	d012      	beq.n	800c20c <UART_SetConfig+0x1f4>
 800c1e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1ea:	d802      	bhi.n	800c1f2 <UART_SetConfig+0x1da>
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d007      	beq.n	800c200 <UART_SetConfig+0x1e8>
 800c1f0:	e012      	b.n	800c218 <UART_SetConfig+0x200>
 800c1f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1f6:	d00c      	beq.n	800c212 <UART_SetConfig+0x1fa>
 800c1f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800c1fc:	d003      	beq.n	800c206 <UART_SetConfig+0x1ee>
 800c1fe:	e00b      	b.n	800c218 <UART_SetConfig+0x200>
 800c200:	2300      	movs	r3, #0
 800c202:	77fb      	strb	r3, [r7, #31]
 800c204:	e00e      	b.n	800c224 <UART_SetConfig+0x20c>
 800c206:	2302      	movs	r3, #2
 800c208:	77fb      	strb	r3, [r7, #31]
 800c20a:	e00b      	b.n	800c224 <UART_SetConfig+0x20c>
 800c20c:	2304      	movs	r3, #4
 800c20e:	77fb      	strb	r3, [r7, #31]
 800c210:	e008      	b.n	800c224 <UART_SetConfig+0x20c>
 800c212:	2308      	movs	r3, #8
 800c214:	77fb      	strb	r3, [r7, #31]
 800c216:	e005      	b.n	800c224 <UART_SetConfig+0x20c>
 800c218:	2310      	movs	r3, #16
 800c21a:	77fb      	strb	r3, [r7, #31]
 800c21c:	bf00      	nop
 800c21e:	e001      	b.n	800c224 <UART_SetConfig+0x20c>
 800c220:	2310      	movs	r3, #16
 800c222:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c22c:	d16e      	bne.n	800c30c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800c22e:	7ffb      	ldrb	r3, [r7, #31]
 800c230:	2b08      	cmp	r3, #8
 800c232:	d828      	bhi.n	800c286 <UART_SetConfig+0x26e>
 800c234:	a201      	add	r2, pc, #4	; (adr r2, 800c23c <UART_SetConfig+0x224>)
 800c236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23a:	bf00      	nop
 800c23c:	0800c261 	.word	0x0800c261
 800c240:	0800c269 	.word	0x0800c269
 800c244:	0800c271 	.word	0x0800c271
 800c248:	0800c287 	.word	0x0800c287
 800c24c:	0800c277 	.word	0x0800c277
 800c250:	0800c287 	.word	0x0800c287
 800c254:	0800c287 	.word	0x0800c287
 800c258:	0800c287 	.word	0x0800c287
 800c25c:	0800c27f 	.word	0x0800c27f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c260:	f7fd fdb0 	bl	8009dc4 <HAL_RCC_GetPCLK1Freq>
 800c264:	61b8      	str	r0, [r7, #24]
        break;
 800c266:	e013      	b.n	800c290 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c268:	f7fd fdce 	bl	8009e08 <HAL_RCC_GetPCLK2Freq>
 800c26c:	61b8      	str	r0, [r7, #24]
        break;
 800c26e:	e00f      	b.n	800c290 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c270:	4b25      	ldr	r3, [pc, #148]	; (800c308 <UART_SetConfig+0x2f0>)
 800c272:	61bb      	str	r3, [r7, #24]
        break;
 800c274:	e00c      	b.n	800c290 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c276:	f7fd fd2f 	bl	8009cd8 <HAL_RCC_GetSysClockFreq>
 800c27a:	61b8      	str	r0, [r7, #24]
        break;
 800c27c:	e008      	b.n	800c290 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c27e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c282:	61bb      	str	r3, [r7, #24]
        break;
 800c284:	e004      	b.n	800c290 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	77bb      	strb	r3, [r7, #30]
        break;
 800c28e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 8086 	beq.w	800c3a4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c298:	69bb      	ldr	r3, [r7, #24]
 800c29a:	005a      	lsls	r2, r3, #1
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	085b      	lsrs	r3, r3, #1
 800c2a2:	441a      	add	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ac:	b29b      	uxth	r3, r3
 800c2ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2b0f      	cmp	r3, #15
 800c2b4:	d916      	bls.n	800c2e4 <UART_SetConfig+0x2cc>
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2bc:	d212      	bcs.n	800c2e4 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	f023 030f 	bic.w	r3, r3, #15
 800c2c6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	085b      	lsrs	r3, r3, #1
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	f003 0307 	and.w	r3, r3, #7
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	89fb      	ldrh	r3, [r7, #14]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	89fa      	ldrh	r2, [r7, #14]
 800c2e0:	60da      	str	r2, [r3, #12]
 800c2e2:	e05f      	b.n	800c3a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	77bb      	strb	r3, [r7, #30]
 800c2e8:	e05c      	b.n	800c3a4 <UART_SetConfig+0x38c>
 800c2ea:	bf00      	nop
 800c2ec:	efff69f3 	.word	0xefff69f3
 800c2f0:	40013800 	.word	0x40013800
 800c2f4:	40021000 	.word	0x40021000
 800c2f8:	40004400 	.word	0x40004400
 800c2fc:	40004800 	.word	0x40004800
 800c300:	40004c00 	.word	0x40004c00
 800c304:	40005000 	.word	0x40005000
 800c308:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 800c30c:	7ffb      	ldrb	r3, [r7, #31]
 800c30e:	2b08      	cmp	r3, #8
 800c310:	d827      	bhi.n	800c362 <UART_SetConfig+0x34a>
 800c312:	a201      	add	r2, pc, #4	; (adr r2, 800c318 <UART_SetConfig+0x300>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c33d 	.word	0x0800c33d
 800c31c:	0800c345 	.word	0x0800c345
 800c320:	0800c34d 	.word	0x0800c34d
 800c324:	0800c363 	.word	0x0800c363
 800c328:	0800c353 	.word	0x0800c353
 800c32c:	0800c363 	.word	0x0800c363
 800c330:	0800c363 	.word	0x0800c363
 800c334:	0800c363 	.word	0x0800c363
 800c338:	0800c35b 	.word	0x0800c35b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c33c:	f7fd fd42 	bl	8009dc4 <HAL_RCC_GetPCLK1Freq>
 800c340:	61b8      	str	r0, [r7, #24]
        break;
 800c342:	e013      	b.n	800c36c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c344:	f7fd fd60 	bl	8009e08 <HAL_RCC_GetPCLK2Freq>
 800c348:	61b8      	str	r0, [r7, #24]
        break;
 800c34a:	e00f      	b.n	800c36c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c34c:	4b1b      	ldr	r3, [pc, #108]	; (800c3bc <UART_SetConfig+0x3a4>)
 800c34e:	61bb      	str	r3, [r7, #24]
        break;
 800c350:	e00c      	b.n	800c36c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c352:	f7fd fcc1 	bl	8009cd8 <HAL_RCC_GetSysClockFreq>
 800c356:	61b8      	str	r0, [r7, #24]
        break;
 800c358:	e008      	b.n	800c36c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c35a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c35e:	61bb      	str	r3, [r7, #24]
        break;
 800c360:	e004      	b.n	800c36c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800c362:	2300      	movs	r3, #0
 800c364:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c366:	2301      	movs	r3, #1
 800c368:	77bb      	strb	r3, [r7, #30]
        break;
 800c36a:	bf00      	nop
    }

    if (pclk != 0U)
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d018      	beq.n	800c3a4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	085a      	lsrs	r2, r3, #1
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	441a      	add	r2, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	fbb2 f3f3 	udiv	r3, r2, r3
 800c384:	b29b      	uxth	r3, r3
 800c386:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	2b0f      	cmp	r3, #15
 800c38c:	d908      	bls.n	800c3a0 <UART_SetConfig+0x388>
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c394:	d204      	bcs.n	800c3a0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	693a      	ldr	r2, [r7, #16]
 800c39c:	60da      	str	r2, [r3, #12]
 800c39e:	e001      	b.n	800c3a4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c3b0:	7fbb      	ldrb	r3, [r7, #30]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3720      	adds	r7, #32
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	007a1200 	.word	0x007a1200

0800c3c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00a      	beq.n	800c3ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	f003 0302 	and.w	r3, r3, #2
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00a      	beq.n	800c40c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	430a      	orrs	r2, r1
 800c40a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c410:	f003 0304 	and.w	r3, r3, #4
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00a      	beq.n	800c42e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c432:	f003 0308 	and.w	r3, r3, #8
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c454:	f003 0310 	and.w	r3, r3, #16
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d00a      	beq.n	800c472 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	430a      	orrs	r2, r1
 800c470:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c476:	f003 0320 	and.w	r3, r3, #32
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00a      	beq.n	800c494 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	430a      	orrs	r2, r1
 800c492:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d01a      	beq.n	800c4d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	430a      	orrs	r2, r1
 800c4b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c4be:	d10a      	bne.n	800c4d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	430a      	orrs	r2, r1
 800c4d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00a      	beq.n	800c4f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	430a      	orrs	r2, r1
 800c4f6:	605a      	str	r2, [r3, #4]
  }
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af02      	add	r7, sp, #8
 800c50a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2200      	movs	r2, #0
 800c510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c514:	f7f9 fe60 	bl	80061d8 <HAL_GetTick>
 800c518:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 0308 	and.w	r3, r3, #8
 800c524:	2b08      	cmp	r3, #8
 800c526:	d10e      	bne.n	800c546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c528:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2200      	movs	r2, #0
 800c532:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f82d 	bl	800c596 <UART_WaitOnFlagUntilTimeout>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d001      	beq.n	800c546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c542:	2303      	movs	r3, #3
 800c544:	e023      	b.n	800c58e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 0304 	and.w	r3, r3, #4
 800c550:	2b04      	cmp	r3, #4
 800c552:	d10e      	bne.n	800c572 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	2200      	movs	r2, #0
 800c55e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f817 	bl	800c596 <UART_WaitOnFlagUntilTimeout>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d001      	beq.n	800c572 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e00d      	b.n	800c58e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2220      	movs	r2, #32
 800c576:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2220      	movs	r2, #32
 800c57c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2200      	movs	r2, #0
 800c582:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	2200      	movs	r2, #0
 800c588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b09c      	sub	sp, #112	; 0x70
 800c59a:	af00      	add	r7, sp, #0
 800c59c:	60f8      	str	r0, [r7, #12]
 800c59e:	60b9      	str	r1, [r7, #8]
 800c5a0:	603b      	str	r3, [r7, #0]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5a6:	e0a5      	b.n	800c6f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c5a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ae:	f000 80a1 	beq.w	800c6f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c5b2:	f7f9 fe11 	bl	80061d8 <HAL_GetTick>
 800c5b6:	4602      	mov	r2, r0
 800c5b8:	683b      	ldr	r3, [r7, #0]
 800c5ba:	1ad3      	subs	r3, r2, r3
 800c5bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d302      	bcc.n	800c5c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800c5c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d13e      	bne.n	800c646 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5d0:	e853 3f00 	ldrex	r3, [r3]
 800c5d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c5dc:	667b      	str	r3, [r7, #100]	; 0x64
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c5e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5ee:	e841 2300 	strex	r3, r2, [r1]
 800c5f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c5f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1e6      	bne.n	800c5c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3308      	adds	r3, #8
 800c600:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c604:	e853 3f00 	ldrex	r3, [r3]
 800c608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c60a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60c:	f023 0301 	bic.w	r3, r3, #1
 800c610:	663b      	str	r3, [r7, #96]	; 0x60
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	3308      	adds	r3, #8
 800c618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c61a:	64ba      	str	r2, [r7, #72]	; 0x48
 800c61c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c622:	e841 2300 	strex	r3, r2, [r1]
 800c626:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d1e5      	bne.n	800c5fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2220      	movs	r2, #32
 800c632:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2220      	movs	r2, #32
 800c638:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c642:	2303      	movs	r3, #3
 800c644:	e067      	b.n	800c716 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 0304 	and.w	r3, r3, #4
 800c650:	2b00      	cmp	r3, #0
 800c652:	d04f      	beq.n	800c6f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c65e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c662:	d147      	bne.n	800c6f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c66c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c676:	e853 3f00 	ldrex	r3, [r3]
 800c67a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c682:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	461a      	mov	r2, r3
 800c68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c68c:	637b      	str	r3, [r7, #52]	; 0x34
 800c68e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c694:	e841 2300 	strex	r3, r2, [r1]
 800c698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d1e6      	bne.n	800c66e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	e853 3f00 	ldrex	r3, [r3]
 800c6ae:	613b      	str	r3, [r7, #16]
   return(result);
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	f023 0301 	bic.w	r3, r3, #1
 800c6b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3308      	adds	r3, #8
 800c6be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c6c0:	623a      	str	r2, [r7, #32]
 800c6c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6c4:	69f9      	ldr	r1, [r7, #28]
 800c6c6:	6a3a      	ldr	r2, [r7, #32]
 800c6c8:	e841 2300 	strex	r3, r2, [r1]
 800c6cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6ce:	69bb      	ldr	r3, [r7, #24]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d1e5      	bne.n	800c6a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2220      	movs	r2, #32
 800c6d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	2220      	movs	r2, #32
 800c6de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2220      	movs	r2, #32
 800c6e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e010      	b.n	800c716 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	69da      	ldr	r2, [r3, #28]
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	4013      	ands	r3, r2
 800c6fe:	68ba      	ldr	r2, [r7, #8]
 800c700:	429a      	cmp	r2, r3
 800c702:	bf0c      	ite	eq
 800c704:	2301      	moveq	r3, #1
 800c706:	2300      	movne	r3, #0
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	461a      	mov	r2, r3
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	429a      	cmp	r2, r3
 800c710:	f43f af4a 	beq.w	800c5a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c714:	2300      	movs	r3, #0
}
 800c716:	4618      	mov	r0, r3
 800c718:	3770      	adds	r7, #112	; 0x70
 800c71a:	46bd      	mov	sp, r7
 800c71c:	bd80      	pop	{r7, pc}
	...

0800c720 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c720:	b480      	push	{r7}
 800c722:	b091      	sub	sp, #68	; 0x44
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	4613      	mov	r3, r2
 800c72c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	88fa      	ldrh	r2, [r7, #6]
 800c738:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	88fa      	ldrh	r2, [r7, #6]
 800c740:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2200      	movs	r2, #0
 800c748:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c752:	d10e      	bne.n	800c772 <UART_Start_Receive_IT+0x52>
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	691b      	ldr	r3, [r3, #16]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d105      	bne.n	800c768 <UART_Start_Receive_IT+0x48>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c762:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c766:	e02d      	b.n	800c7c4 <UART_Start_Receive_IT+0xa4>
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	22ff      	movs	r2, #255	; 0xff
 800c76c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c770:	e028      	b.n	800c7c4 <UART_Start_Receive_IT+0xa4>
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	689b      	ldr	r3, [r3, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10d      	bne.n	800c796 <UART_Start_Receive_IT+0x76>
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d104      	bne.n	800c78c <UART_Start_Receive_IT+0x6c>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	22ff      	movs	r2, #255	; 0xff
 800c786:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c78a:	e01b      	b.n	800c7c4 <UART_Start_Receive_IT+0xa4>
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	227f      	movs	r2, #127	; 0x7f
 800c790:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c794:	e016      	b.n	800c7c4 <UART_Start_Receive_IT+0xa4>
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	689b      	ldr	r3, [r3, #8]
 800c79a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c79e:	d10d      	bne.n	800c7bc <UART_Start_Receive_IT+0x9c>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d104      	bne.n	800c7b2 <UART_Start_Receive_IT+0x92>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	227f      	movs	r2, #127	; 0x7f
 800c7ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c7b0:	e008      	b.n	800c7c4 <UART_Start_Receive_IT+0xa4>
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	223f      	movs	r2, #63	; 0x3f
 800c7b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800c7ba:	e003      	b.n	800c7c4 <UART_Start_Receive_IT+0xa4>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2222      	movs	r2, #34	; 0x22
 800c7d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	3308      	adds	r3, #8
 800c7d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	e853 3f00 	ldrex	r3, [r3]
 800c7e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	f043 0301 	orr.w	r3, r3, #1
 800c7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7f2:	637a      	str	r2, [r7, #52]	; 0x34
 800c7f4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c7f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7fa:	e841 2300 	strex	r3, r2, [r1]
 800c7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c802:	2b00      	cmp	r3, #0
 800c804:	d1e5      	bne.n	800c7d2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	689b      	ldr	r3, [r3, #8]
 800c80a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c80e:	d107      	bne.n	800c820 <UART_Start_Receive_IT+0x100>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	691b      	ldr	r3, [r3, #16]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d103      	bne.n	800c820 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	4a15      	ldr	r2, [pc, #84]	; (800c870 <UART_Start_Receive_IT+0x150>)
 800c81c:	665a      	str	r2, [r3, #100]	; 0x64
 800c81e:	e002      	b.n	800c826 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	4a14      	ldr	r2, [pc, #80]	; (800c874 <UART_Start_Receive_IT+0x154>)
 800c824:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	e853 3f00 	ldrex	r3, [r3]
 800c83a:	613b      	str	r3, [r7, #16]
   return(result);
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c842:	63bb      	str	r3, [r7, #56]	; 0x38
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	461a      	mov	r2, r3
 800c84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84c:	623b      	str	r3, [r7, #32]
 800c84e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c850:	69f9      	ldr	r1, [r7, #28]
 800c852:	6a3a      	ldr	r2, [r7, #32]
 800c854:	e841 2300 	strex	r3, r2, [r1]
 800c858:	61bb      	str	r3, [r7, #24]
   return(result);
 800c85a:	69bb      	ldr	r3, [r7, #24]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d1e6      	bne.n	800c82e <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3744      	adds	r7, #68	; 0x44
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr
 800c86e:	bf00      	nop
 800c870:	0800cb1b 	.word	0x0800cb1b
 800c874:	0800c9bf 	.word	0x0800c9bf

0800c878 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c878:	b480      	push	{r7}
 800c87a:	b095      	sub	sp, #84	; 0x54
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c888:	e853 3f00 	ldrex	r3, [r3]
 800c88c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c894:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c89e:	643b      	str	r3, [r7, #64]	; 0x40
 800c8a0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8a6:	e841 2300 	strex	r3, r2, [r1]
 800c8aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d1e6      	bne.n	800c880 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	3308      	adds	r3, #8
 800c8b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	e853 3f00 	ldrex	r3, [r3]
 800c8c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	f023 0301 	bic.w	r3, r3, #1
 800c8c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	3308      	adds	r3, #8
 800c8d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8da:	e841 2300 	strex	r3, r2, [r1]
 800c8de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1e5      	bne.n	800c8b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d118      	bne.n	800c920 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	e853 3f00 	ldrex	r3, [r3]
 800c8fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	f023 0310 	bic.w	r3, r3, #16
 800c902:	647b      	str	r3, [r7, #68]	; 0x44
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	461a      	mov	r2, r3
 800c90a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c90c:	61bb      	str	r3, [r7, #24]
 800c90e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c910:	6979      	ldr	r1, [r7, #20]
 800c912:	69ba      	ldr	r2, [r7, #24]
 800c914:	e841 2300 	strex	r3, r2, [r1]
 800c918:	613b      	str	r3, [r7, #16]
   return(result);
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d1e6      	bne.n	800c8ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2220      	movs	r2, #32
 800c924:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	665a      	str	r2, [r3, #100]	; 0x64
}
 800c932:	bf00      	nop
 800c934:	3754      	adds	r7, #84	; 0x54
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c94a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f7ff fb45 	bl	800bfec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c962:	bf00      	nop
 800c964:	3710      	adds	r7, #16
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}

0800c96a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c96a:	b580      	push	{r7, lr}
 800c96c:	b088      	sub	sp, #32
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	e853 3f00 	ldrex	r3, [r3]
 800c97e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c986:	61fb      	str	r3, [r7, #28]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	61bb      	str	r3, [r7, #24]
 800c992:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c994:	6979      	ldr	r1, [r7, #20]
 800c996:	69ba      	ldr	r2, [r7, #24]
 800c998:	e841 2300 	strex	r3, r2, [r1]
 800c99c:	613b      	str	r3, [r7, #16]
   return(result);
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d1e6      	bne.n	800c972 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2220      	movs	r2, #32
 800c9a8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff fb11 	bl	800bfd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c9b6:	bf00      	nop
 800c9b8:	3720      	adds	r7, #32
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b096      	sub	sp, #88	; 0x58
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c9cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9d4:	2b22      	cmp	r3, #34	; 0x22
 800c9d6:	f040 8094 	bne.w	800cb02 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c9e0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c9e4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800c9e8:	b2d9      	uxtb	r1, r3
 800c9ea:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9f4:	400a      	ands	r2, r1
 800c9f6:	b2d2      	uxtb	r2, r2
 800c9f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9fe:	1c5a      	adds	r2, r3, #1
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d177      	bne.n	800cb12 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2a:	e853 3f00 	ldrex	r3, [r3]
 800ca2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ca36:	653b      	str	r3, [r7, #80]	; 0x50
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca40:	647b      	str	r3, [r7, #68]	; 0x44
 800ca42:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ca46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca48:	e841 2300 	strex	r3, r2, [r1]
 800ca4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ca4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d1e6      	bne.n	800ca22 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	3308      	adds	r3, #8
 800ca5a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca5e:	e853 3f00 	ldrex	r3, [r3]
 800ca62:	623b      	str	r3, [r7, #32]
   return(result);
 800ca64:	6a3b      	ldr	r3, [r7, #32]
 800ca66:	f023 0301 	bic.w	r3, r3, #1
 800ca6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	3308      	adds	r3, #8
 800ca72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca74:	633a      	str	r2, [r7, #48]	; 0x30
 800ca76:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca7c:	e841 2300 	strex	r3, r2, [r1]
 800ca80:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d1e5      	bne.n	800ca54 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2220      	movs	r2, #32
 800ca8c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2200      	movs	r2, #0
 800ca92:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d12e      	bne.n	800cafa <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	e853 3f00 	ldrex	r3, [r3]
 800caae:	60fb      	str	r3, [r7, #12]
   return(result);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f023 0310 	bic.w	r3, r3, #16
 800cab6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	461a      	mov	r2, r3
 800cabe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cac0:	61fb      	str	r3, [r7, #28]
 800cac2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cac4:	69b9      	ldr	r1, [r7, #24]
 800cac6:	69fa      	ldr	r2, [r7, #28]
 800cac8:	e841 2300 	strex	r3, r2, [r1]
 800cacc:	617b      	str	r3, [r7, #20]
   return(result);
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d1e6      	bne.n	800caa2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	69db      	ldr	r3, [r3, #28]
 800cada:	f003 0310 	and.w	r3, r3, #16
 800cade:	2b10      	cmp	r3, #16
 800cae0:	d103      	bne.n	800caea <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	2210      	movs	r2, #16
 800cae8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800caf0:	4619      	mov	r1, r3
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7ff fa84 	bl	800c000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800caf8:	e00b      	b.n	800cb12 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7f4 f9fa 	bl	8000ef4 <HAL_UART_RxCpltCallback>
}
 800cb00:	e007      	b.n	800cb12 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	699a      	ldr	r2, [r3, #24]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f042 0208 	orr.w	r2, r2, #8
 800cb10:	619a      	str	r2, [r3, #24]
}
 800cb12:	bf00      	nop
 800cb14:	3758      	adds	r7, #88	; 0x58
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b096      	sub	sp, #88	; 0x58
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cb28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb30:	2b22      	cmp	r3, #34	; 0x22
 800cb32:	f040 8094 	bne.w	800cc5e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb3c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb44:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800cb46:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800cb4a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800cb4e:	4013      	ands	r3, r2
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb5a:	1c9a      	adds	r2, r3, #2
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d177      	bne.n	800cc6e <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb86:	e853 3f00 	ldrex	r3, [r3]
 800cb8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb9c:	643b      	str	r3, [r7, #64]	; 0x40
 800cb9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cba0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cba4:	e841 2300 	strex	r3, r2, [r1]
 800cba8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cbaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d1e6      	bne.n	800cb7e <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	3308      	adds	r3, #8
 800cbb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	e853 3f00 	ldrex	r3, [r3]
 800cbbe:	61fb      	str	r3, [r7, #28]
   return(result);
 800cbc0:	69fb      	ldr	r3, [r7, #28]
 800cbc2:	f023 0301 	bic.w	r3, r3, #1
 800cbc6:	64bb      	str	r3, [r7, #72]	; 0x48
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	3308      	adds	r3, #8
 800cbce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cbd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbd8:	e841 2300 	strex	r3, r2, [r1]
 800cbdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1e5      	bne.n	800cbb0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2220      	movs	r2, #32
 800cbe8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d12e      	bne.n	800cc56 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	f023 0310 	bic.w	r3, r3, #16
 800cc12:	647b      	str	r3, [r7, #68]	; 0x44
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc1c:	61bb      	str	r3, [r7, #24]
 800cc1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc20:	6979      	ldr	r1, [r7, #20]
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	e841 2300 	strex	r3, r2, [r1]
 800cc28:	613b      	str	r3, [r7, #16]
   return(result);
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1e6      	bne.n	800cbfe <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	69db      	ldr	r3, [r3, #28]
 800cc36:	f003 0310 	and.w	r3, r3, #16
 800cc3a:	2b10      	cmp	r3, #16
 800cc3c:	d103      	bne.n	800cc46 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2210      	movs	r2, #16
 800cc44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7ff f9d6 	bl	800c000 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cc54:	e00b      	b.n	800cc6e <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7f4 f94c 	bl	8000ef4 <HAL_UART_RxCpltCallback>
}
 800cc5c:	e007      	b.n	800cc6e <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	699a      	ldr	r2, [r3, #24]
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f042 0208 	orr.w	r2, r2, #8
 800cc6c:	619a      	str	r2, [r3, #24]
}
 800cc6e:	bf00      	nop
 800cc70:	3758      	adds	r7, #88	; 0x58
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}

0800cc76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc76:	b480      	push	{r7}
 800cc78:	b083      	sub	sp, #12
 800cc7a:	af00      	add	r7, sp, #0
 800cc7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc7e:	bf00      	nop
 800cc80:	370c      	adds	r7, #12
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
	...

0800cc8c <__errno>:
 800cc8c:	4b01      	ldr	r3, [pc, #4]	; (800cc94 <__errno+0x8>)
 800cc8e:	6818      	ldr	r0, [r3, #0]
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	2000002c 	.word	0x2000002c

0800cc98 <__libc_init_array>:
 800cc98:	b570      	push	{r4, r5, r6, lr}
 800cc9a:	4e0d      	ldr	r6, [pc, #52]	; (800ccd0 <__libc_init_array+0x38>)
 800cc9c:	4c0d      	ldr	r4, [pc, #52]	; (800ccd4 <__libc_init_array+0x3c>)
 800cc9e:	1ba4      	subs	r4, r4, r6
 800cca0:	10a4      	asrs	r4, r4, #2
 800cca2:	2500      	movs	r5, #0
 800cca4:	42a5      	cmp	r5, r4
 800cca6:	d109      	bne.n	800ccbc <__libc_init_array+0x24>
 800cca8:	4e0b      	ldr	r6, [pc, #44]	; (800ccd8 <__libc_init_array+0x40>)
 800ccaa:	4c0c      	ldr	r4, [pc, #48]	; (800ccdc <__libc_init_array+0x44>)
 800ccac:	f001 fc3a 	bl	800e524 <_init>
 800ccb0:	1ba4      	subs	r4, r4, r6
 800ccb2:	10a4      	asrs	r4, r4, #2
 800ccb4:	2500      	movs	r5, #0
 800ccb6:	42a5      	cmp	r5, r4
 800ccb8:	d105      	bne.n	800ccc6 <__libc_init_array+0x2e>
 800ccba:	bd70      	pop	{r4, r5, r6, pc}
 800ccbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ccc0:	4798      	blx	r3
 800ccc2:	3501      	adds	r5, #1
 800ccc4:	e7ee      	b.n	800cca4 <__libc_init_array+0xc>
 800ccc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ccca:	4798      	blx	r3
 800cccc:	3501      	adds	r5, #1
 800ccce:	e7f2      	b.n	800ccb6 <__libc_init_array+0x1e>
 800ccd0:	0800e8e0 	.word	0x0800e8e0
 800ccd4:	0800e8e0 	.word	0x0800e8e0
 800ccd8:	0800e8e0 	.word	0x0800e8e0
 800ccdc:	0800e8e4 	.word	0x0800e8e4

0800cce0 <memset>:
 800cce0:	4402      	add	r2, r0
 800cce2:	4603      	mov	r3, r0
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d100      	bne.n	800ccea <memset+0xa>
 800cce8:	4770      	bx	lr
 800ccea:	f803 1b01 	strb.w	r1, [r3], #1
 800ccee:	e7f9      	b.n	800cce4 <memset+0x4>

0800ccf0 <siprintf>:
 800ccf0:	b40e      	push	{r1, r2, r3}
 800ccf2:	b500      	push	{lr}
 800ccf4:	b09c      	sub	sp, #112	; 0x70
 800ccf6:	ab1d      	add	r3, sp, #116	; 0x74
 800ccf8:	9002      	str	r0, [sp, #8]
 800ccfa:	9006      	str	r0, [sp, #24]
 800ccfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd00:	4809      	ldr	r0, [pc, #36]	; (800cd28 <siprintf+0x38>)
 800cd02:	9107      	str	r1, [sp, #28]
 800cd04:	9104      	str	r1, [sp, #16]
 800cd06:	4909      	ldr	r1, [pc, #36]	; (800cd2c <siprintf+0x3c>)
 800cd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd0c:	9105      	str	r1, [sp, #20]
 800cd0e:	6800      	ldr	r0, [r0, #0]
 800cd10:	9301      	str	r3, [sp, #4]
 800cd12:	a902      	add	r1, sp, #8
 800cd14:	f000 f866 	bl	800cde4 <_svfiprintf_r>
 800cd18:	9b02      	ldr	r3, [sp, #8]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	701a      	strb	r2, [r3, #0]
 800cd1e:	b01c      	add	sp, #112	; 0x70
 800cd20:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd24:	b003      	add	sp, #12
 800cd26:	4770      	bx	lr
 800cd28:	2000002c 	.word	0x2000002c
 800cd2c:	ffff0208 	.word	0xffff0208

0800cd30 <__ssputs_r>:
 800cd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd34:	688e      	ldr	r6, [r1, #8]
 800cd36:	429e      	cmp	r6, r3
 800cd38:	4682      	mov	sl, r0
 800cd3a:	460c      	mov	r4, r1
 800cd3c:	4690      	mov	r8, r2
 800cd3e:	4699      	mov	r9, r3
 800cd40:	d837      	bhi.n	800cdb2 <__ssputs_r+0x82>
 800cd42:	898a      	ldrh	r2, [r1, #12]
 800cd44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cd48:	d031      	beq.n	800cdae <__ssputs_r+0x7e>
 800cd4a:	6825      	ldr	r5, [r4, #0]
 800cd4c:	6909      	ldr	r1, [r1, #16]
 800cd4e:	1a6f      	subs	r7, r5, r1
 800cd50:	6965      	ldr	r5, [r4, #20]
 800cd52:	2302      	movs	r3, #2
 800cd54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd58:	fb95 f5f3 	sdiv	r5, r5, r3
 800cd5c:	f109 0301 	add.w	r3, r9, #1
 800cd60:	443b      	add	r3, r7
 800cd62:	429d      	cmp	r5, r3
 800cd64:	bf38      	it	cc
 800cd66:	461d      	movcc	r5, r3
 800cd68:	0553      	lsls	r3, r2, #21
 800cd6a:	d530      	bpl.n	800cdce <__ssputs_r+0x9e>
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	f000 fb2b 	bl	800d3c8 <_malloc_r>
 800cd72:	4606      	mov	r6, r0
 800cd74:	b950      	cbnz	r0, 800cd8c <__ssputs_r+0x5c>
 800cd76:	230c      	movs	r3, #12
 800cd78:	f8ca 3000 	str.w	r3, [sl]
 800cd7c:	89a3      	ldrh	r3, [r4, #12]
 800cd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd82:	81a3      	strh	r3, [r4, #12]
 800cd84:	f04f 30ff 	mov.w	r0, #4294967295
 800cd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd8c:	463a      	mov	r2, r7
 800cd8e:	6921      	ldr	r1, [r4, #16]
 800cd90:	f000 faa8 	bl	800d2e4 <memcpy>
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd9e:	81a3      	strh	r3, [r4, #12]
 800cda0:	6126      	str	r6, [r4, #16]
 800cda2:	6165      	str	r5, [r4, #20]
 800cda4:	443e      	add	r6, r7
 800cda6:	1bed      	subs	r5, r5, r7
 800cda8:	6026      	str	r6, [r4, #0]
 800cdaa:	60a5      	str	r5, [r4, #8]
 800cdac:	464e      	mov	r6, r9
 800cdae:	454e      	cmp	r6, r9
 800cdb0:	d900      	bls.n	800cdb4 <__ssputs_r+0x84>
 800cdb2:	464e      	mov	r6, r9
 800cdb4:	4632      	mov	r2, r6
 800cdb6:	4641      	mov	r1, r8
 800cdb8:	6820      	ldr	r0, [r4, #0]
 800cdba:	f000 fa9e 	bl	800d2fa <memmove>
 800cdbe:	68a3      	ldr	r3, [r4, #8]
 800cdc0:	1b9b      	subs	r3, r3, r6
 800cdc2:	60a3      	str	r3, [r4, #8]
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	441e      	add	r6, r3
 800cdc8:	6026      	str	r6, [r4, #0]
 800cdca:	2000      	movs	r0, #0
 800cdcc:	e7dc      	b.n	800cd88 <__ssputs_r+0x58>
 800cdce:	462a      	mov	r2, r5
 800cdd0:	f000 fb54 	bl	800d47c <_realloc_r>
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d1e2      	bne.n	800cda0 <__ssputs_r+0x70>
 800cdda:	6921      	ldr	r1, [r4, #16]
 800cddc:	4650      	mov	r0, sl
 800cdde:	f000 faa5 	bl	800d32c <_free_r>
 800cde2:	e7c8      	b.n	800cd76 <__ssputs_r+0x46>

0800cde4 <_svfiprintf_r>:
 800cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde8:	461d      	mov	r5, r3
 800cdea:	898b      	ldrh	r3, [r1, #12]
 800cdec:	061f      	lsls	r7, r3, #24
 800cdee:	b09d      	sub	sp, #116	; 0x74
 800cdf0:	4680      	mov	r8, r0
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	4616      	mov	r6, r2
 800cdf6:	d50f      	bpl.n	800ce18 <_svfiprintf_r+0x34>
 800cdf8:	690b      	ldr	r3, [r1, #16]
 800cdfa:	b96b      	cbnz	r3, 800ce18 <_svfiprintf_r+0x34>
 800cdfc:	2140      	movs	r1, #64	; 0x40
 800cdfe:	f000 fae3 	bl	800d3c8 <_malloc_r>
 800ce02:	6020      	str	r0, [r4, #0]
 800ce04:	6120      	str	r0, [r4, #16]
 800ce06:	b928      	cbnz	r0, 800ce14 <_svfiprintf_r+0x30>
 800ce08:	230c      	movs	r3, #12
 800ce0a:	f8c8 3000 	str.w	r3, [r8]
 800ce0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce12:	e0c8      	b.n	800cfa6 <_svfiprintf_r+0x1c2>
 800ce14:	2340      	movs	r3, #64	; 0x40
 800ce16:	6163      	str	r3, [r4, #20]
 800ce18:	2300      	movs	r3, #0
 800ce1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce1c:	2320      	movs	r3, #32
 800ce1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ce22:	2330      	movs	r3, #48	; 0x30
 800ce24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ce28:	9503      	str	r5, [sp, #12]
 800ce2a:	f04f 0b01 	mov.w	fp, #1
 800ce2e:	4637      	mov	r7, r6
 800ce30:	463d      	mov	r5, r7
 800ce32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ce36:	b10b      	cbz	r3, 800ce3c <_svfiprintf_r+0x58>
 800ce38:	2b25      	cmp	r3, #37	; 0x25
 800ce3a:	d13e      	bne.n	800ceba <_svfiprintf_r+0xd6>
 800ce3c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ce40:	d00b      	beq.n	800ce5a <_svfiprintf_r+0x76>
 800ce42:	4653      	mov	r3, sl
 800ce44:	4632      	mov	r2, r6
 800ce46:	4621      	mov	r1, r4
 800ce48:	4640      	mov	r0, r8
 800ce4a:	f7ff ff71 	bl	800cd30 <__ssputs_r>
 800ce4e:	3001      	adds	r0, #1
 800ce50:	f000 80a4 	beq.w	800cf9c <_svfiprintf_r+0x1b8>
 800ce54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce56:	4453      	add	r3, sl
 800ce58:	9309      	str	r3, [sp, #36]	; 0x24
 800ce5a:	783b      	ldrb	r3, [r7, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 809d 	beq.w	800cf9c <_svfiprintf_r+0x1b8>
 800ce62:	2300      	movs	r3, #0
 800ce64:	f04f 32ff 	mov.w	r2, #4294967295
 800ce68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce6c:	9304      	str	r3, [sp, #16]
 800ce6e:	9307      	str	r3, [sp, #28]
 800ce70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce74:	931a      	str	r3, [sp, #104]	; 0x68
 800ce76:	462f      	mov	r7, r5
 800ce78:	2205      	movs	r2, #5
 800ce7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ce7e:	4850      	ldr	r0, [pc, #320]	; (800cfc0 <_svfiprintf_r+0x1dc>)
 800ce80:	f7f3 f9b6 	bl	80001f0 <memchr>
 800ce84:	9b04      	ldr	r3, [sp, #16]
 800ce86:	b9d0      	cbnz	r0, 800cebe <_svfiprintf_r+0xda>
 800ce88:	06d9      	lsls	r1, r3, #27
 800ce8a:	bf44      	itt	mi
 800ce8c:	2220      	movmi	r2, #32
 800ce8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce92:	071a      	lsls	r2, r3, #28
 800ce94:	bf44      	itt	mi
 800ce96:	222b      	movmi	r2, #43	; 0x2b
 800ce98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ce9c:	782a      	ldrb	r2, [r5, #0]
 800ce9e:	2a2a      	cmp	r2, #42	; 0x2a
 800cea0:	d015      	beq.n	800cece <_svfiprintf_r+0xea>
 800cea2:	9a07      	ldr	r2, [sp, #28]
 800cea4:	462f      	mov	r7, r5
 800cea6:	2000      	movs	r0, #0
 800cea8:	250a      	movs	r5, #10
 800ceaa:	4639      	mov	r1, r7
 800ceac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceb0:	3b30      	subs	r3, #48	; 0x30
 800ceb2:	2b09      	cmp	r3, #9
 800ceb4:	d94d      	bls.n	800cf52 <_svfiprintf_r+0x16e>
 800ceb6:	b1b8      	cbz	r0, 800cee8 <_svfiprintf_r+0x104>
 800ceb8:	e00f      	b.n	800ceda <_svfiprintf_r+0xf6>
 800ceba:	462f      	mov	r7, r5
 800cebc:	e7b8      	b.n	800ce30 <_svfiprintf_r+0x4c>
 800cebe:	4a40      	ldr	r2, [pc, #256]	; (800cfc0 <_svfiprintf_r+0x1dc>)
 800cec0:	1a80      	subs	r0, r0, r2
 800cec2:	fa0b f000 	lsl.w	r0, fp, r0
 800cec6:	4318      	orrs	r0, r3
 800cec8:	9004      	str	r0, [sp, #16]
 800ceca:	463d      	mov	r5, r7
 800cecc:	e7d3      	b.n	800ce76 <_svfiprintf_r+0x92>
 800cece:	9a03      	ldr	r2, [sp, #12]
 800ced0:	1d11      	adds	r1, r2, #4
 800ced2:	6812      	ldr	r2, [r2, #0]
 800ced4:	9103      	str	r1, [sp, #12]
 800ced6:	2a00      	cmp	r2, #0
 800ced8:	db01      	blt.n	800cede <_svfiprintf_r+0xfa>
 800ceda:	9207      	str	r2, [sp, #28]
 800cedc:	e004      	b.n	800cee8 <_svfiprintf_r+0x104>
 800cede:	4252      	negs	r2, r2
 800cee0:	f043 0302 	orr.w	r3, r3, #2
 800cee4:	9207      	str	r2, [sp, #28]
 800cee6:	9304      	str	r3, [sp, #16]
 800cee8:	783b      	ldrb	r3, [r7, #0]
 800ceea:	2b2e      	cmp	r3, #46	; 0x2e
 800ceec:	d10c      	bne.n	800cf08 <_svfiprintf_r+0x124>
 800ceee:	787b      	ldrb	r3, [r7, #1]
 800cef0:	2b2a      	cmp	r3, #42	; 0x2a
 800cef2:	d133      	bne.n	800cf5c <_svfiprintf_r+0x178>
 800cef4:	9b03      	ldr	r3, [sp, #12]
 800cef6:	1d1a      	adds	r2, r3, #4
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	9203      	str	r2, [sp, #12]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	bfb8      	it	lt
 800cf00:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf04:	3702      	adds	r7, #2
 800cf06:	9305      	str	r3, [sp, #20]
 800cf08:	4d2e      	ldr	r5, [pc, #184]	; (800cfc4 <_svfiprintf_r+0x1e0>)
 800cf0a:	7839      	ldrb	r1, [r7, #0]
 800cf0c:	2203      	movs	r2, #3
 800cf0e:	4628      	mov	r0, r5
 800cf10:	f7f3 f96e 	bl	80001f0 <memchr>
 800cf14:	b138      	cbz	r0, 800cf26 <_svfiprintf_r+0x142>
 800cf16:	2340      	movs	r3, #64	; 0x40
 800cf18:	1b40      	subs	r0, r0, r5
 800cf1a:	fa03 f000 	lsl.w	r0, r3, r0
 800cf1e:	9b04      	ldr	r3, [sp, #16]
 800cf20:	4303      	orrs	r3, r0
 800cf22:	3701      	adds	r7, #1
 800cf24:	9304      	str	r3, [sp, #16]
 800cf26:	7839      	ldrb	r1, [r7, #0]
 800cf28:	4827      	ldr	r0, [pc, #156]	; (800cfc8 <_svfiprintf_r+0x1e4>)
 800cf2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cf2e:	2206      	movs	r2, #6
 800cf30:	1c7e      	adds	r6, r7, #1
 800cf32:	f7f3 f95d 	bl	80001f0 <memchr>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	d038      	beq.n	800cfac <_svfiprintf_r+0x1c8>
 800cf3a:	4b24      	ldr	r3, [pc, #144]	; (800cfcc <_svfiprintf_r+0x1e8>)
 800cf3c:	bb13      	cbnz	r3, 800cf84 <_svfiprintf_r+0x1a0>
 800cf3e:	9b03      	ldr	r3, [sp, #12]
 800cf40:	3307      	adds	r3, #7
 800cf42:	f023 0307 	bic.w	r3, r3, #7
 800cf46:	3308      	adds	r3, #8
 800cf48:	9303      	str	r3, [sp, #12]
 800cf4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf4c:	444b      	add	r3, r9
 800cf4e:	9309      	str	r3, [sp, #36]	; 0x24
 800cf50:	e76d      	b.n	800ce2e <_svfiprintf_r+0x4a>
 800cf52:	fb05 3202 	mla	r2, r5, r2, r3
 800cf56:	2001      	movs	r0, #1
 800cf58:	460f      	mov	r7, r1
 800cf5a:	e7a6      	b.n	800ceaa <_svfiprintf_r+0xc6>
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	3701      	adds	r7, #1
 800cf60:	9305      	str	r3, [sp, #20]
 800cf62:	4619      	mov	r1, r3
 800cf64:	250a      	movs	r5, #10
 800cf66:	4638      	mov	r0, r7
 800cf68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf6c:	3a30      	subs	r2, #48	; 0x30
 800cf6e:	2a09      	cmp	r2, #9
 800cf70:	d903      	bls.n	800cf7a <_svfiprintf_r+0x196>
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d0c8      	beq.n	800cf08 <_svfiprintf_r+0x124>
 800cf76:	9105      	str	r1, [sp, #20]
 800cf78:	e7c6      	b.n	800cf08 <_svfiprintf_r+0x124>
 800cf7a:	fb05 2101 	mla	r1, r5, r1, r2
 800cf7e:	2301      	movs	r3, #1
 800cf80:	4607      	mov	r7, r0
 800cf82:	e7f0      	b.n	800cf66 <_svfiprintf_r+0x182>
 800cf84:	ab03      	add	r3, sp, #12
 800cf86:	9300      	str	r3, [sp, #0]
 800cf88:	4622      	mov	r2, r4
 800cf8a:	4b11      	ldr	r3, [pc, #68]	; (800cfd0 <_svfiprintf_r+0x1ec>)
 800cf8c:	a904      	add	r1, sp, #16
 800cf8e:	4640      	mov	r0, r8
 800cf90:	f3af 8000 	nop.w
 800cf94:	f1b0 3fff 	cmp.w	r0, #4294967295
 800cf98:	4681      	mov	r9, r0
 800cf9a:	d1d6      	bne.n	800cf4a <_svfiprintf_r+0x166>
 800cf9c:	89a3      	ldrh	r3, [r4, #12]
 800cf9e:	065b      	lsls	r3, r3, #25
 800cfa0:	f53f af35 	bmi.w	800ce0e <_svfiprintf_r+0x2a>
 800cfa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cfa6:	b01d      	add	sp, #116	; 0x74
 800cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfac:	ab03      	add	r3, sp, #12
 800cfae:	9300      	str	r3, [sp, #0]
 800cfb0:	4622      	mov	r2, r4
 800cfb2:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <_svfiprintf_r+0x1ec>)
 800cfb4:	a904      	add	r1, sp, #16
 800cfb6:	4640      	mov	r0, r8
 800cfb8:	f000 f882 	bl	800d0c0 <_printf_i>
 800cfbc:	e7ea      	b.n	800cf94 <_svfiprintf_r+0x1b0>
 800cfbe:	bf00      	nop
 800cfc0:	0800e6d4 	.word	0x0800e6d4
 800cfc4:	0800e6da 	.word	0x0800e6da
 800cfc8:	0800e6de 	.word	0x0800e6de
 800cfcc:	00000000 	.word	0x00000000
 800cfd0:	0800cd31 	.word	0x0800cd31

0800cfd4 <_printf_common>:
 800cfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfd8:	4691      	mov	r9, r2
 800cfda:	461f      	mov	r7, r3
 800cfdc:	688a      	ldr	r2, [r1, #8]
 800cfde:	690b      	ldr	r3, [r1, #16]
 800cfe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cfe4:	4293      	cmp	r3, r2
 800cfe6:	bfb8      	it	lt
 800cfe8:	4613      	movlt	r3, r2
 800cfea:	f8c9 3000 	str.w	r3, [r9]
 800cfee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cff2:	4606      	mov	r6, r0
 800cff4:	460c      	mov	r4, r1
 800cff6:	b112      	cbz	r2, 800cffe <_printf_common+0x2a>
 800cff8:	3301      	adds	r3, #1
 800cffa:	f8c9 3000 	str.w	r3, [r9]
 800cffe:	6823      	ldr	r3, [r4, #0]
 800d000:	0699      	lsls	r1, r3, #26
 800d002:	bf42      	ittt	mi
 800d004:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d008:	3302      	addmi	r3, #2
 800d00a:	f8c9 3000 	strmi.w	r3, [r9]
 800d00e:	6825      	ldr	r5, [r4, #0]
 800d010:	f015 0506 	ands.w	r5, r5, #6
 800d014:	d107      	bne.n	800d026 <_printf_common+0x52>
 800d016:	f104 0a19 	add.w	sl, r4, #25
 800d01a:	68e3      	ldr	r3, [r4, #12]
 800d01c:	f8d9 2000 	ldr.w	r2, [r9]
 800d020:	1a9b      	subs	r3, r3, r2
 800d022:	42ab      	cmp	r3, r5
 800d024:	dc28      	bgt.n	800d078 <_printf_common+0xa4>
 800d026:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d02a:	6822      	ldr	r2, [r4, #0]
 800d02c:	3300      	adds	r3, #0
 800d02e:	bf18      	it	ne
 800d030:	2301      	movne	r3, #1
 800d032:	0692      	lsls	r2, r2, #26
 800d034:	d42d      	bmi.n	800d092 <_printf_common+0xbe>
 800d036:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d03a:	4639      	mov	r1, r7
 800d03c:	4630      	mov	r0, r6
 800d03e:	47c0      	blx	r8
 800d040:	3001      	adds	r0, #1
 800d042:	d020      	beq.n	800d086 <_printf_common+0xb2>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	68e5      	ldr	r5, [r4, #12]
 800d048:	f8d9 2000 	ldr.w	r2, [r9]
 800d04c:	f003 0306 	and.w	r3, r3, #6
 800d050:	2b04      	cmp	r3, #4
 800d052:	bf08      	it	eq
 800d054:	1aad      	subeq	r5, r5, r2
 800d056:	68a3      	ldr	r3, [r4, #8]
 800d058:	6922      	ldr	r2, [r4, #16]
 800d05a:	bf0c      	ite	eq
 800d05c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d060:	2500      	movne	r5, #0
 800d062:	4293      	cmp	r3, r2
 800d064:	bfc4      	itt	gt
 800d066:	1a9b      	subgt	r3, r3, r2
 800d068:	18ed      	addgt	r5, r5, r3
 800d06a:	f04f 0900 	mov.w	r9, #0
 800d06e:	341a      	adds	r4, #26
 800d070:	454d      	cmp	r5, r9
 800d072:	d11a      	bne.n	800d0aa <_printf_common+0xd6>
 800d074:	2000      	movs	r0, #0
 800d076:	e008      	b.n	800d08a <_printf_common+0xb6>
 800d078:	2301      	movs	r3, #1
 800d07a:	4652      	mov	r2, sl
 800d07c:	4639      	mov	r1, r7
 800d07e:	4630      	mov	r0, r6
 800d080:	47c0      	blx	r8
 800d082:	3001      	adds	r0, #1
 800d084:	d103      	bne.n	800d08e <_printf_common+0xba>
 800d086:	f04f 30ff 	mov.w	r0, #4294967295
 800d08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d08e:	3501      	adds	r5, #1
 800d090:	e7c3      	b.n	800d01a <_printf_common+0x46>
 800d092:	18e1      	adds	r1, r4, r3
 800d094:	1c5a      	adds	r2, r3, #1
 800d096:	2030      	movs	r0, #48	; 0x30
 800d098:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d09c:	4422      	add	r2, r4
 800d09e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0a6:	3302      	adds	r3, #2
 800d0a8:	e7c5      	b.n	800d036 <_printf_common+0x62>
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	4622      	mov	r2, r4
 800d0ae:	4639      	mov	r1, r7
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	47c0      	blx	r8
 800d0b4:	3001      	adds	r0, #1
 800d0b6:	d0e6      	beq.n	800d086 <_printf_common+0xb2>
 800d0b8:	f109 0901 	add.w	r9, r9, #1
 800d0bc:	e7d8      	b.n	800d070 <_printf_common+0x9c>
	...

0800d0c0 <_printf_i>:
 800d0c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d0c8:	460c      	mov	r4, r1
 800d0ca:	7e09      	ldrb	r1, [r1, #24]
 800d0cc:	b085      	sub	sp, #20
 800d0ce:	296e      	cmp	r1, #110	; 0x6e
 800d0d0:	4617      	mov	r7, r2
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	4698      	mov	r8, r3
 800d0d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0d8:	f000 80b3 	beq.w	800d242 <_printf_i+0x182>
 800d0dc:	d822      	bhi.n	800d124 <_printf_i+0x64>
 800d0de:	2963      	cmp	r1, #99	; 0x63
 800d0e0:	d036      	beq.n	800d150 <_printf_i+0x90>
 800d0e2:	d80a      	bhi.n	800d0fa <_printf_i+0x3a>
 800d0e4:	2900      	cmp	r1, #0
 800d0e6:	f000 80b9 	beq.w	800d25c <_printf_i+0x19c>
 800d0ea:	2958      	cmp	r1, #88	; 0x58
 800d0ec:	f000 8083 	beq.w	800d1f6 <_printf_i+0x136>
 800d0f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d0f8:	e032      	b.n	800d160 <_printf_i+0xa0>
 800d0fa:	2964      	cmp	r1, #100	; 0x64
 800d0fc:	d001      	beq.n	800d102 <_printf_i+0x42>
 800d0fe:	2969      	cmp	r1, #105	; 0x69
 800d100:	d1f6      	bne.n	800d0f0 <_printf_i+0x30>
 800d102:	6820      	ldr	r0, [r4, #0]
 800d104:	6813      	ldr	r3, [r2, #0]
 800d106:	0605      	lsls	r5, r0, #24
 800d108:	f103 0104 	add.w	r1, r3, #4
 800d10c:	d52a      	bpl.n	800d164 <_printf_i+0xa4>
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	6011      	str	r1, [r2, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	da03      	bge.n	800d11e <_printf_i+0x5e>
 800d116:	222d      	movs	r2, #45	; 0x2d
 800d118:	425b      	negs	r3, r3
 800d11a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d11e:	486f      	ldr	r0, [pc, #444]	; (800d2dc <_printf_i+0x21c>)
 800d120:	220a      	movs	r2, #10
 800d122:	e039      	b.n	800d198 <_printf_i+0xd8>
 800d124:	2973      	cmp	r1, #115	; 0x73
 800d126:	f000 809d 	beq.w	800d264 <_printf_i+0x1a4>
 800d12a:	d808      	bhi.n	800d13e <_printf_i+0x7e>
 800d12c:	296f      	cmp	r1, #111	; 0x6f
 800d12e:	d020      	beq.n	800d172 <_printf_i+0xb2>
 800d130:	2970      	cmp	r1, #112	; 0x70
 800d132:	d1dd      	bne.n	800d0f0 <_printf_i+0x30>
 800d134:	6823      	ldr	r3, [r4, #0]
 800d136:	f043 0320 	orr.w	r3, r3, #32
 800d13a:	6023      	str	r3, [r4, #0]
 800d13c:	e003      	b.n	800d146 <_printf_i+0x86>
 800d13e:	2975      	cmp	r1, #117	; 0x75
 800d140:	d017      	beq.n	800d172 <_printf_i+0xb2>
 800d142:	2978      	cmp	r1, #120	; 0x78
 800d144:	d1d4      	bne.n	800d0f0 <_printf_i+0x30>
 800d146:	2378      	movs	r3, #120	; 0x78
 800d148:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d14c:	4864      	ldr	r0, [pc, #400]	; (800d2e0 <_printf_i+0x220>)
 800d14e:	e055      	b.n	800d1fc <_printf_i+0x13c>
 800d150:	6813      	ldr	r3, [r2, #0]
 800d152:	1d19      	adds	r1, r3, #4
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6011      	str	r1, [r2, #0]
 800d158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d15c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d160:	2301      	movs	r3, #1
 800d162:	e08c      	b.n	800d27e <_printf_i+0x1be>
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	6011      	str	r1, [r2, #0]
 800d168:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d16c:	bf18      	it	ne
 800d16e:	b21b      	sxthne	r3, r3
 800d170:	e7cf      	b.n	800d112 <_printf_i+0x52>
 800d172:	6813      	ldr	r3, [r2, #0]
 800d174:	6825      	ldr	r5, [r4, #0]
 800d176:	1d18      	adds	r0, r3, #4
 800d178:	6010      	str	r0, [r2, #0]
 800d17a:	0628      	lsls	r0, r5, #24
 800d17c:	d501      	bpl.n	800d182 <_printf_i+0xc2>
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	e002      	b.n	800d188 <_printf_i+0xc8>
 800d182:	0668      	lsls	r0, r5, #25
 800d184:	d5fb      	bpl.n	800d17e <_printf_i+0xbe>
 800d186:	881b      	ldrh	r3, [r3, #0]
 800d188:	4854      	ldr	r0, [pc, #336]	; (800d2dc <_printf_i+0x21c>)
 800d18a:	296f      	cmp	r1, #111	; 0x6f
 800d18c:	bf14      	ite	ne
 800d18e:	220a      	movne	r2, #10
 800d190:	2208      	moveq	r2, #8
 800d192:	2100      	movs	r1, #0
 800d194:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d198:	6865      	ldr	r5, [r4, #4]
 800d19a:	60a5      	str	r5, [r4, #8]
 800d19c:	2d00      	cmp	r5, #0
 800d19e:	f2c0 8095 	blt.w	800d2cc <_printf_i+0x20c>
 800d1a2:	6821      	ldr	r1, [r4, #0]
 800d1a4:	f021 0104 	bic.w	r1, r1, #4
 800d1a8:	6021      	str	r1, [r4, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d13d      	bne.n	800d22a <_printf_i+0x16a>
 800d1ae:	2d00      	cmp	r5, #0
 800d1b0:	f040 808e 	bne.w	800d2d0 <_printf_i+0x210>
 800d1b4:	4665      	mov	r5, ip
 800d1b6:	2a08      	cmp	r2, #8
 800d1b8:	d10b      	bne.n	800d1d2 <_printf_i+0x112>
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	07db      	lsls	r3, r3, #31
 800d1be:	d508      	bpl.n	800d1d2 <_printf_i+0x112>
 800d1c0:	6923      	ldr	r3, [r4, #16]
 800d1c2:	6862      	ldr	r2, [r4, #4]
 800d1c4:	429a      	cmp	r2, r3
 800d1c6:	bfde      	ittt	le
 800d1c8:	2330      	movle	r3, #48	; 0x30
 800d1ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d1d2:	ebac 0305 	sub.w	r3, ip, r5
 800d1d6:	6123      	str	r3, [r4, #16]
 800d1d8:	f8cd 8000 	str.w	r8, [sp]
 800d1dc:	463b      	mov	r3, r7
 800d1de:	aa03      	add	r2, sp, #12
 800d1e0:	4621      	mov	r1, r4
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff fef6 	bl	800cfd4 <_printf_common>
 800d1e8:	3001      	adds	r0, #1
 800d1ea:	d14d      	bne.n	800d288 <_printf_i+0x1c8>
 800d1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f0:	b005      	add	sp, #20
 800d1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1f6:	4839      	ldr	r0, [pc, #228]	; (800d2dc <_printf_i+0x21c>)
 800d1f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d1fc:	6813      	ldr	r3, [r2, #0]
 800d1fe:	6821      	ldr	r1, [r4, #0]
 800d200:	1d1d      	adds	r5, r3, #4
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	6015      	str	r5, [r2, #0]
 800d206:	060a      	lsls	r2, r1, #24
 800d208:	d50b      	bpl.n	800d222 <_printf_i+0x162>
 800d20a:	07ca      	lsls	r2, r1, #31
 800d20c:	bf44      	itt	mi
 800d20e:	f041 0120 	orrmi.w	r1, r1, #32
 800d212:	6021      	strmi	r1, [r4, #0]
 800d214:	b91b      	cbnz	r3, 800d21e <_printf_i+0x15e>
 800d216:	6822      	ldr	r2, [r4, #0]
 800d218:	f022 0220 	bic.w	r2, r2, #32
 800d21c:	6022      	str	r2, [r4, #0]
 800d21e:	2210      	movs	r2, #16
 800d220:	e7b7      	b.n	800d192 <_printf_i+0xd2>
 800d222:	064d      	lsls	r5, r1, #25
 800d224:	bf48      	it	mi
 800d226:	b29b      	uxthmi	r3, r3
 800d228:	e7ef      	b.n	800d20a <_printf_i+0x14a>
 800d22a:	4665      	mov	r5, ip
 800d22c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d230:	fb02 3311 	mls	r3, r2, r1, r3
 800d234:	5cc3      	ldrb	r3, [r0, r3]
 800d236:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d23a:	460b      	mov	r3, r1
 800d23c:	2900      	cmp	r1, #0
 800d23e:	d1f5      	bne.n	800d22c <_printf_i+0x16c>
 800d240:	e7b9      	b.n	800d1b6 <_printf_i+0xf6>
 800d242:	6813      	ldr	r3, [r2, #0]
 800d244:	6825      	ldr	r5, [r4, #0]
 800d246:	6961      	ldr	r1, [r4, #20]
 800d248:	1d18      	adds	r0, r3, #4
 800d24a:	6010      	str	r0, [r2, #0]
 800d24c:	0628      	lsls	r0, r5, #24
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	d501      	bpl.n	800d256 <_printf_i+0x196>
 800d252:	6019      	str	r1, [r3, #0]
 800d254:	e002      	b.n	800d25c <_printf_i+0x19c>
 800d256:	066a      	lsls	r2, r5, #25
 800d258:	d5fb      	bpl.n	800d252 <_printf_i+0x192>
 800d25a:	8019      	strh	r1, [r3, #0]
 800d25c:	2300      	movs	r3, #0
 800d25e:	6123      	str	r3, [r4, #16]
 800d260:	4665      	mov	r5, ip
 800d262:	e7b9      	b.n	800d1d8 <_printf_i+0x118>
 800d264:	6813      	ldr	r3, [r2, #0]
 800d266:	1d19      	adds	r1, r3, #4
 800d268:	6011      	str	r1, [r2, #0]
 800d26a:	681d      	ldr	r5, [r3, #0]
 800d26c:	6862      	ldr	r2, [r4, #4]
 800d26e:	2100      	movs	r1, #0
 800d270:	4628      	mov	r0, r5
 800d272:	f7f2 ffbd 	bl	80001f0 <memchr>
 800d276:	b108      	cbz	r0, 800d27c <_printf_i+0x1bc>
 800d278:	1b40      	subs	r0, r0, r5
 800d27a:	6060      	str	r0, [r4, #4]
 800d27c:	6863      	ldr	r3, [r4, #4]
 800d27e:	6123      	str	r3, [r4, #16]
 800d280:	2300      	movs	r3, #0
 800d282:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d286:	e7a7      	b.n	800d1d8 <_printf_i+0x118>
 800d288:	6923      	ldr	r3, [r4, #16]
 800d28a:	462a      	mov	r2, r5
 800d28c:	4639      	mov	r1, r7
 800d28e:	4630      	mov	r0, r6
 800d290:	47c0      	blx	r8
 800d292:	3001      	adds	r0, #1
 800d294:	d0aa      	beq.n	800d1ec <_printf_i+0x12c>
 800d296:	6823      	ldr	r3, [r4, #0]
 800d298:	079b      	lsls	r3, r3, #30
 800d29a:	d413      	bmi.n	800d2c4 <_printf_i+0x204>
 800d29c:	68e0      	ldr	r0, [r4, #12]
 800d29e:	9b03      	ldr	r3, [sp, #12]
 800d2a0:	4298      	cmp	r0, r3
 800d2a2:	bfb8      	it	lt
 800d2a4:	4618      	movlt	r0, r3
 800d2a6:	e7a3      	b.n	800d1f0 <_printf_i+0x130>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	464a      	mov	r2, r9
 800d2ac:	4639      	mov	r1, r7
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	47c0      	blx	r8
 800d2b2:	3001      	adds	r0, #1
 800d2b4:	d09a      	beq.n	800d1ec <_printf_i+0x12c>
 800d2b6:	3501      	adds	r5, #1
 800d2b8:	68e3      	ldr	r3, [r4, #12]
 800d2ba:	9a03      	ldr	r2, [sp, #12]
 800d2bc:	1a9b      	subs	r3, r3, r2
 800d2be:	42ab      	cmp	r3, r5
 800d2c0:	dcf2      	bgt.n	800d2a8 <_printf_i+0x1e8>
 800d2c2:	e7eb      	b.n	800d29c <_printf_i+0x1dc>
 800d2c4:	2500      	movs	r5, #0
 800d2c6:	f104 0919 	add.w	r9, r4, #25
 800d2ca:	e7f5      	b.n	800d2b8 <_printf_i+0x1f8>
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d1ac      	bne.n	800d22a <_printf_i+0x16a>
 800d2d0:	7803      	ldrb	r3, [r0, #0]
 800d2d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2da:	e76c      	b.n	800d1b6 <_printf_i+0xf6>
 800d2dc:	0800e6e5 	.word	0x0800e6e5
 800d2e0:	0800e6f6 	.word	0x0800e6f6

0800d2e4 <memcpy>:
 800d2e4:	b510      	push	{r4, lr}
 800d2e6:	1e43      	subs	r3, r0, #1
 800d2e8:	440a      	add	r2, r1
 800d2ea:	4291      	cmp	r1, r2
 800d2ec:	d100      	bne.n	800d2f0 <memcpy+0xc>
 800d2ee:	bd10      	pop	{r4, pc}
 800d2f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2f8:	e7f7      	b.n	800d2ea <memcpy+0x6>

0800d2fa <memmove>:
 800d2fa:	4288      	cmp	r0, r1
 800d2fc:	b510      	push	{r4, lr}
 800d2fe:	eb01 0302 	add.w	r3, r1, r2
 800d302:	d807      	bhi.n	800d314 <memmove+0x1a>
 800d304:	1e42      	subs	r2, r0, #1
 800d306:	4299      	cmp	r1, r3
 800d308:	d00a      	beq.n	800d320 <memmove+0x26>
 800d30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d30e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d312:	e7f8      	b.n	800d306 <memmove+0xc>
 800d314:	4283      	cmp	r3, r0
 800d316:	d9f5      	bls.n	800d304 <memmove+0xa>
 800d318:	1881      	adds	r1, r0, r2
 800d31a:	1ad2      	subs	r2, r2, r3
 800d31c:	42d3      	cmn	r3, r2
 800d31e:	d100      	bne.n	800d322 <memmove+0x28>
 800d320:	bd10      	pop	{r4, pc}
 800d322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d326:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d32a:	e7f7      	b.n	800d31c <memmove+0x22>

0800d32c <_free_r>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4605      	mov	r5, r0
 800d330:	2900      	cmp	r1, #0
 800d332:	d045      	beq.n	800d3c0 <_free_r+0x94>
 800d334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d338:	1f0c      	subs	r4, r1, #4
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	bfb8      	it	lt
 800d33e:	18e4      	addlt	r4, r4, r3
 800d340:	f000 f8d2 	bl	800d4e8 <__malloc_lock>
 800d344:	4a1f      	ldr	r2, [pc, #124]	; (800d3c4 <_free_r+0x98>)
 800d346:	6813      	ldr	r3, [r2, #0]
 800d348:	4610      	mov	r0, r2
 800d34a:	b933      	cbnz	r3, 800d35a <_free_r+0x2e>
 800d34c:	6063      	str	r3, [r4, #4]
 800d34e:	6014      	str	r4, [r2, #0]
 800d350:	4628      	mov	r0, r5
 800d352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d356:	f000 b8c8 	b.w	800d4ea <__malloc_unlock>
 800d35a:	42a3      	cmp	r3, r4
 800d35c:	d90c      	bls.n	800d378 <_free_r+0x4c>
 800d35e:	6821      	ldr	r1, [r4, #0]
 800d360:	1862      	adds	r2, r4, r1
 800d362:	4293      	cmp	r3, r2
 800d364:	bf04      	itt	eq
 800d366:	681a      	ldreq	r2, [r3, #0]
 800d368:	685b      	ldreq	r3, [r3, #4]
 800d36a:	6063      	str	r3, [r4, #4]
 800d36c:	bf04      	itt	eq
 800d36e:	1852      	addeq	r2, r2, r1
 800d370:	6022      	streq	r2, [r4, #0]
 800d372:	6004      	str	r4, [r0, #0]
 800d374:	e7ec      	b.n	800d350 <_free_r+0x24>
 800d376:	4613      	mov	r3, r2
 800d378:	685a      	ldr	r2, [r3, #4]
 800d37a:	b10a      	cbz	r2, 800d380 <_free_r+0x54>
 800d37c:	42a2      	cmp	r2, r4
 800d37e:	d9fa      	bls.n	800d376 <_free_r+0x4a>
 800d380:	6819      	ldr	r1, [r3, #0]
 800d382:	1858      	adds	r0, r3, r1
 800d384:	42a0      	cmp	r0, r4
 800d386:	d10b      	bne.n	800d3a0 <_free_r+0x74>
 800d388:	6820      	ldr	r0, [r4, #0]
 800d38a:	4401      	add	r1, r0
 800d38c:	1858      	adds	r0, r3, r1
 800d38e:	4282      	cmp	r2, r0
 800d390:	6019      	str	r1, [r3, #0]
 800d392:	d1dd      	bne.n	800d350 <_free_r+0x24>
 800d394:	6810      	ldr	r0, [r2, #0]
 800d396:	6852      	ldr	r2, [r2, #4]
 800d398:	605a      	str	r2, [r3, #4]
 800d39a:	4401      	add	r1, r0
 800d39c:	6019      	str	r1, [r3, #0]
 800d39e:	e7d7      	b.n	800d350 <_free_r+0x24>
 800d3a0:	d902      	bls.n	800d3a8 <_free_r+0x7c>
 800d3a2:	230c      	movs	r3, #12
 800d3a4:	602b      	str	r3, [r5, #0]
 800d3a6:	e7d3      	b.n	800d350 <_free_r+0x24>
 800d3a8:	6820      	ldr	r0, [r4, #0]
 800d3aa:	1821      	adds	r1, r4, r0
 800d3ac:	428a      	cmp	r2, r1
 800d3ae:	bf04      	itt	eq
 800d3b0:	6811      	ldreq	r1, [r2, #0]
 800d3b2:	6852      	ldreq	r2, [r2, #4]
 800d3b4:	6062      	str	r2, [r4, #4]
 800d3b6:	bf04      	itt	eq
 800d3b8:	1809      	addeq	r1, r1, r0
 800d3ba:	6021      	streq	r1, [r4, #0]
 800d3bc:	605c      	str	r4, [r3, #4]
 800d3be:	e7c7      	b.n	800d350 <_free_r+0x24>
 800d3c0:	bd38      	pop	{r3, r4, r5, pc}
 800d3c2:	bf00      	nop
 800d3c4:	200000d8 	.word	0x200000d8

0800d3c8 <_malloc_r>:
 800d3c8:	b570      	push	{r4, r5, r6, lr}
 800d3ca:	1ccd      	adds	r5, r1, #3
 800d3cc:	f025 0503 	bic.w	r5, r5, #3
 800d3d0:	3508      	adds	r5, #8
 800d3d2:	2d0c      	cmp	r5, #12
 800d3d4:	bf38      	it	cc
 800d3d6:	250c      	movcc	r5, #12
 800d3d8:	2d00      	cmp	r5, #0
 800d3da:	4606      	mov	r6, r0
 800d3dc:	db01      	blt.n	800d3e2 <_malloc_r+0x1a>
 800d3de:	42a9      	cmp	r1, r5
 800d3e0:	d903      	bls.n	800d3ea <_malloc_r+0x22>
 800d3e2:	230c      	movs	r3, #12
 800d3e4:	6033      	str	r3, [r6, #0]
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	bd70      	pop	{r4, r5, r6, pc}
 800d3ea:	f000 f87d 	bl	800d4e8 <__malloc_lock>
 800d3ee:	4a21      	ldr	r2, [pc, #132]	; (800d474 <_malloc_r+0xac>)
 800d3f0:	6814      	ldr	r4, [r2, #0]
 800d3f2:	4621      	mov	r1, r4
 800d3f4:	b991      	cbnz	r1, 800d41c <_malloc_r+0x54>
 800d3f6:	4c20      	ldr	r4, [pc, #128]	; (800d478 <_malloc_r+0xb0>)
 800d3f8:	6823      	ldr	r3, [r4, #0]
 800d3fa:	b91b      	cbnz	r3, 800d404 <_malloc_r+0x3c>
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f000 f863 	bl	800d4c8 <_sbrk_r>
 800d402:	6020      	str	r0, [r4, #0]
 800d404:	4629      	mov	r1, r5
 800d406:	4630      	mov	r0, r6
 800d408:	f000 f85e 	bl	800d4c8 <_sbrk_r>
 800d40c:	1c43      	adds	r3, r0, #1
 800d40e:	d124      	bne.n	800d45a <_malloc_r+0x92>
 800d410:	230c      	movs	r3, #12
 800d412:	6033      	str	r3, [r6, #0]
 800d414:	4630      	mov	r0, r6
 800d416:	f000 f868 	bl	800d4ea <__malloc_unlock>
 800d41a:	e7e4      	b.n	800d3e6 <_malloc_r+0x1e>
 800d41c:	680b      	ldr	r3, [r1, #0]
 800d41e:	1b5b      	subs	r3, r3, r5
 800d420:	d418      	bmi.n	800d454 <_malloc_r+0x8c>
 800d422:	2b0b      	cmp	r3, #11
 800d424:	d90f      	bls.n	800d446 <_malloc_r+0x7e>
 800d426:	600b      	str	r3, [r1, #0]
 800d428:	50cd      	str	r5, [r1, r3]
 800d42a:	18cc      	adds	r4, r1, r3
 800d42c:	4630      	mov	r0, r6
 800d42e:	f000 f85c 	bl	800d4ea <__malloc_unlock>
 800d432:	f104 000b 	add.w	r0, r4, #11
 800d436:	1d23      	adds	r3, r4, #4
 800d438:	f020 0007 	bic.w	r0, r0, #7
 800d43c:	1ac3      	subs	r3, r0, r3
 800d43e:	d0d3      	beq.n	800d3e8 <_malloc_r+0x20>
 800d440:	425a      	negs	r2, r3
 800d442:	50e2      	str	r2, [r4, r3]
 800d444:	e7d0      	b.n	800d3e8 <_malloc_r+0x20>
 800d446:	428c      	cmp	r4, r1
 800d448:	684b      	ldr	r3, [r1, #4]
 800d44a:	bf16      	itet	ne
 800d44c:	6063      	strne	r3, [r4, #4]
 800d44e:	6013      	streq	r3, [r2, #0]
 800d450:	460c      	movne	r4, r1
 800d452:	e7eb      	b.n	800d42c <_malloc_r+0x64>
 800d454:	460c      	mov	r4, r1
 800d456:	6849      	ldr	r1, [r1, #4]
 800d458:	e7cc      	b.n	800d3f4 <_malloc_r+0x2c>
 800d45a:	1cc4      	adds	r4, r0, #3
 800d45c:	f024 0403 	bic.w	r4, r4, #3
 800d460:	42a0      	cmp	r0, r4
 800d462:	d005      	beq.n	800d470 <_malloc_r+0xa8>
 800d464:	1a21      	subs	r1, r4, r0
 800d466:	4630      	mov	r0, r6
 800d468:	f000 f82e 	bl	800d4c8 <_sbrk_r>
 800d46c:	3001      	adds	r0, #1
 800d46e:	d0cf      	beq.n	800d410 <_malloc_r+0x48>
 800d470:	6025      	str	r5, [r4, #0]
 800d472:	e7db      	b.n	800d42c <_malloc_r+0x64>
 800d474:	200000d8 	.word	0x200000d8
 800d478:	200000dc 	.word	0x200000dc

0800d47c <_realloc_r>:
 800d47c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d47e:	4607      	mov	r7, r0
 800d480:	4614      	mov	r4, r2
 800d482:	460e      	mov	r6, r1
 800d484:	b921      	cbnz	r1, 800d490 <_realloc_r+0x14>
 800d486:	4611      	mov	r1, r2
 800d488:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d48c:	f7ff bf9c 	b.w	800d3c8 <_malloc_r>
 800d490:	b922      	cbnz	r2, 800d49c <_realloc_r+0x20>
 800d492:	f7ff ff4b 	bl	800d32c <_free_r>
 800d496:	4625      	mov	r5, r4
 800d498:	4628      	mov	r0, r5
 800d49a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d49c:	f000 f826 	bl	800d4ec <_malloc_usable_size_r>
 800d4a0:	42a0      	cmp	r0, r4
 800d4a2:	d20f      	bcs.n	800d4c4 <_realloc_r+0x48>
 800d4a4:	4621      	mov	r1, r4
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	f7ff ff8e 	bl	800d3c8 <_malloc_r>
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	2800      	cmp	r0, #0
 800d4b0:	d0f2      	beq.n	800d498 <_realloc_r+0x1c>
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	4622      	mov	r2, r4
 800d4b6:	f7ff ff15 	bl	800d2e4 <memcpy>
 800d4ba:	4631      	mov	r1, r6
 800d4bc:	4638      	mov	r0, r7
 800d4be:	f7ff ff35 	bl	800d32c <_free_r>
 800d4c2:	e7e9      	b.n	800d498 <_realloc_r+0x1c>
 800d4c4:	4635      	mov	r5, r6
 800d4c6:	e7e7      	b.n	800d498 <_realloc_r+0x1c>

0800d4c8 <_sbrk_r>:
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4c06      	ldr	r4, [pc, #24]	; (800d4e4 <_sbrk_r+0x1c>)
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	4605      	mov	r5, r0
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	6023      	str	r3, [r4, #0]
 800d4d4:	f7f8 fdbe 	bl	8006054 <_sbrk>
 800d4d8:	1c43      	adds	r3, r0, #1
 800d4da:	d102      	bne.n	800d4e2 <_sbrk_r+0x1a>
 800d4dc:	6823      	ldr	r3, [r4, #0]
 800d4de:	b103      	cbz	r3, 800d4e2 <_sbrk_r+0x1a>
 800d4e0:	602b      	str	r3, [r5, #0]
 800d4e2:	bd38      	pop	{r3, r4, r5, pc}
 800d4e4:	20001694 	.word	0x20001694

0800d4e8 <__malloc_lock>:
 800d4e8:	4770      	bx	lr

0800d4ea <__malloc_unlock>:
 800d4ea:	4770      	bx	lr

0800d4ec <_malloc_usable_size_r>:
 800d4ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4f0:	1f18      	subs	r0, r3, #4
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	bfbc      	itt	lt
 800d4f6:	580b      	ldrlt	r3, [r1, r0]
 800d4f8:	18c0      	addlt	r0, r0, r3
 800d4fa:	4770      	bx	lr
 800d4fc:	0000      	movs	r0, r0
	...

0800d500 <sin>:
 800d500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d502:	ec51 0b10 	vmov	r0, r1, d0
 800d506:	4a20      	ldr	r2, [pc, #128]	; (800d588 <sin+0x88>)
 800d508:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d50c:	4293      	cmp	r3, r2
 800d50e:	dc07      	bgt.n	800d520 <sin+0x20>
 800d510:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800d580 <sin+0x80>
 800d514:	2000      	movs	r0, #0
 800d516:	f000 fe37 	bl	800e188 <__kernel_sin>
 800d51a:	ec51 0b10 	vmov	r0, r1, d0
 800d51e:	e007      	b.n	800d530 <sin+0x30>
 800d520:	4a1a      	ldr	r2, [pc, #104]	; (800d58c <sin+0x8c>)
 800d522:	4293      	cmp	r3, r2
 800d524:	dd09      	ble.n	800d53a <sin+0x3a>
 800d526:	ee10 2a10 	vmov	r2, s0
 800d52a:	460b      	mov	r3, r1
 800d52c:	f7f2 feb4 	bl	8000298 <__aeabi_dsub>
 800d530:	ec41 0b10 	vmov	d0, r0, r1
 800d534:	b005      	add	sp, #20
 800d536:	f85d fb04 	ldr.w	pc, [sp], #4
 800d53a:	4668      	mov	r0, sp
 800d53c:	f000 f828 	bl	800d590 <__ieee754_rem_pio2>
 800d540:	f000 0003 	and.w	r0, r0, #3
 800d544:	2801      	cmp	r0, #1
 800d546:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d54a:	ed9d 0b00 	vldr	d0, [sp]
 800d54e:	d004      	beq.n	800d55a <sin+0x5a>
 800d550:	2802      	cmp	r0, #2
 800d552:	d005      	beq.n	800d560 <sin+0x60>
 800d554:	b970      	cbnz	r0, 800d574 <sin+0x74>
 800d556:	2001      	movs	r0, #1
 800d558:	e7dd      	b.n	800d516 <sin+0x16>
 800d55a:	f000 fa0d 	bl	800d978 <__kernel_cos>
 800d55e:	e7dc      	b.n	800d51a <sin+0x1a>
 800d560:	2001      	movs	r0, #1
 800d562:	f000 fe11 	bl	800e188 <__kernel_sin>
 800d566:	ec53 2b10 	vmov	r2, r3, d0
 800d56a:	ee10 0a10 	vmov	r0, s0
 800d56e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d572:	e7dd      	b.n	800d530 <sin+0x30>
 800d574:	f000 fa00 	bl	800d978 <__kernel_cos>
 800d578:	e7f5      	b.n	800d566 <sin+0x66>
 800d57a:	bf00      	nop
 800d57c:	f3af 8000 	nop.w
	...
 800d588:	3fe921fb 	.word	0x3fe921fb
 800d58c:	7fefffff 	.word	0x7fefffff

0800d590 <__ieee754_rem_pio2>:
 800d590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d594:	ec57 6b10 	vmov	r6, r7, d0
 800d598:	4bc3      	ldr	r3, [pc, #780]	; (800d8a8 <__ieee754_rem_pio2+0x318>)
 800d59a:	b08d      	sub	sp, #52	; 0x34
 800d59c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d5a0:	4598      	cmp	r8, r3
 800d5a2:	4604      	mov	r4, r0
 800d5a4:	9704      	str	r7, [sp, #16]
 800d5a6:	dc07      	bgt.n	800d5b8 <__ieee754_rem_pio2+0x28>
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	ed84 0b00 	vstr	d0, [r4]
 800d5b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d5b4:	2500      	movs	r5, #0
 800d5b6:	e027      	b.n	800d608 <__ieee754_rem_pio2+0x78>
 800d5b8:	4bbc      	ldr	r3, [pc, #752]	; (800d8ac <__ieee754_rem_pio2+0x31c>)
 800d5ba:	4598      	cmp	r8, r3
 800d5bc:	dc75      	bgt.n	800d6aa <__ieee754_rem_pio2+0x11a>
 800d5be:	9b04      	ldr	r3, [sp, #16]
 800d5c0:	4dbb      	ldr	r5, [pc, #748]	; (800d8b0 <__ieee754_rem_pio2+0x320>)
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	ee10 0a10 	vmov	r0, s0
 800d5c8:	a3a9      	add	r3, pc, #676	; (adr r3, 800d870 <__ieee754_rem_pio2+0x2e0>)
 800d5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ce:	4639      	mov	r1, r7
 800d5d0:	dd36      	ble.n	800d640 <__ieee754_rem_pio2+0xb0>
 800d5d2:	f7f2 fe61 	bl	8000298 <__aeabi_dsub>
 800d5d6:	45a8      	cmp	r8, r5
 800d5d8:	4606      	mov	r6, r0
 800d5da:	460f      	mov	r7, r1
 800d5dc:	d018      	beq.n	800d610 <__ieee754_rem_pio2+0x80>
 800d5de:	a3a6      	add	r3, pc, #664	; (adr r3, 800d878 <__ieee754_rem_pio2+0x2e8>)
 800d5e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5e4:	f7f2 fe58 	bl	8000298 <__aeabi_dsub>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	e9c4 2300 	strd	r2, r3, [r4]
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	4639      	mov	r1, r7
 800d5f4:	f7f2 fe50 	bl	8000298 <__aeabi_dsub>
 800d5f8:	a39f      	add	r3, pc, #636	; (adr r3, 800d878 <__ieee754_rem_pio2+0x2e8>)
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	f7f2 fe4b 	bl	8000298 <__aeabi_dsub>
 800d602:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d606:	2501      	movs	r5, #1
 800d608:	4628      	mov	r0, r5
 800d60a:	b00d      	add	sp, #52	; 0x34
 800d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d610:	a39b      	add	r3, pc, #620	; (adr r3, 800d880 <__ieee754_rem_pio2+0x2f0>)
 800d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d616:	f7f2 fe3f 	bl	8000298 <__aeabi_dsub>
 800d61a:	a39b      	add	r3, pc, #620	; (adr r3, 800d888 <__ieee754_rem_pio2+0x2f8>)
 800d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d620:	4606      	mov	r6, r0
 800d622:	460f      	mov	r7, r1
 800d624:	f7f2 fe38 	bl	8000298 <__aeabi_dsub>
 800d628:	4602      	mov	r2, r0
 800d62a:	460b      	mov	r3, r1
 800d62c:	e9c4 2300 	strd	r2, r3, [r4]
 800d630:	4630      	mov	r0, r6
 800d632:	4639      	mov	r1, r7
 800d634:	f7f2 fe30 	bl	8000298 <__aeabi_dsub>
 800d638:	a393      	add	r3, pc, #588	; (adr r3, 800d888 <__ieee754_rem_pio2+0x2f8>)
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	e7de      	b.n	800d5fe <__ieee754_rem_pio2+0x6e>
 800d640:	f7f2 fe2c 	bl	800029c <__adddf3>
 800d644:	45a8      	cmp	r8, r5
 800d646:	4606      	mov	r6, r0
 800d648:	460f      	mov	r7, r1
 800d64a:	d016      	beq.n	800d67a <__ieee754_rem_pio2+0xea>
 800d64c:	a38a      	add	r3, pc, #552	; (adr r3, 800d878 <__ieee754_rem_pio2+0x2e8>)
 800d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d652:	f7f2 fe23 	bl	800029c <__adddf3>
 800d656:	4602      	mov	r2, r0
 800d658:	460b      	mov	r3, r1
 800d65a:	e9c4 2300 	strd	r2, r3, [r4]
 800d65e:	4630      	mov	r0, r6
 800d660:	4639      	mov	r1, r7
 800d662:	f7f2 fe19 	bl	8000298 <__aeabi_dsub>
 800d666:	a384      	add	r3, pc, #528	; (adr r3, 800d878 <__ieee754_rem_pio2+0x2e8>)
 800d668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d66c:	f7f2 fe16 	bl	800029c <__adddf3>
 800d670:	f04f 35ff 	mov.w	r5, #4294967295
 800d674:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d678:	e7c6      	b.n	800d608 <__ieee754_rem_pio2+0x78>
 800d67a:	a381      	add	r3, pc, #516	; (adr r3, 800d880 <__ieee754_rem_pio2+0x2f0>)
 800d67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d680:	f7f2 fe0c 	bl	800029c <__adddf3>
 800d684:	a380      	add	r3, pc, #512	; (adr r3, 800d888 <__ieee754_rem_pio2+0x2f8>)
 800d686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d68a:	4606      	mov	r6, r0
 800d68c:	460f      	mov	r7, r1
 800d68e:	f7f2 fe05 	bl	800029c <__adddf3>
 800d692:	4602      	mov	r2, r0
 800d694:	460b      	mov	r3, r1
 800d696:	e9c4 2300 	strd	r2, r3, [r4]
 800d69a:	4630      	mov	r0, r6
 800d69c:	4639      	mov	r1, r7
 800d69e:	f7f2 fdfb 	bl	8000298 <__aeabi_dsub>
 800d6a2:	a379      	add	r3, pc, #484	; (adr r3, 800d888 <__ieee754_rem_pio2+0x2f8>)
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	e7e0      	b.n	800d66c <__ieee754_rem_pio2+0xdc>
 800d6aa:	4b82      	ldr	r3, [pc, #520]	; (800d8b4 <__ieee754_rem_pio2+0x324>)
 800d6ac:	4598      	cmp	r8, r3
 800d6ae:	f300 80d0 	bgt.w	800d852 <__ieee754_rem_pio2+0x2c2>
 800d6b2:	f000 fe23 	bl	800e2fc <fabs>
 800d6b6:	ec57 6b10 	vmov	r6, r7, d0
 800d6ba:	ee10 0a10 	vmov	r0, s0
 800d6be:	a374      	add	r3, pc, #464	; (adr r3, 800d890 <__ieee754_rem_pio2+0x300>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	f7f2 ff9f 	bl	8000608 <__aeabi_dmul>
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	4b7a      	ldr	r3, [pc, #488]	; (800d8b8 <__ieee754_rem_pio2+0x328>)
 800d6ce:	f7f2 fde5 	bl	800029c <__adddf3>
 800d6d2:	f7f3 fa33 	bl	8000b3c <__aeabi_d2iz>
 800d6d6:	4605      	mov	r5, r0
 800d6d8:	f7f2 ff2c 	bl	8000534 <__aeabi_i2d>
 800d6dc:	a364      	add	r3, pc, #400	; (adr r3, 800d870 <__ieee754_rem_pio2+0x2e0>)
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d6e6:	f7f2 ff8f 	bl	8000608 <__aeabi_dmul>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	4639      	mov	r1, r7
 800d6f2:	f7f2 fdd1 	bl	8000298 <__aeabi_dsub>
 800d6f6:	a360      	add	r3, pc, #384	; (adr r3, 800d878 <__ieee754_rem_pio2+0x2e8>)
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	4682      	mov	sl, r0
 800d6fe:	468b      	mov	fp, r1
 800d700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d704:	f7f2 ff80 	bl	8000608 <__aeabi_dmul>
 800d708:	2d1f      	cmp	r5, #31
 800d70a:	4606      	mov	r6, r0
 800d70c:	460f      	mov	r7, r1
 800d70e:	dc0c      	bgt.n	800d72a <__ieee754_rem_pio2+0x19a>
 800d710:	1e6a      	subs	r2, r5, #1
 800d712:	4b6a      	ldr	r3, [pc, #424]	; (800d8bc <__ieee754_rem_pio2+0x32c>)
 800d714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d718:	4543      	cmp	r3, r8
 800d71a:	d006      	beq.n	800d72a <__ieee754_rem_pio2+0x19a>
 800d71c:	4632      	mov	r2, r6
 800d71e:	463b      	mov	r3, r7
 800d720:	4650      	mov	r0, sl
 800d722:	4659      	mov	r1, fp
 800d724:	f7f2 fdb8 	bl	8000298 <__aeabi_dsub>
 800d728:	e00e      	b.n	800d748 <__ieee754_rem_pio2+0x1b8>
 800d72a:	4632      	mov	r2, r6
 800d72c:	463b      	mov	r3, r7
 800d72e:	4650      	mov	r0, sl
 800d730:	4659      	mov	r1, fp
 800d732:	f7f2 fdb1 	bl	8000298 <__aeabi_dsub>
 800d736:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d73a:	9305      	str	r3, [sp, #20]
 800d73c:	9a05      	ldr	r2, [sp, #20]
 800d73e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	2b10      	cmp	r3, #16
 800d746:	dc02      	bgt.n	800d74e <__ieee754_rem_pio2+0x1be>
 800d748:	e9c4 0100 	strd	r0, r1, [r4]
 800d74c:	e039      	b.n	800d7c2 <__ieee754_rem_pio2+0x232>
 800d74e:	a34c      	add	r3, pc, #304	; (adr r3, 800d880 <__ieee754_rem_pio2+0x2f0>)
 800d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d754:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d758:	f7f2 ff56 	bl	8000608 <__aeabi_dmul>
 800d75c:	4606      	mov	r6, r0
 800d75e:	460f      	mov	r7, r1
 800d760:	4602      	mov	r2, r0
 800d762:	460b      	mov	r3, r1
 800d764:	4650      	mov	r0, sl
 800d766:	4659      	mov	r1, fp
 800d768:	f7f2 fd96 	bl	8000298 <__aeabi_dsub>
 800d76c:	4602      	mov	r2, r0
 800d76e:	460b      	mov	r3, r1
 800d770:	4680      	mov	r8, r0
 800d772:	4689      	mov	r9, r1
 800d774:	4650      	mov	r0, sl
 800d776:	4659      	mov	r1, fp
 800d778:	f7f2 fd8e 	bl	8000298 <__aeabi_dsub>
 800d77c:	4632      	mov	r2, r6
 800d77e:	463b      	mov	r3, r7
 800d780:	f7f2 fd8a 	bl	8000298 <__aeabi_dsub>
 800d784:	a340      	add	r3, pc, #256	; (adr r3, 800d888 <__ieee754_rem_pio2+0x2f8>)
 800d786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d78a:	4606      	mov	r6, r0
 800d78c:	460f      	mov	r7, r1
 800d78e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d792:	f7f2 ff39 	bl	8000608 <__aeabi_dmul>
 800d796:	4632      	mov	r2, r6
 800d798:	463b      	mov	r3, r7
 800d79a:	f7f2 fd7d 	bl	8000298 <__aeabi_dsub>
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	4606      	mov	r6, r0
 800d7a4:	460f      	mov	r7, r1
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	4649      	mov	r1, r9
 800d7aa:	f7f2 fd75 	bl	8000298 <__aeabi_dsub>
 800d7ae:	9a05      	ldr	r2, [sp, #20]
 800d7b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d7b4:	1ad3      	subs	r3, r2, r3
 800d7b6:	2b31      	cmp	r3, #49	; 0x31
 800d7b8:	dc20      	bgt.n	800d7fc <__ieee754_rem_pio2+0x26c>
 800d7ba:	e9c4 0100 	strd	r0, r1, [r4]
 800d7be:	46c2      	mov	sl, r8
 800d7c0:	46cb      	mov	fp, r9
 800d7c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d7c6:	4650      	mov	r0, sl
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	464b      	mov	r3, r9
 800d7cc:	4659      	mov	r1, fp
 800d7ce:	f7f2 fd63 	bl	8000298 <__aeabi_dsub>
 800d7d2:	463b      	mov	r3, r7
 800d7d4:	4632      	mov	r2, r6
 800d7d6:	f7f2 fd5f 	bl	8000298 <__aeabi_dsub>
 800d7da:	9b04      	ldr	r3, [sp, #16]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d7e2:	f6bf af11 	bge.w	800d608 <__ieee754_rem_pio2+0x78>
 800d7e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d7ea:	6063      	str	r3, [r4, #4]
 800d7ec:	f8c4 8000 	str.w	r8, [r4]
 800d7f0:	60a0      	str	r0, [r4, #8]
 800d7f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d7f6:	60e3      	str	r3, [r4, #12]
 800d7f8:	426d      	negs	r5, r5
 800d7fa:	e705      	b.n	800d608 <__ieee754_rem_pio2+0x78>
 800d7fc:	a326      	add	r3, pc, #152	; (adr r3, 800d898 <__ieee754_rem_pio2+0x308>)
 800d7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d806:	f7f2 feff 	bl	8000608 <__aeabi_dmul>
 800d80a:	4606      	mov	r6, r0
 800d80c:	460f      	mov	r7, r1
 800d80e:	4602      	mov	r2, r0
 800d810:	460b      	mov	r3, r1
 800d812:	4640      	mov	r0, r8
 800d814:	4649      	mov	r1, r9
 800d816:	f7f2 fd3f 	bl	8000298 <__aeabi_dsub>
 800d81a:	4602      	mov	r2, r0
 800d81c:	460b      	mov	r3, r1
 800d81e:	4682      	mov	sl, r0
 800d820:	468b      	mov	fp, r1
 800d822:	4640      	mov	r0, r8
 800d824:	4649      	mov	r1, r9
 800d826:	f7f2 fd37 	bl	8000298 <__aeabi_dsub>
 800d82a:	4632      	mov	r2, r6
 800d82c:	463b      	mov	r3, r7
 800d82e:	f7f2 fd33 	bl	8000298 <__aeabi_dsub>
 800d832:	a31b      	add	r3, pc, #108	; (adr r3, 800d8a0 <__ieee754_rem_pio2+0x310>)
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	4606      	mov	r6, r0
 800d83a:	460f      	mov	r7, r1
 800d83c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d840:	f7f2 fee2 	bl	8000608 <__aeabi_dmul>
 800d844:	4632      	mov	r2, r6
 800d846:	463b      	mov	r3, r7
 800d848:	f7f2 fd26 	bl	8000298 <__aeabi_dsub>
 800d84c:	4606      	mov	r6, r0
 800d84e:	460f      	mov	r7, r1
 800d850:	e764      	b.n	800d71c <__ieee754_rem_pio2+0x18c>
 800d852:	4b1b      	ldr	r3, [pc, #108]	; (800d8c0 <__ieee754_rem_pio2+0x330>)
 800d854:	4598      	cmp	r8, r3
 800d856:	dd35      	ble.n	800d8c4 <__ieee754_rem_pio2+0x334>
 800d858:	ee10 2a10 	vmov	r2, s0
 800d85c:	463b      	mov	r3, r7
 800d85e:	4630      	mov	r0, r6
 800d860:	4639      	mov	r1, r7
 800d862:	f7f2 fd19 	bl	8000298 <__aeabi_dsub>
 800d866:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d86a:	e9c4 0100 	strd	r0, r1, [r4]
 800d86e:	e6a1      	b.n	800d5b4 <__ieee754_rem_pio2+0x24>
 800d870:	54400000 	.word	0x54400000
 800d874:	3ff921fb 	.word	0x3ff921fb
 800d878:	1a626331 	.word	0x1a626331
 800d87c:	3dd0b461 	.word	0x3dd0b461
 800d880:	1a600000 	.word	0x1a600000
 800d884:	3dd0b461 	.word	0x3dd0b461
 800d888:	2e037073 	.word	0x2e037073
 800d88c:	3ba3198a 	.word	0x3ba3198a
 800d890:	6dc9c883 	.word	0x6dc9c883
 800d894:	3fe45f30 	.word	0x3fe45f30
 800d898:	2e000000 	.word	0x2e000000
 800d89c:	3ba3198a 	.word	0x3ba3198a
 800d8a0:	252049c1 	.word	0x252049c1
 800d8a4:	397b839a 	.word	0x397b839a
 800d8a8:	3fe921fb 	.word	0x3fe921fb
 800d8ac:	4002d97b 	.word	0x4002d97b
 800d8b0:	3ff921fb 	.word	0x3ff921fb
 800d8b4:	413921fb 	.word	0x413921fb
 800d8b8:	3fe00000 	.word	0x3fe00000
 800d8bc:	0800e708 	.word	0x0800e708
 800d8c0:	7fefffff 	.word	0x7fefffff
 800d8c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d8c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d8cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	460f      	mov	r7, r1
 800d8d4:	f7f3 f932 	bl	8000b3c <__aeabi_d2iz>
 800d8d8:	f7f2 fe2c 	bl	8000534 <__aeabi_i2d>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	460b      	mov	r3, r1
 800d8e0:	4630      	mov	r0, r6
 800d8e2:	4639      	mov	r1, r7
 800d8e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d8e8:	f7f2 fcd6 	bl	8000298 <__aeabi_dsub>
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	4b1f      	ldr	r3, [pc, #124]	; (800d96c <__ieee754_rem_pio2+0x3dc>)
 800d8f0:	f7f2 fe8a 	bl	8000608 <__aeabi_dmul>
 800d8f4:	460f      	mov	r7, r1
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	f7f3 f920 	bl	8000b3c <__aeabi_d2iz>
 800d8fc:	f7f2 fe1a 	bl	8000534 <__aeabi_i2d>
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	4630      	mov	r0, r6
 800d906:	4639      	mov	r1, r7
 800d908:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d90c:	f7f2 fcc4 	bl	8000298 <__aeabi_dsub>
 800d910:	2200      	movs	r2, #0
 800d912:	4b16      	ldr	r3, [pc, #88]	; (800d96c <__ieee754_rem_pio2+0x3dc>)
 800d914:	f7f2 fe78 	bl	8000608 <__aeabi_dmul>
 800d918:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d91c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d920:	f04f 0803 	mov.w	r8, #3
 800d924:	2600      	movs	r6, #0
 800d926:	2700      	movs	r7, #0
 800d928:	4632      	mov	r2, r6
 800d92a:	463b      	mov	r3, r7
 800d92c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d930:	f108 3aff 	add.w	sl, r8, #4294967295
 800d934:	f7f3 f8d0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d938:	b9b0      	cbnz	r0, 800d968 <__ieee754_rem_pio2+0x3d8>
 800d93a:	4b0d      	ldr	r3, [pc, #52]	; (800d970 <__ieee754_rem_pio2+0x3e0>)
 800d93c:	9301      	str	r3, [sp, #4]
 800d93e:	2302      	movs	r3, #2
 800d940:	9300      	str	r3, [sp, #0]
 800d942:	462a      	mov	r2, r5
 800d944:	4643      	mov	r3, r8
 800d946:	4621      	mov	r1, r4
 800d948:	a806      	add	r0, sp, #24
 800d94a:	f000 f8dd 	bl	800db08 <__kernel_rem_pio2>
 800d94e:	9b04      	ldr	r3, [sp, #16]
 800d950:	2b00      	cmp	r3, #0
 800d952:	4605      	mov	r5, r0
 800d954:	f6bf ae58 	bge.w	800d608 <__ieee754_rem_pio2+0x78>
 800d958:	6863      	ldr	r3, [r4, #4]
 800d95a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d95e:	6063      	str	r3, [r4, #4]
 800d960:	68e3      	ldr	r3, [r4, #12]
 800d962:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d966:	e746      	b.n	800d7f6 <__ieee754_rem_pio2+0x266>
 800d968:	46d0      	mov	r8, sl
 800d96a:	e7dd      	b.n	800d928 <__ieee754_rem_pio2+0x398>
 800d96c:	41700000 	.word	0x41700000
 800d970:	0800e788 	.word	0x0800e788
 800d974:	00000000 	.word	0x00000000

0800d978 <__kernel_cos>:
 800d978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	ec59 8b10 	vmov	r8, r9, d0
 800d980:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800d984:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d988:	ed2d 8b02 	vpush	{d8}
 800d98c:	eeb0 8a41 	vmov.f32	s16, s2
 800d990:	eef0 8a61 	vmov.f32	s17, s3
 800d994:	da07      	bge.n	800d9a6 <__kernel_cos+0x2e>
 800d996:	ee10 0a10 	vmov	r0, s0
 800d99a:	4649      	mov	r1, r9
 800d99c:	f7f3 f8ce 	bl	8000b3c <__aeabi_d2iz>
 800d9a0:	2800      	cmp	r0, #0
 800d9a2:	f000 8089 	beq.w	800dab8 <__kernel_cos+0x140>
 800d9a6:	4642      	mov	r2, r8
 800d9a8:	464b      	mov	r3, r9
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	4649      	mov	r1, r9
 800d9ae:	f7f2 fe2b 	bl	8000608 <__aeabi_dmul>
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	4b4e      	ldr	r3, [pc, #312]	; (800daf0 <__kernel_cos+0x178>)
 800d9b6:	4604      	mov	r4, r0
 800d9b8:	460d      	mov	r5, r1
 800d9ba:	f7f2 fe25 	bl	8000608 <__aeabi_dmul>
 800d9be:	a340      	add	r3, pc, #256	; (adr r3, 800dac0 <__kernel_cos+0x148>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	4682      	mov	sl, r0
 800d9c6:	468b      	mov	fp, r1
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	4629      	mov	r1, r5
 800d9cc:	f7f2 fe1c 	bl	8000608 <__aeabi_dmul>
 800d9d0:	a33d      	add	r3, pc, #244	; (adr r3, 800dac8 <__kernel_cos+0x150>)
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	f7f2 fc61 	bl	800029c <__adddf3>
 800d9da:	4622      	mov	r2, r4
 800d9dc:	462b      	mov	r3, r5
 800d9de:	f7f2 fe13 	bl	8000608 <__aeabi_dmul>
 800d9e2:	a33b      	add	r3, pc, #236	; (adr r3, 800dad0 <__kernel_cos+0x158>)
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	f7f2 fc56 	bl	8000298 <__aeabi_dsub>
 800d9ec:	4622      	mov	r2, r4
 800d9ee:	462b      	mov	r3, r5
 800d9f0:	f7f2 fe0a 	bl	8000608 <__aeabi_dmul>
 800d9f4:	a338      	add	r3, pc, #224	; (adr r3, 800dad8 <__kernel_cos+0x160>)
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	f7f2 fc4f 	bl	800029c <__adddf3>
 800d9fe:	4622      	mov	r2, r4
 800da00:	462b      	mov	r3, r5
 800da02:	f7f2 fe01 	bl	8000608 <__aeabi_dmul>
 800da06:	a336      	add	r3, pc, #216	; (adr r3, 800dae0 <__kernel_cos+0x168>)
 800da08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0c:	f7f2 fc44 	bl	8000298 <__aeabi_dsub>
 800da10:	4622      	mov	r2, r4
 800da12:	462b      	mov	r3, r5
 800da14:	f7f2 fdf8 	bl	8000608 <__aeabi_dmul>
 800da18:	a333      	add	r3, pc, #204	; (adr r3, 800dae8 <__kernel_cos+0x170>)
 800da1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da1e:	f7f2 fc3d 	bl	800029c <__adddf3>
 800da22:	4622      	mov	r2, r4
 800da24:	462b      	mov	r3, r5
 800da26:	f7f2 fdef 	bl	8000608 <__aeabi_dmul>
 800da2a:	4622      	mov	r2, r4
 800da2c:	462b      	mov	r3, r5
 800da2e:	f7f2 fdeb 	bl	8000608 <__aeabi_dmul>
 800da32:	ec53 2b18 	vmov	r2, r3, d8
 800da36:	4604      	mov	r4, r0
 800da38:	460d      	mov	r5, r1
 800da3a:	4640      	mov	r0, r8
 800da3c:	4649      	mov	r1, r9
 800da3e:	f7f2 fde3 	bl	8000608 <__aeabi_dmul>
 800da42:	460b      	mov	r3, r1
 800da44:	4602      	mov	r2, r0
 800da46:	4629      	mov	r1, r5
 800da48:	4620      	mov	r0, r4
 800da4a:	f7f2 fc25 	bl	8000298 <__aeabi_dsub>
 800da4e:	4b29      	ldr	r3, [pc, #164]	; (800daf4 <__kernel_cos+0x17c>)
 800da50:	429e      	cmp	r6, r3
 800da52:	4680      	mov	r8, r0
 800da54:	4689      	mov	r9, r1
 800da56:	dc11      	bgt.n	800da7c <__kernel_cos+0x104>
 800da58:	4602      	mov	r2, r0
 800da5a:	460b      	mov	r3, r1
 800da5c:	4650      	mov	r0, sl
 800da5e:	4659      	mov	r1, fp
 800da60:	f7f2 fc1a 	bl	8000298 <__aeabi_dsub>
 800da64:	460b      	mov	r3, r1
 800da66:	4924      	ldr	r1, [pc, #144]	; (800daf8 <__kernel_cos+0x180>)
 800da68:	4602      	mov	r2, r0
 800da6a:	2000      	movs	r0, #0
 800da6c:	f7f2 fc14 	bl	8000298 <__aeabi_dsub>
 800da70:	ecbd 8b02 	vpop	{d8}
 800da74:	ec41 0b10 	vmov	d0, r0, r1
 800da78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da7c:	4b1f      	ldr	r3, [pc, #124]	; (800dafc <__kernel_cos+0x184>)
 800da7e:	491e      	ldr	r1, [pc, #120]	; (800daf8 <__kernel_cos+0x180>)
 800da80:	429e      	cmp	r6, r3
 800da82:	bfcc      	ite	gt
 800da84:	4d1e      	ldrgt	r5, [pc, #120]	; (800db00 <__kernel_cos+0x188>)
 800da86:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800da8a:	2400      	movs	r4, #0
 800da8c:	4622      	mov	r2, r4
 800da8e:	462b      	mov	r3, r5
 800da90:	2000      	movs	r0, #0
 800da92:	f7f2 fc01 	bl	8000298 <__aeabi_dsub>
 800da96:	4622      	mov	r2, r4
 800da98:	4606      	mov	r6, r0
 800da9a:	460f      	mov	r7, r1
 800da9c:	462b      	mov	r3, r5
 800da9e:	4650      	mov	r0, sl
 800daa0:	4659      	mov	r1, fp
 800daa2:	f7f2 fbf9 	bl	8000298 <__aeabi_dsub>
 800daa6:	4642      	mov	r2, r8
 800daa8:	464b      	mov	r3, r9
 800daaa:	f7f2 fbf5 	bl	8000298 <__aeabi_dsub>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	4630      	mov	r0, r6
 800dab4:	4639      	mov	r1, r7
 800dab6:	e7d9      	b.n	800da6c <__kernel_cos+0xf4>
 800dab8:	2000      	movs	r0, #0
 800daba:	490f      	ldr	r1, [pc, #60]	; (800daf8 <__kernel_cos+0x180>)
 800dabc:	e7d8      	b.n	800da70 <__kernel_cos+0xf8>
 800dabe:	bf00      	nop
 800dac0:	be8838d4 	.word	0xbe8838d4
 800dac4:	bda8fae9 	.word	0xbda8fae9
 800dac8:	bdb4b1c4 	.word	0xbdb4b1c4
 800dacc:	3e21ee9e 	.word	0x3e21ee9e
 800dad0:	809c52ad 	.word	0x809c52ad
 800dad4:	3e927e4f 	.word	0x3e927e4f
 800dad8:	19cb1590 	.word	0x19cb1590
 800dadc:	3efa01a0 	.word	0x3efa01a0
 800dae0:	16c15177 	.word	0x16c15177
 800dae4:	3f56c16c 	.word	0x3f56c16c
 800dae8:	5555554c 	.word	0x5555554c
 800daec:	3fa55555 	.word	0x3fa55555
 800daf0:	3fe00000 	.word	0x3fe00000
 800daf4:	3fd33332 	.word	0x3fd33332
 800daf8:	3ff00000 	.word	0x3ff00000
 800dafc:	3fe90000 	.word	0x3fe90000
 800db00:	3fd20000 	.word	0x3fd20000
 800db04:	00000000 	.word	0x00000000

0800db08 <__kernel_rem_pio2>:
 800db08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	ed2d 8b02 	vpush	{d8}
 800db10:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800db14:	1ed4      	subs	r4, r2, #3
 800db16:	9308      	str	r3, [sp, #32]
 800db18:	9101      	str	r1, [sp, #4]
 800db1a:	4bc5      	ldr	r3, [pc, #788]	; (800de30 <__kernel_rem_pio2+0x328>)
 800db1c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800db1e:	9009      	str	r0, [sp, #36]	; 0x24
 800db20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800db24:	9304      	str	r3, [sp, #16]
 800db26:	9b08      	ldr	r3, [sp, #32]
 800db28:	3b01      	subs	r3, #1
 800db2a:	9307      	str	r3, [sp, #28]
 800db2c:	2318      	movs	r3, #24
 800db2e:	fb94 f4f3 	sdiv	r4, r4, r3
 800db32:	f06f 0317 	mvn.w	r3, #23
 800db36:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800db3a:	fb04 3303 	mla	r3, r4, r3, r3
 800db3e:	eb03 0a02 	add.w	sl, r3, r2
 800db42:	9b04      	ldr	r3, [sp, #16]
 800db44:	9a07      	ldr	r2, [sp, #28]
 800db46:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800de20 <__kernel_rem_pio2+0x318>
 800db4a:	eb03 0802 	add.w	r8, r3, r2
 800db4e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800db50:	1aa7      	subs	r7, r4, r2
 800db52:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800db56:	ae22      	add	r6, sp, #136	; 0x88
 800db58:	2500      	movs	r5, #0
 800db5a:	4545      	cmp	r5, r8
 800db5c:	dd13      	ble.n	800db86 <__kernel_rem_pio2+0x7e>
 800db5e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800de20 <__kernel_rem_pio2+0x318>
 800db62:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800db66:	2600      	movs	r6, #0
 800db68:	9b04      	ldr	r3, [sp, #16]
 800db6a:	429e      	cmp	r6, r3
 800db6c:	dc32      	bgt.n	800dbd4 <__kernel_rem_pio2+0xcc>
 800db6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db70:	9302      	str	r3, [sp, #8]
 800db72:	9b08      	ldr	r3, [sp, #32]
 800db74:	199d      	adds	r5, r3, r6
 800db76:	ab22      	add	r3, sp, #136	; 0x88
 800db78:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800db7c:	9306      	str	r3, [sp, #24]
 800db7e:	ec59 8b18 	vmov	r8, r9, d8
 800db82:	2700      	movs	r7, #0
 800db84:	e01f      	b.n	800dbc6 <__kernel_rem_pio2+0xbe>
 800db86:	42ef      	cmn	r7, r5
 800db88:	d407      	bmi.n	800db9a <__kernel_rem_pio2+0x92>
 800db8a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800db8e:	f7f2 fcd1 	bl	8000534 <__aeabi_i2d>
 800db92:	e8e6 0102 	strd	r0, r1, [r6], #8
 800db96:	3501      	adds	r5, #1
 800db98:	e7df      	b.n	800db5a <__kernel_rem_pio2+0x52>
 800db9a:	ec51 0b18 	vmov	r0, r1, d8
 800db9e:	e7f8      	b.n	800db92 <__kernel_rem_pio2+0x8a>
 800dba0:	9906      	ldr	r1, [sp, #24]
 800dba2:	9d02      	ldr	r5, [sp, #8]
 800dba4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800dba8:	9106      	str	r1, [sp, #24]
 800dbaa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800dbae:	9502      	str	r5, [sp, #8]
 800dbb0:	f7f2 fd2a 	bl	8000608 <__aeabi_dmul>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4640      	mov	r0, r8
 800dbba:	4649      	mov	r1, r9
 800dbbc:	f7f2 fb6e 	bl	800029c <__adddf3>
 800dbc0:	3701      	adds	r7, #1
 800dbc2:	4680      	mov	r8, r0
 800dbc4:	4689      	mov	r9, r1
 800dbc6:	9b07      	ldr	r3, [sp, #28]
 800dbc8:	429f      	cmp	r7, r3
 800dbca:	dde9      	ble.n	800dba0 <__kernel_rem_pio2+0x98>
 800dbcc:	e8eb 8902 	strd	r8, r9, [fp], #8
 800dbd0:	3601      	adds	r6, #1
 800dbd2:	e7c9      	b.n	800db68 <__kernel_rem_pio2+0x60>
 800dbd4:	9b04      	ldr	r3, [sp, #16]
 800dbd6:	aa0e      	add	r2, sp, #56	; 0x38
 800dbd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbdc:	930c      	str	r3, [sp, #48]	; 0x30
 800dbde:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800dbe0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dbe4:	9c04      	ldr	r4, [sp, #16]
 800dbe6:	930b      	str	r3, [sp, #44]	; 0x2c
 800dbe8:	ab9a      	add	r3, sp, #616	; 0x268
 800dbea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800dbee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dbf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbf6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800dbfa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800dbfe:	ab9a      	add	r3, sp, #616	; 0x268
 800dc00:	445b      	add	r3, fp
 800dc02:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800dc06:	2500      	movs	r5, #0
 800dc08:	1b63      	subs	r3, r4, r5
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	dc78      	bgt.n	800dd00 <__kernel_rem_pio2+0x1f8>
 800dc0e:	4650      	mov	r0, sl
 800dc10:	ec49 8b10 	vmov	d0, r8, r9
 800dc14:	f000 fc00 	bl	800e418 <scalbn>
 800dc18:	ec57 6b10 	vmov	r6, r7, d0
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800dc22:	ee10 0a10 	vmov	r0, s0
 800dc26:	4639      	mov	r1, r7
 800dc28:	f7f2 fcee 	bl	8000608 <__aeabi_dmul>
 800dc2c:	ec41 0b10 	vmov	d0, r0, r1
 800dc30:	f000 fb6e 	bl	800e310 <floor>
 800dc34:	2200      	movs	r2, #0
 800dc36:	ec51 0b10 	vmov	r0, r1, d0
 800dc3a:	4b7e      	ldr	r3, [pc, #504]	; (800de34 <__kernel_rem_pio2+0x32c>)
 800dc3c:	f7f2 fce4 	bl	8000608 <__aeabi_dmul>
 800dc40:	4602      	mov	r2, r0
 800dc42:	460b      	mov	r3, r1
 800dc44:	4630      	mov	r0, r6
 800dc46:	4639      	mov	r1, r7
 800dc48:	f7f2 fb26 	bl	8000298 <__aeabi_dsub>
 800dc4c:	460f      	mov	r7, r1
 800dc4e:	4606      	mov	r6, r0
 800dc50:	f7f2 ff74 	bl	8000b3c <__aeabi_d2iz>
 800dc54:	9006      	str	r0, [sp, #24]
 800dc56:	f7f2 fc6d 	bl	8000534 <__aeabi_i2d>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	460b      	mov	r3, r1
 800dc5e:	4630      	mov	r0, r6
 800dc60:	4639      	mov	r1, r7
 800dc62:	f7f2 fb19 	bl	8000298 <__aeabi_dsub>
 800dc66:	f1ba 0f00 	cmp.w	sl, #0
 800dc6a:	4606      	mov	r6, r0
 800dc6c:	460f      	mov	r7, r1
 800dc6e:	dd6c      	ble.n	800dd4a <__kernel_rem_pio2+0x242>
 800dc70:	1e62      	subs	r2, r4, #1
 800dc72:	ab0e      	add	r3, sp, #56	; 0x38
 800dc74:	f1ca 0118 	rsb	r1, sl, #24
 800dc78:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800dc7c:	9d06      	ldr	r5, [sp, #24]
 800dc7e:	fa40 f301 	asr.w	r3, r0, r1
 800dc82:	441d      	add	r5, r3
 800dc84:	408b      	lsls	r3, r1
 800dc86:	1ac0      	subs	r0, r0, r3
 800dc88:	ab0e      	add	r3, sp, #56	; 0x38
 800dc8a:	9506      	str	r5, [sp, #24]
 800dc8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dc90:	f1ca 0317 	rsb	r3, sl, #23
 800dc94:	fa40 f303 	asr.w	r3, r0, r3
 800dc98:	9302      	str	r3, [sp, #8]
 800dc9a:	9b02      	ldr	r3, [sp, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	dd62      	ble.n	800dd66 <__kernel_rem_pio2+0x25e>
 800dca0:	9b06      	ldr	r3, [sp, #24]
 800dca2:	2200      	movs	r2, #0
 800dca4:	3301      	adds	r3, #1
 800dca6:	9306      	str	r3, [sp, #24]
 800dca8:	4615      	mov	r5, r2
 800dcaa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dcae:	4294      	cmp	r4, r2
 800dcb0:	f300 8095 	bgt.w	800ddde <__kernel_rem_pio2+0x2d6>
 800dcb4:	f1ba 0f00 	cmp.w	sl, #0
 800dcb8:	dd07      	ble.n	800dcca <__kernel_rem_pio2+0x1c2>
 800dcba:	f1ba 0f01 	cmp.w	sl, #1
 800dcbe:	f000 80a2 	beq.w	800de06 <__kernel_rem_pio2+0x2fe>
 800dcc2:	f1ba 0f02 	cmp.w	sl, #2
 800dcc6:	f000 80c1 	beq.w	800de4c <__kernel_rem_pio2+0x344>
 800dcca:	9b02      	ldr	r3, [sp, #8]
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d14a      	bne.n	800dd66 <__kernel_rem_pio2+0x25e>
 800dcd0:	4632      	mov	r2, r6
 800dcd2:	463b      	mov	r3, r7
 800dcd4:	2000      	movs	r0, #0
 800dcd6:	4958      	ldr	r1, [pc, #352]	; (800de38 <__kernel_rem_pio2+0x330>)
 800dcd8:	f7f2 fade 	bl	8000298 <__aeabi_dsub>
 800dcdc:	4606      	mov	r6, r0
 800dcde:	460f      	mov	r7, r1
 800dce0:	2d00      	cmp	r5, #0
 800dce2:	d040      	beq.n	800dd66 <__kernel_rem_pio2+0x25e>
 800dce4:	4650      	mov	r0, sl
 800dce6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800de28 <__kernel_rem_pio2+0x320>
 800dcea:	f000 fb95 	bl	800e418 <scalbn>
 800dcee:	4630      	mov	r0, r6
 800dcf0:	4639      	mov	r1, r7
 800dcf2:	ec53 2b10 	vmov	r2, r3, d0
 800dcf6:	f7f2 facf 	bl	8000298 <__aeabi_dsub>
 800dcfa:	4606      	mov	r6, r0
 800dcfc:	460f      	mov	r7, r1
 800dcfe:	e032      	b.n	800dd66 <__kernel_rem_pio2+0x25e>
 800dd00:	2200      	movs	r2, #0
 800dd02:	4b4e      	ldr	r3, [pc, #312]	; (800de3c <__kernel_rem_pio2+0x334>)
 800dd04:	4640      	mov	r0, r8
 800dd06:	4649      	mov	r1, r9
 800dd08:	f7f2 fc7e 	bl	8000608 <__aeabi_dmul>
 800dd0c:	f7f2 ff16 	bl	8000b3c <__aeabi_d2iz>
 800dd10:	f7f2 fc10 	bl	8000534 <__aeabi_i2d>
 800dd14:	2200      	movs	r2, #0
 800dd16:	4b4a      	ldr	r3, [pc, #296]	; (800de40 <__kernel_rem_pio2+0x338>)
 800dd18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd1c:	f7f2 fc74 	bl	8000608 <__aeabi_dmul>
 800dd20:	4602      	mov	r2, r0
 800dd22:	460b      	mov	r3, r1
 800dd24:	4640      	mov	r0, r8
 800dd26:	4649      	mov	r1, r9
 800dd28:	f7f2 fab6 	bl	8000298 <__aeabi_dsub>
 800dd2c:	f7f2 ff06 	bl	8000b3c <__aeabi_d2iz>
 800dd30:	ab0e      	add	r3, sp, #56	; 0x38
 800dd32:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800dd36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800dd3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd3e:	f7f2 faad 	bl	800029c <__adddf3>
 800dd42:	3501      	adds	r5, #1
 800dd44:	4680      	mov	r8, r0
 800dd46:	4689      	mov	r9, r1
 800dd48:	e75e      	b.n	800dc08 <__kernel_rem_pio2+0x100>
 800dd4a:	d105      	bne.n	800dd58 <__kernel_rem_pio2+0x250>
 800dd4c:	1e63      	subs	r3, r4, #1
 800dd4e:	aa0e      	add	r2, sp, #56	; 0x38
 800dd50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800dd54:	15c3      	asrs	r3, r0, #23
 800dd56:	e79f      	b.n	800dc98 <__kernel_rem_pio2+0x190>
 800dd58:	2200      	movs	r2, #0
 800dd5a:	4b3a      	ldr	r3, [pc, #232]	; (800de44 <__kernel_rem_pio2+0x33c>)
 800dd5c:	f7f2 feda 	bl	8000b14 <__aeabi_dcmpge>
 800dd60:	2800      	cmp	r0, #0
 800dd62:	d139      	bne.n	800ddd8 <__kernel_rem_pio2+0x2d0>
 800dd64:	9002      	str	r0, [sp, #8]
 800dd66:	2200      	movs	r2, #0
 800dd68:	2300      	movs	r3, #0
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	4639      	mov	r1, r7
 800dd6e:	f7f2 feb3 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd72:	2800      	cmp	r0, #0
 800dd74:	f000 80c7 	beq.w	800df06 <__kernel_rem_pio2+0x3fe>
 800dd78:	1e65      	subs	r5, r4, #1
 800dd7a:	462b      	mov	r3, r5
 800dd7c:	2200      	movs	r2, #0
 800dd7e:	9904      	ldr	r1, [sp, #16]
 800dd80:	428b      	cmp	r3, r1
 800dd82:	da6a      	bge.n	800de5a <__kernel_rem_pio2+0x352>
 800dd84:	2a00      	cmp	r2, #0
 800dd86:	f000 8088 	beq.w	800de9a <__kernel_rem_pio2+0x392>
 800dd8a:	ab0e      	add	r3, sp, #56	; 0x38
 800dd8c:	f1aa 0a18 	sub.w	sl, sl, #24
 800dd90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f000 80b4 	beq.w	800df02 <__kernel_rem_pio2+0x3fa>
 800dd9a:	4650      	mov	r0, sl
 800dd9c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800de28 <__kernel_rem_pio2+0x320>
 800dda0:	f000 fb3a 	bl	800e418 <scalbn>
 800dda4:	00ec      	lsls	r4, r5, #3
 800dda6:	ab72      	add	r3, sp, #456	; 0x1c8
 800dda8:	191e      	adds	r6, r3, r4
 800ddaa:	ec59 8b10 	vmov	r8, r9, d0
 800ddae:	f106 0a08 	add.w	sl, r6, #8
 800ddb2:	462f      	mov	r7, r5
 800ddb4:	2f00      	cmp	r7, #0
 800ddb6:	f280 80df 	bge.w	800df78 <__kernel_rem_pio2+0x470>
 800ddba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800de20 <__kernel_rem_pio2+0x318>
 800ddbe:	f04f 0a00 	mov.w	sl, #0
 800ddc2:	eba5 030a 	sub.w	r3, r5, sl
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f2c0 810a 	blt.w	800dfe0 <__kernel_rem_pio2+0x4d8>
 800ddcc:	f8df b078 	ldr.w	fp, [pc, #120]	; 800de48 <__kernel_rem_pio2+0x340>
 800ddd0:	ec59 8b18 	vmov	r8, r9, d8
 800ddd4:	2700      	movs	r7, #0
 800ddd6:	e0f5      	b.n	800dfc4 <__kernel_rem_pio2+0x4bc>
 800ddd8:	2302      	movs	r3, #2
 800ddda:	9302      	str	r3, [sp, #8]
 800dddc:	e760      	b.n	800dca0 <__kernel_rem_pio2+0x198>
 800ddde:	ab0e      	add	r3, sp, #56	; 0x38
 800dde0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dde4:	b94d      	cbnz	r5, 800ddfa <__kernel_rem_pio2+0x2f2>
 800dde6:	b12b      	cbz	r3, 800ddf4 <__kernel_rem_pio2+0x2ec>
 800dde8:	a80e      	add	r0, sp, #56	; 0x38
 800ddea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ddee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	3201      	adds	r2, #1
 800ddf6:	461d      	mov	r5, r3
 800ddf8:	e759      	b.n	800dcae <__kernel_rem_pio2+0x1a6>
 800ddfa:	a80e      	add	r0, sp, #56	; 0x38
 800ddfc:	1acb      	subs	r3, r1, r3
 800ddfe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800de02:	462b      	mov	r3, r5
 800de04:	e7f6      	b.n	800ddf4 <__kernel_rem_pio2+0x2ec>
 800de06:	1e62      	subs	r2, r4, #1
 800de08:	ab0e      	add	r3, sp, #56	; 0x38
 800de0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800de12:	a90e      	add	r1, sp, #56	; 0x38
 800de14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800de18:	e757      	b.n	800dcca <__kernel_rem_pio2+0x1c2>
 800de1a:	bf00      	nop
 800de1c:	f3af 8000 	nop.w
	...
 800de2c:	3ff00000 	.word	0x3ff00000
 800de30:	0800e8d0 	.word	0x0800e8d0
 800de34:	40200000 	.word	0x40200000
 800de38:	3ff00000 	.word	0x3ff00000
 800de3c:	3e700000 	.word	0x3e700000
 800de40:	41700000 	.word	0x41700000
 800de44:	3fe00000 	.word	0x3fe00000
 800de48:	0800e890 	.word	0x0800e890
 800de4c:	1e62      	subs	r2, r4, #1
 800de4e:	ab0e      	add	r3, sp, #56	; 0x38
 800de50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800de58:	e7db      	b.n	800de12 <__kernel_rem_pio2+0x30a>
 800de5a:	a90e      	add	r1, sp, #56	; 0x38
 800de5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800de60:	3b01      	subs	r3, #1
 800de62:	430a      	orrs	r2, r1
 800de64:	e78b      	b.n	800dd7e <__kernel_rem_pio2+0x276>
 800de66:	3301      	adds	r3, #1
 800de68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800de6c:	2900      	cmp	r1, #0
 800de6e:	d0fa      	beq.n	800de66 <__kernel_rem_pio2+0x35e>
 800de70:	9a08      	ldr	r2, [sp, #32]
 800de72:	4422      	add	r2, r4
 800de74:	00d2      	lsls	r2, r2, #3
 800de76:	a922      	add	r1, sp, #136	; 0x88
 800de78:	18e3      	adds	r3, r4, r3
 800de7a:	9206      	str	r2, [sp, #24]
 800de7c:	440a      	add	r2, r1
 800de7e:	9302      	str	r3, [sp, #8]
 800de80:	f10b 0108 	add.w	r1, fp, #8
 800de84:	f102 0308 	add.w	r3, r2, #8
 800de88:	1c66      	adds	r6, r4, #1
 800de8a:	910a      	str	r1, [sp, #40]	; 0x28
 800de8c:	2500      	movs	r5, #0
 800de8e:	930d      	str	r3, [sp, #52]	; 0x34
 800de90:	9b02      	ldr	r3, [sp, #8]
 800de92:	42b3      	cmp	r3, r6
 800de94:	da04      	bge.n	800dea0 <__kernel_rem_pio2+0x398>
 800de96:	461c      	mov	r4, r3
 800de98:	e6a6      	b.n	800dbe8 <__kernel_rem_pio2+0xe0>
 800de9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de9c:	2301      	movs	r3, #1
 800de9e:	e7e3      	b.n	800de68 <__kernel_rem_pio2+0x360>
 800dea0:	9b06      	ldr	r3, [sp, #24]
 800dea2:	18ef      	adds	r7, r5, r3
 800dea4:	ab22      	add	r3, sp, #136	; 0x88
 800dea6:	441f      	add	r7, r3
 800dea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800deaa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800deae:	f7f2 fb41 	bl	8000534 <__aeabi_i2d>
 800deb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb4:	461c      	mov	r4, r3
 800deb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800deb8:	e9c7 0100 	strd	r0, r1, [r7]
 800debc:	eb03 0b05 	add.w	fp, r3, r5
 800dec0:	2700      	movs	r7, #0
 800dec2:	f04f 0800 	mov.w	r8, #0
 800dec6:	f04f 0900 	mov.w	r9, #0
 800deca:	9b07      	ldr	r3, [sp, #28]
 800decc:	429f      	cmp	r7, r3
 800dece:	dd08      	ble.n	800dee2 <__kernel_rem_pio2+0x3da>
 800ded0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ded2:	aa72      	add	r2, sp, #456	; 0x1c8
 800ded4:	18eb      	adds	r3, r5, r3
 800ded6:	4413      	add	r3, r2
 800ded8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800dedc:	3601      	adds	r6, #1
 800dede:	3508      	adds	r5, #8
 800dee0:	e7d6      	b.n	800de90 <__kernel_rem_pio2+0x388>
 800dee2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800dee6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800deea:	f7f2 fb8d 	bl	8000608 <__aeabi_dmul>
 800deee:	4602      	mov	r2, r0
 800def0:	460b      	mov	r3, r1
 800def2:	4640      	mov	r0, r8
 800def4:	4649      	mov	r1, r9
 800def6:	f7f2 f9d1 	bl	800029c <__adddf3>
 800defa:	3701      	adds	r7, #1
 800defc:	4680      	mov	r8, r0
 800defe:	4689      	mov	r9, r1
 800df00:	e7e3      	b.n	800deca <__kernel_rem_pio2+0x3c2>
 800df02:	3d01      	subs	r5, #1
 800df04:	e741      	b.n	800dd8a <__kernel_rem_pio2+0x282>
 800df06:	f1ca 0000 	rsb	r0, sl, #0
 800df0a:	ec47 6b10 	vmov	d0, r6, r7
 800df0e:	f000 fa83 	bl	800e418 <scalbn>
 800df12:	ec57 6b10 	vmov	r6, r7, d0
 800df16:	2200      	movs	r2, #0
 800df18:	4b99      	ldr	r3, [pc, #612]	; (800e180 <__kernel_rem_pio2+0x678>)
 800df1a:	ee10 0a10 	vmov	r0, s0
 800df1e:	4639      	mov	r1, r7
 800df20:	f7f2 fdf8 	bl	8000b14 <__aeabi_dcmpge>
 800df24:	b1f8      	cbz	r0, 800df66 <__kernel_rem_pio2+0x45e>
 800df26:	2200      	movs	r2, #0
 800df28:	4b96      	ldr	r3, [pc, #600]	; (800e184 <__kernel_rem_pio2+0x67c>)
 800df2a:	4630      	mov	r0, r6
 800df2c:	4639      	mov	r1, r7
 800df2e:	f7f2 fb6b 	bl	8000608 <__aeabi_dmul>
 800df32:	f7f2 fe03 	bl	8000b3c <__aeabi_d2iz>
 800df36:	4680      	mov	r8, r0
 800df38:	f7f2 fafc 	bl	8000534 <__aeabi_i2d>
 800df3c:	2200      	movs	r2, #0
 800df3e:	4b90      	ldr	r3, [pc, #576]	; (800e180 <__kernel_rem_pio2+0x678>)
 800df40:	f7f2 fb62 	bl	8000608 <__aeabi_dmul>
 800df44:	460b      	mov	r3, r1
 800df46:	4602      	mov	r2, r0
 800df48:	4639      	mov	r1, r7
 800df4a:	4630      	mov	r0, r6
 800df4c:	f7f2 f9a4 	bl	8000298 <__aeabi_dsub>
 800df50:	f7f2 fdf4 	bl	8000b3c <__aeabi_d2iz>
 800df54:	1c65      	adds	r5, r4, #1
 800df56:	ab0e      	add	r3, sp, #56	; 0x38
 800df58:	f10a 0a18 	add.w	sl, sl, #24
 800df5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800df60:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800df64:	e719      	b.n	800dd9a <__kernel_rem_pio2+0x292>
 800df66:	4630      	mov	r0, r6
 800df68:	4639      	mov	r1, r7
 800df6a:	f7f2 fde7 	bl	8000b3c <__aeabi_d2iz>
 800df6e:	ab0e      	add	r3, sp, #56	; 0x38
 800df70:	4625      	mov	r5, r4
 800df72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800df76:	e710      	b.n	800dd9a <__kernel_rem_pio2+0x292>
 800df78:	ab0e      	add	r3, sp, #56	; 0x38
 800df7a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800df7e:	f7f2 fad9 	bl	8000534 <__aeabi_i2d>
 800df82:	4642      	mov	r2, r8
 800df84:	464b      	mov	r3, r9
 800df86:	f7f2 fb3f 	bl	8000608 <__aeabi_dmul>
 800df8a:	2200      	movs	r2, #0
 800df8c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800df90:	4b7c      	ldr	r3, [pc, #496]	; (800e184 <__kernel_rem_pio2+0x67c>)
 800df92:	4640      	mov	r0, r8
 800df94:	4649      	mov	r1, r9
 800df96:	f7f2 fb37 	bl	8000608 <__aeabi_dmul>
 800df9a:	3f01      	subs	r7, #1
 800df9c:	4680      	mov	r8, r0
 800df9e:	4689      	mov	r9, r1
 800dfa0:	e708      	b.n	800ddb4 <__kernel_rem_pio2+0x2ac>
 800dfa2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800dfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfaa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800dfae:	f7f2 fb2b 	bl	8000608 <__aeabi_dmul>
 800dfb2:	4602      	mov	r2, r0
 800dfb4:	460b      	mov	r3, r1
 800dfb6:	4640      	mov	r0, r8
 800dfb8:	4649      	mov	r1, r9
 800dfba:	f7f2 f96f 	bl	800029c <__adddf3>
 800dfbe:	3701      	adds	r7, #1
 800dfc0:	4680      	mov	r8, r0
 800dfc2:	4689      	mov	r9, r1
 800dfc4:	9b04      	ldr	r3, [sp, #16]
 800dfc6:	429f      	cmp	r7, r3
 800dfc8:	dc01      	bgt.n	800dfce <__kernel_rem_pio2+0x4c6>
 800dfca:	45ba      	cmp	sl, r7
 800dfcc:	dae9      	bge.n	800dfa2 <__kernel_rem_pio2+0x49a>
 800dfce:	ab4a      	add	r3, sp, #296	; 0x128
 800dfd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dfd4:	e9c3 8900 	strd	r8, r9, [r3]
 800dfd8:	f10a 0a01 	add.w	sl, sl, #1
 800dfdc:	3e08      	subs	r6, #8
 800dfde:	e6f0      	b.n	800ddc2 <__kernel_rem_pio2+0x2ba>
 800dfe0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dfe2:	2b03      	cmp	r3, #3
 800dfe4:	d85b      	bhi.n	800e09e <__kernel_rem_pio2+0x596>
 800dfe6:	e8df f003 	tbb	[pc, r3]
 800dfea:	264a      	.short	0x264a
 800dfec:	0226      	.short	0x0226
 800dfee:	ab9a      	add	r3, sp, #616	; 0x268
 800dff0:	441c      	add	r4, r3
 800dff2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dff6:	46a2      	mov	sl, r4
 800dff8:	46ab      	mov	fp, r5
 800dffa:	f1bb 0f00 	cmp.w	fp, #0
 800dffe:	dc6c      	bgt.n	800e0da <__kernel_rem_pio2+0x5d2>
 800e000:	46a2      	mov	sl, r4
 800e002:	46ab      	mov	fp, r5
 800e004:	f1bb 0f01 	cmp.w	fp, #1
 800e008:	f300 8086 	bgt.w	800e118 <__kernel_rem_pio2+0x610>
 800e00c:	2000      	movs	r0, #0
 800e00e:	2100      	movs	r1, #0
 800e010:	2d01      	cmp	r5, #1
 800e012:	f300 80a0 	bgt.w	800e156 <__kernel_rem_pio2+0x64e>
 800e016:	9b02      	ldr	r3, [sp, #8]
 800e018:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e01c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800e020:	2b00      	cmp	r3, #0
 800e022:	f040 809e 	bne.w	800e162 <__kernel_rem_pio2+0x65a>
 800e026:	9b01      	ldr	r3, [sp, #4]
 800e028:	e9c3 7800 	strd	r7, r8, [r3]
 800e02c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e030:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e034:	e033      	b.n	800e09e <__kernel_rem_pio2+0x596>
 800e036:	3408      	adds	r4, #8
 800e038:	ab4a      	add	r3, sp, #296	; 0x128
 800e03a:	441c      	add	r4, r3
 800e03c:	462e      	mov	r6, r5
 800e03e:	2000      	movs	r0, #0
 800e040:	2100      	movs	r1, #0
 800e042:	2e00      	cmp	r6, #0
 800e044:	da3a      	bge.n	800e0bc <__kernel_rem_pio2+0x5b4>
 800e046:	9b02      	ldr	r3, [sp, #8]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d03d      	beq.n	800e0c8 <__kernel_rem_pio2+0x5c0>
 800e04c:	4602      	mov	r2, r0
 800e04e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e052:	9c01      	ldr	r4, [sp, #4]
 800e054:	e9c4 2300 	strd	r2, r3, [r4]
 800e058:	4602      	mov	r2, r0
 800e05a:	460b      	mov	r3, r1
 800e05c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e060:	f7f2 f91a 	bl	8000298 <__aeabi_dsub>
 800e064:	ae4c      	add	r6, sp, #304	; 0x130
 800e066:	2401      	movs	r4, #1
 800e068:	42a5      	cmp	r5, r4
 800e06a:	da30      	bge.n	800e0ce <__kernel_rem_pio2+0x5c6>
 800e06c:	9b02      	ldr	r3, [sp, #8]
 800e06e:	b113      	cbz	r3, 800e076 <__kernel_rem_pio2+0x56e>
 800e070:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e074:	4619      	mov	r1, r3
 800e076:	9b01      	ldr	r3, [sp, #4]
 800e078:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e07c:	e00f      	b.n	800e09e <__kernel_rem_pio2+0x596>
 800e07e:	ab9a      	add	r3, sp, #616	; 0x268
 800e080:	441c      	add	r4, r3
 800e082:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e086:	2000      	movs	r0, #0
 800e088:	2100      	movs	r1, #0
 800e08a:	2d00      	cmp	r5, #0
 800e08c:	da10      	bge.n	800e0b0 <__kernel_rem_pio2+0x5a8>
 800e08e:	9b02      	ldr	r3, [sp, #8]
 800e090:	b113      	cbz	r3, 800e098 <__kernel_rem_pio2+0x590>
 800e092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e096:	4619      	mov	r1, r3
 800e098:	9b01      	ldr	r3, [sp, #4]
 800e09a:	e9c3 0100 	strd	r0, r1, [r3]
 800e09e:	9b06      	ldr	r3, [sp, #24]
 800e0a0:	f003 0007 	and.w	r0, r3, #7
 800e0a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e0a8:	ecbd 8b02 	vpop	{d8}
 800e0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e0b4:	f7f2 f8f2 	bl	800029c <__adddf3>
 800e0b8:	3d01      	subs	r5, #1
 800e0ba:	e7e6      	b.n	800e08a <__kernel_rem_pio2+0x582>
 800e0bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e0c0:	f7f2 f8ec 	bl	800029c <__adddf3>
 800e0c4:	3e01      	subs	r6, #1
 800e0c6:	e7bc      	b.n	800e042 <__kernel_rem_pio2+0x53a>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	e7c1      	b.n	800e052 <__kernel_rem_pio2+0x54a>
 800e0ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e0d2:	f7f2 f8e3 	bl	800029c <__adddf3>
 800e0d6:	3401      	adds	r4, #1
 800e0d8:	e7c6      	b.n	800e068 <__kernel_rem_pio2+0x560>
 800e0da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800e0de:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e0e2:	4640      	mov	r0, r8
 800e0e4:	ec53 2b17 	vmov	r2, r3, d7
 800e0e8:	4649      	mov	r1, r9
 800e0ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e0ee:	f7f2 f8d5 	bl	800029c <__adddf3>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	460b      	mov	r3, r1
 800e0f6:	4606      	mov	r6, r0
 800e0f8:	460f      	mov	r7, r1
 800e0fa:	4640      	mov	r0, r8
 800e0fc:	4649      	mov	r1, r9
 800e0fe:	f7f2 f8cb 	bl	8000298 <__aeabi_dsub>
 800e102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e106:	f7f2 f8c9 	bl	800029c <__adddf3>
 800e10a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e10e:	e9ca 0100 	strd	r0, r1, [sl]
 800e112:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800e116:	e770      	b.n	800dffa <__kernel_rem_pio2+0x4f2>
 800e118:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800e11c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e120:	4630      	mov	r0, r6
 800e122:	ec53 2b17 	vmov	r2, r3, d7
 800e126:	4639      	mov	r1, r7
 800e128:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e12c:	f7f2 f8b6 	bl	800029c <__adddf3>
 800e130:	4602      	mov	r2, r0
 800e132:	460b      	mov	r3, r1
 800e134:	4680      	mov	r8, r0
 800e136:	4689      	mov	r9, r1
 800e138:	4630      	mov	r0, r6
 800e13a:	4639      	mov	r1, r7
 800e13c:	f7f2 f8ac 	bl	8000298 <__aeabi_dsub>
 800e140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e144:	f7f2 f8aa 	bl	800029c <__adddf3>
 800e148:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e14c:	e9ca 0100 	strd	r0, r1, [sl]
 800e150:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800e154:	e756      	b.n	800e004 <__kernel_rem_pio2+0x4fc>
 800e156:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e15a:	f7f2 f89f 	bl	800029c <__adddf3>
 800e15e:	3d01      	subs	r5, #1
 800e160:	e756      	b.n	800e010 <__kernel_rem_pio2+0x508>
 800e162:	9b01      	ldr	r3, [sp, #4]
 800e164:	9a01      	ldr	r2, [sp, #4]
 800e166:	601f      	str	r7, [r3, #0]
 800e168:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e16c:	605c      	str	r4, [r3, #4]
 800e16e:	609d      	str	r5, [r3, #8]
 800e170:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e174:	60d3      	str	r3, [r2, #12]
 800e176:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e17a:	6110      	str	r0, [r2, #16]
 800e17c:	6153      	str	r3, [r2, #20]
 800e17e:	e78e      	b.n	800e09e <__kernel_rem_pio2+0x596>
 800e180:	41700000 	.word	0x41700000
 800e184:	3e700000 	.word	0x3e700000

0800e188 <__kernel_sin>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	ec55 4b10 	vmov	r4, r5, d0
 800e190:	b085      	sub	sp, #20
 800e192:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e196:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e19a:	ed8d 1b00 	vstr	d1, [sp]
 800e19e:	9002      	str	r0, [sp, #8]
 800e1a0:	da06      	bge.n	800e1b0 <__kernel_sin+0x28>
 800e1a2:	ee10 0a10 	vmov	r0, s0
 800e1a6:	4629      	mov	r1, r5
 800e1a8:	f7f2 fcc8 	bl	8000b3c <__aeabi_d2iz>
 800e1ac:	2800      	cmp	r0, #0
 800e1ae:	d051      	beq.n	800e254 <__kernel_sin+0xcc>
 800e1b0:	4622      	mov	r2, r4
 800e1b2:	462b      	mov	r3, r5
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	f7f2 fa26 	bl	8000608 <__aeabi_dmul>
 800e1bc:	4682      	mov	sl, r0
 800e1be:	468b      	mov	fp, r1
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	f7f2 fa1e 	bl	8000608 <__aeabi_dmul>
 800e1cc:	a341      	add	r3, pc, #260	; (adr r3, 800e2d4 <__kernel_sin+0x14c>)
 800e1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d2:	4680      	mov	r8, r0
 800e1d4:	4689      	mov	r9, r1
 800e1d6:	4650      	mov	r0, sl
 800e1d8:	4659      	mov	r1, fp
 800e1da:	f7f2 fa15 	bl	8000608 <__aeabi_dmul>
 800e1de:	a33f      	add	r3, pc, #252	; (adr r3, 800e2dc <__kernel_sin+0x154>)
 800e1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e4:	f7f2 f858 	bl	8000298 <__aeabi_dsub>
 800e1e8:	4652      	mov	r2, sl
 800e1ea:	465b      	mov	r3, fp
 800e1ec:	f7f2 fa0c 	bl	8000608 <__aeabi_dmul>
 800e1f0:	a33c      	add	r3, pc, #240	; (adr r3, 800e2e4 <__kernel_sin+0x15c>)
 800e1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f6:	f7f2 f851 	bl	800029c <__adddf3>
 800e1fa:	4652      	mov	r2, sl
 800e1fc:	465b      	mov	r3, fp
 800e1fe:	f7f2 fa03 	bl	8000608 <__aeabi_dmul>
 800e202:	a33a      	add	r3, pc, #232	; (adr r3, 800e2ec <__kernel_sin+0x164>)
 800e204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e208:	f7f2 f846 	bl	8000298 <__aeabi_dsub>
 800e20c:	4652      	mov	r2, sl
 800e20e:	465b      	mov	r3, fp
 800e210:	f7f2 f9fa 	bl	8000608 <__aeabi_dmul>
 800e214:	a337      	add	r3, pc, #220	; (adr r3, 800e2f4 <__kernel_sin+0x16c>)
 800e216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21a:	f7f2 f83f 	bl	800029c <__adddf3>
 800e21e:	9b02      	ldr	r3, [sp, #8]
 800e220:	4606      	mov	r6, r0
 800e222:	460f      	mov	r7, r1
 800e224:	b9db      	cbnz	r3, 800e25e <__kernel_sin+0xd6>
 800e226:	4602      	mov	r2, r0
 800e228:	460b      	mov	r3, r1
 800e22a:	4650      	mov	r0, sl
 800e22c:	4659      	mov	r1, fp
 800e22e:	f7f2 f9eb 	bl	8000608 <__aeabi_dmul>
 800e232:	a325      	add	r3, pc, #148	; (adr r3, 800e2c8 <__kernel_sin+0x140>)
 800e234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e238:	f7f2 f82e 	bl	8000298 <__aeabi_dsub>
 800e23c:	4642      	mov	r2, r8
 800e23e:	464b      	mov	r3, r9
 800e240:	f7f2 f9e2 	bl	8000608 <__aeabi_dmul>
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	4620      	mov	r0, r4
 800e24a:	4629      	mov	r1, r5
 800e24c:	f7f2 f826 	bl	800029c <__adddf3>
 800e250:	4604      	mov	r4, r0
 800e252:	460d      	mov	r5, r1
 800e254:	ec45 4b10 	vmov	d0, r4, r5
 800e258:	b005      	add	sp, #20
 800e25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25e:	2200      	movs	r2, #0
 800e260:	4b1b      	ldr	r3, [pc, #108]	; (800e2d0 <__kernel_sin+0x148>)
 800e262:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e266:	f7f2 f9cf 	bl	8000608 <__aeabi_dmul>
 800e26a:	4632      	mov	r2, r6
 800e26c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e270:	463b      	mov	r3, r7
 800e272:	4640      	mov	r0, r8
 800e274:	4649      	mov	r1, r9
 800e276:	f7f2 f9c7 	bl	8000608 <__aeabi_dmul>
 800e27a:	4602      	mov	r2, r0
 800e27c:	460b      	mov	r3, r1
 800e27e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e282:	f7f2 f809 	bl	8000298 <__aeabi_dsub>
 800e286:	4652      	mov	r2, sl
 800e288:	465b      	mov	r3, fp
 800e28a:	f7f2 f9bd 	bl	8000608 <__aeabi_dmul>
 800e28e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e292:	f7f2 f801 	bl	8000298 <__aeabi_dsub>
 800e296:	a30c      	add	r3, pc, #48	; (adr r3, 800e2c8 <__kernel_sin+0x140>)
 800e298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e29c:	4606      	mov	r6, r0
 800e29e:	460f      	mov	r7, r1
 800e2a0:	4640      	mov	r0, r8
 800e2a2:	4649      	mov	r1, r9
 800e2a4:	f7f2 f9b0 	bl	8000608 <__aeabi_dmul>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	4639      	mov	r1, r7
 800e2b0:	f7f1 fff4 	bl	800029c <__adddf3>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	f7f1 ffec 	bl	8000298 <__aeabi_dsub>
 800e2c0:	e7c6      	b.n	800e250 <__kernel_sin+0xc8>
 800e2c2:	bf00      	nop
 800e2c4:	f3af 8000 	nop.w
 800e2c8:	55555549 	.word	0x55555549
 800e2cc:	3fc55555 	.word	0x3fc55555
 800e2d0:	3fe00000 	.word	0x3fe00000
 800e2d4:	5acfd57c 	.word	0x5acfd57c
 800e2d8:	3de5d93a 	.word	0x3de5d93a
 800e2dc:	8a2b9ceb 	.word	0x8a2b9ceb
 800e2e0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e2e4:	57b1fe7d 	.word	0x57b1fe7d
 800e2e8:	3ec71de3 	.word	0x3ec71de3
 800e2ec:	19c161d5 	.word	0x19c161d5
 800e2f0:	3f2a01a0 	.word	0x3f2a01a0
 800e2f4:	1110f8a6 	.word	0x1110f8a6
 800e2f8:	3f811111 	.word	0x3f811111

0800e2fc <fabs>:
 800e2fc:	ec51 0b10 	vmov	r0, r1, d0
 800e300:	ee10 2a10 	vmov	r2, s0
 800e304:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e308:	ec43 2b10 	vmov	d0, r2, r3
 800e30c:	4770      	bx	lr
	...

0800e310 <floor>:
 800e310:	ec51 0b10 	vmov	r0, r1, d0
 800e314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e318:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e31c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e320:	2e13      	cmp	r6, #19
 800e322:	460c      	mov	r4, r1
 800e324:	ee10 5a10 	vmov	r5, s0
 800e328:	4680      	mov	r8, r0
 800e32a:	dc34      	bgt.n	800e396 <floor+0x86>
 800e32c:	2e00      	cmp	r6, #0
 800e32e:	da16      	bge.n	800e35e <floor+0x4e>
 800e330:	a335      	add	r3, pc, #212	; (adr r3, 800e408 <floor+0xf8>)
 800e332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e336:	f7f1 ffb1 	bl	800029c <__adddf3>
 800e33a:	2200      	movs	r2, #0
 800e33c:	2300      	movs	r3, #0
 800e33e:	f7f2 fbf3 	bl	8000b28 <__aeabi_dcmpgt>
 800e342:	b148      	cbz	r0, 800e358 <floor+0x48>
 800e344:	2c00      	cmp	r4, #0
 800e346:	da59      	bge.n	800e3fc <floor+0xec>
 800e348:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e34c:	4a30      	ldr	r2, [pc, #192]	; (800e410 <floor+0x100>)
 800e34e:	432b      	orrs	r3, r5
 800e350:	2500      	movs	r5, #0
 800e352:	42ab      	cmp	r3, r5
 800e354:	bf18      	it	ne
 800e356:	4614      	movne	r4, r2
 800e358:	4621      	mov	r1, r4
 800e35a:	4628      	mov	r0, r5
 800e35c:	e025      	b.n	800e3aa <floor+0x9a>
 800e35e:	4f2d      	ldr	r7, [pc, #180]	; (800e414 <floor+0x104>)
 800e360:	4137      	asrs	r7, r6
 800e362:	ea01 0307 	and.w	r3, r1, r7
 800e366:	4303      	orrs	r3, r0
 800e368:	d01f      	beq.n	800e3aa <floor+0x9a>
 800e36a:	a327      	add	r3, pc, #156	; (adr r3, 800e408 <floor+0xf8>)
 800e36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e370:	f7f1 ff94 	bl	800029c <__adddf3>
 800e374:	2200      	movs	r2, #0
 800e376:	2300      	movs	r3, #0
 800e378:	f7f2 fbd6 	bl	8000b28 <__aeabi_dcmpgt>
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d0eb      	beq.n	800e358 <floor+0x48>
 800e380:	2c00      	cmp	r4, #0
 800e382:	bfbe      	ittt	lt
 800e384:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e388:	fa43 f606 	asrlt.w	r6, r3, r6
 800e38c:	19a4      	addlt	r4, r4, r6
 800e38e:	ea24 0407 	bic.w	r4, r4, r7
 800e392:	2500      	movs	r5, #0
 800e394:	e7e0      	b.n	800e358 <floor+0x48>
 800e396:	2e33      	cmp	r6, #51	; 0x33
 800e398:	dd0b      	ble.n	800e3b2 <floor+0xa2>
 800e39a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e39e:	d104      	bne.n	800e3aa <floor+0x9a>
 800e3a0:	ee10 2a10 	vmov	r2, s0
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	f7f1 ff79 	bl	800029c <__adddf3>
 800e3aa:	ec41 0b10 	vmov	d0, r0, r1
 800e3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e3b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ba:	fa23 f707 	lsr.w	r7, r3, r7
 800e3be:	4207      	tst	r7, r0
 800e3c0:	d0f3      	beq.n	800e3aa <floor+0x9a>
 800e3c2:	a311      	add	r3, pc, #68	; (adr r3, 800e408 <floor+0xf8>)
 800e3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c8:	f7f1 ff68 	bl	800029c <__adddf3>
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	f7f2 fbaa 	bl	8000b28 <__aeabi_dcmpgt>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d0bf      	beq.n	800e358 <floor+0x48>
 800e3d8:	2c00      	cmp	r4, #0
 800e3da:	da02      	bge.n	800e3e2 <floor+0xd2>
 800e3dc:	2e14      	cmp	r6, #20
 800e3de:	d103      	bne.n	800e3e8 <floor+0xd8>
 800e3e0:	3401      	adds	r4, #1
 800e3e2:	ea25 0507 	bic.w	r5, r5, r7
 800e3e6:	e7b7      	b.n	800e358 <floor+0x48>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e3ee:	fa03 f606 	lsl.w	r6, r3, r6
 800e3f2:	4435      	add	r5, r6
 800e3f4:	4545      	cmp	r5, r8
 800e3f6:	bf38      	it	cc
 800e3f8:	18e4      	addcc	r4, r4, r3
 800e3fa:	e7f2      	b.n	800e3e2 <floor+0xd2>
 800e3fc:	2500      	movs	r5, #0
 800e3fe:	462c      	mov	r4, r5
 800e400:	e7aa      	b.n	800e358 <floor+0x48>
 800e402:	bf00      	nop
 800e404:	f3af 8000 	nop.w
 800e408:	8800759c 	.word	0x8800759c
 800e40c:	7e37e43c 	.word	0x7e37e43c
 800e410:	bff00000 	.word	0xbff00000
 800e414:	000fffff 	.word	0x000fffff

0800e418 <scalbn>:
 800e418:	b570      	push	{r4, r5, r6, lr}
 800e41a:	ec55 4b10 	vmov	r4, r5, d0
 800e41e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e422:	4606      	mov	r6, r0
 800e424:	462b      	mov	r3, r5
 800e426:	b9aa      	cbnz	r2, 800e454 <scalbn+0x3c>
 800e428:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e42c:	4323      	orrs	r3, r4
 800e42e:	d03b      	beq.n	800e4a8 <scalbn+0x90>
 800e430:	4b31      	ldr	r3, [pc, #196]	; (800e4f8 <scalbn+0xe0>)
 800e432:	4629      	mov	r1, r5
 800e434:	2200      	movs	r2, #0
 800e436:	ee10 0a10 	vmov	r0, s0
 800e43a:	f7f2 f8e5 	bl	8000608 <__aeabi_dmul>
 800e43e:	4b2f      	ldr	r3, [pc, #188]	; (800e4fc <scalbn+0xe4>)
 800e440:	429e      	cmp	r6, r3
 800e442:	4604      	mov	r4, r0
 800e444:	460d      	mov	r5, r1
 800e446:	da12      	bge.n	800e46e <scalbn+0x56>
 800e448:	a327      	add	r3, pc, #156	; (adr r3, 800e4e8 <scalbn+0xd0>)
 800e44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44e:	f7f2 f8db 	bl	8000608 <__aeabi_dmul>
 800e452:	e009      	b.n	800e468 <scalbn+0x50>
 800e454:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e458:	428a      	cmp	r2, r1
 800e45a:	d10c      	bne.n	800e476 <scalbn+0x5e>
 800e45c:	ee10 2a10 	vmov	r2, s0
 800e460:	4620      	mov	r0, r4
 800e462:	4629      	mov	r1, r5
 800e464:	f7f1 ff1a 	bl	800029c <__adddf3>
 800e468:	4604      	mov	r4, r0
 800e46a:	460d      	mov	r5, r1
 800e46c:	e01c      	b.n	800e4a8 <scalbn+0x90>
 800e46e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e472:	460b      	mov	r3, r1
 800e474:	3a36      	subs	r2, #54	; 0x36
 800e476:	4432      	add	r2, r6
 800e478:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e47c:	428a      	cmp	r2, r1
 800e47e:	dd0b      	ble.n	800e498 <scalbn+0x80>
 800e480:	ec45 4b11 	vmov	d1, r4, r5
 800e484:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e4f0 <scalbn+0xd8>
 800e488:	f000 f83c 	bl	800e504 <copysign>
 800e48c:	a318      	add	r3, pc, #96	; (adr r3, 800e4f0 <scalbn+0xd8>)
 800e48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e492:	ec51 0b10 	vmov	r0, r1, d0
 800e496:	e7da      	b.n	800e44e <scalbn+0x36>
 800e498:	2a00      	cmp	r2, #0
 800e49a:	dd08      	ble.n	800e4ae <scalbn+0x96>
 800e49c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4a8:	ec45 4b10 	vmov	d0, r4, r5
 800e4ac:	bd70      	pop	{r4, r5, r6, pc}
 800e4ae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e4b2:	da0d      	bge.n	800e4d0 <scalbn+0xb8>
 800e4b4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e4b8:	429e      	cmp	r6, r3
 800e4ba:	ec45 4b11 	vmov	d1, r4, r5
 800e4be:	dce1      	bgt.n	800e484 <scalbn+0x6c>
 800e4c0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e4e8 <scalbn+0xd0>
 800e4c4:	f000 f81e 	bl	800e504 <copysign>
 800e4c8:	a307      	add	r3, pc, #28	; (adr r3, 800e4e8 <scalbn+0xd0>)
 800e4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ce:	e7e0      	b.n	800e492 <scalbn+0x7a>
 800e4d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e4d4:	3236      	adds	r2, #54	; 0x36
 800e4d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e4da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4de:	4620      	mov	r0, r4
 800e4e0:	4629      	mov	r1, r5
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	4b06      	ldr	r3, [pc, #24]	; (800e500 <scalbn+0xe8>)
 800e4e6:	e7b2      	b.n	800e44e <scalbn+0x36>
 800e4e8:	c2f8f359 	.word	0xc2f8f359
 800e4ec:	01a56e1f 	.word	0x01a56e1f
 800e4f0:	8800759c 	.word	0x8800759c
 800e4f4:	7e37e43c 	.word	0x7e37e43c
 800e4f8:	43500000 	.word	0x43500000
 800e4fc:	ffff3cb0 	.word	0xffff3cb0
 800e500:	3c900000 	.word	0x3c900000

0800e504 <copysign>:
 800e504:	ec51 0b10 	vmov	r0, r1, d0
 800e508:	ee11 0a90 	vmov	r0, s3
 800e50c:	ee10 2a10 	vmov	r2, s0
 800e510:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e514:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e518:	ea41 0300 	orr.w	r3, r1, r0
 800e51c:	ec43 2b10 	vmov	d0, r2, r3
 800e520:	4770      	bx	lr
	...

0800e524 <_init>:
 800e524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e526:	bf00      	nop
 800e528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e52a:	bc08      	pop	{r3}
 800e52c:	469e      	mov	lr, r3
 800e52e:	4770      	bx	lr

0800e530 <_fini>:
 800e530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e532:	bf00      	nop
 800e534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e536:	bc08      	pop	{r3}
 800e538:	469e      	mov	lr, r3
 800e53a:	4770      	bx	lr
